UsingComponents As screen:

    comUtilityFunctionsLibrary As comUtilityFunctions:
        fUtilInitData: |+
            =Switch(true,
                pInitType=-1,
                    Blank(),
            
                pInitType=1,
                    Set(gblPF_UI_whiteCapturedPieces, "");
                    Set(gblPF_UI_blackCapturedPieces, "");
                    ClearCollect(colPF_MOVE_HISTORY, Table(NODE_RECORD_PF));
                    ClearCollect(colPF_MOVE_TREE, Table(NODE_RECORD_PF));
                    RemoveIf(colPF_MOVE_HISTORY, nodeID<0);
                    RemoveIf(colPF_MOVE_TREE, nodeID<0);
                    Clear(colPF_Timers);
                    Reset(galChessBoard),
            
                pInitType=100,
                    ClearCollect(colPF_logs, Table({logOffset: 0, logEntry: ""})),
            
                // default
                Set(gblPF_TMR_RunNextTest, false);
                Set(gblPF_TMR_MakeNextTestMove, false);
                Set(gblPF_TMR_MakeNextGameMove, false);
                Set(gblPF_PAUSE, false);
                Set(gblPF_UI_selectedSqNum, EMPTY_SQUARE_NUM);
                Set(gblPF_UI_Ready4Input, false);
                Set(gblPF_UI_DisplayedBoard, EMPTY_BOARD);
                Set(gblPF_UI_DisplayedFEN, "");
                Set(gblPF_UI_GameTurn, WHITE);
                Set(gblPF_UI_whiteCapturedPieces, "");
                Set(gblPF_UI_blackCapturedPieces, "");
                Set(gblPF_UI_MaterialValueOverall, 0);
                Set(gblPF_UI_ThinkingText, "");
                Set(gblPF_UI_StatusText, "Restarting...");
                Set(gblPF_UI_DiagnosticText, "");
                Set(gblPF_UI_ModeFill, COLOR_WHITEish);
                Set(gblPF_UI_ThinkingFill, COLOR_WHITEish);
                Set(gblPF_UI_StatusFill, COLOR_WHITEish);
                Set(gblPF_UI_DiagnosticFill, COLOR_WHITEish);
            
                ClearCollect(colPF_logs, Table({logOffset: 0, logEntry: ""}));
                ClearCollect(colPF_DYNAMIC_DATA, Table(PF_DYNAMIC_DATA));
                Clear(colPF_Timers);
            
                UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {
                    uiData: Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).uiData, {
                                UI_ready4Input:     gblPF_UI_Ready4Input,
                                UI_sourceSqNum:     gblPF_UI_selectedSqNum,
                                statusText:         gblPF_UI_StatusText,
                                statusFill:         gblPF_UI_StatusFill,
                                diagnosticText:     gblPF_UI_DiagnosticText,
                                diagnosticFill:     gblPF_UI_DiagnosticFill
                            })
                });
            
                Reset(galChessBoard);
            );
            
            

    comChessEngineFunctionsLibrary As comChessEngineFunctions:
        fCE_100: |
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_100(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_100(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                // a pinch of randomness
                                heuristic19:
                                    RandBetween(-25,25)  // centipawns 
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +
                                        // theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_100(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_100(): exiting"})
            )
        fCE_200: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_200(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_200(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    // the dumb bully part
                                    Sum(
                                        ForAll(
                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
            
                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                        ),
                                        Value
                                    ) -
                                    Sum(
                                        ForAll(
                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
            
                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                        ),
                                        Value
                                    ),
                                heuristic19:
                                    // add a touch of randomness
                                    RandBetween(-5,5)
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic11 Basic Material BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        Sum(
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11,
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                        )
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_200(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_200(): exiting"})
            )
            
        fCE_300: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_300(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_300(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    // the dumb bully part
                                    Sum(
                                        ForAll(
                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
            
                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                        ),
                                        Value
                                    ) -
                                    Sum(
                                        ForAll(
                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
            
                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                        ),
                                        Value
                                    ),
                                heuristic17:
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                        // THEN
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " fCE_300(): DEBUG heuristic17 preMove active color WHITE " & 
                                                " # of BLACK pieces: " & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " preMoveFEN: " & theCurrentNode.preMoveFEN
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " preMoveBoard: " & theCurrentNode.preMoveBoard
                                            })
                                        );
                                        If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)>1,
                                            // THEN
                                            0,
            
                                            // ELSE - the opponent is a lone king
                                            Sum(
                                                With(
                                                    {
                                                        sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, "k"))
                                                    } As theirKing,
            
                                                    With(
                                                        {
                                                            adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & " " & UDF_sqNumToSqName(theirKing.sqNum)),
                                                            noKingPreMoveBoard: UDF_setBitAtSqNum(
                                                                                    theCurrentNode.preMoveBoard,
                                                                                    EMPTY_FILLER_ABBR,
                                                                                    UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, "k")
                                                                                ),
                                                            noKingPostMoveBoard:    UDF_setBitAtSqNum(
                                                                                        theCurrentNode.postMoveBoard,
                                                                                        EMPTY_FILLER_ABBR,
                                                                                        UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, "k")
                                                                                    ),
                                                            // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                            noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.preMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.sourceSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,"k")
                                                                                        ),
                                                            noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.postMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,"k")
                                                                                        )
                                                        } As adjToTheirKing,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_300(): heuristic17 opponent kingSq: " & UDF_sqNumToSqName(theirKing.sqNum) & "(" & theirKing.sqNum & ")" &
                                                                " Black King adj set: " & adjToTheirKing.adjSquaresSet
                                                            })
                                                        );
                                                        If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||
                                                            UDF_isSqNumAttacked(
                                                                adjToTheirKing.noKingNoPiecePostMoveBoard,
                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                WHITE
                                                            ),
                                                            // THEN
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_300(): heuristic17 looking to encourage move if it qualifies targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                })
                                                            );
                                                            Sum(
                                                                ForAll(
                                                                    Split(adjToTheirKing.adjSquaresSet, " ") As adjSquareName,
            
                                                                    With(
                                                                        {
                                                                            preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE),
                                                                            postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE)
                                                                        } As attackBooleans,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " Black King adjSquareName: " & adjSquareName.Value & "(" & UDF_sqNameToSqNum(adjSquareName.Value) & ")" &
                                                                                    " preMove isAttacked?: " & attackBooleans.preMoveIsAttacked &
                                                                                    " postMove isAttacked?: " & attackBooleans.postMoveIsAttacked
                                                                            })
                                                                        );
                                                                        Switch(true,
                                                                            attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,
                                                                            attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,
                                                                            
                                                                            // default
                                                                            0
                                                                        )
                                                                    )
                                                                ), Value
                                                            ) * 21,
            
                                                            // ELSE
                                                            If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,
                                                                // THEN
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_300(): heuristic17 discouraging move to naked adj square targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                -21, // do not want to move there - will be captured,
            
                                                                // ELSE
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_300(): heuristic17 neutral targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                0
                                                            )
                                                        )
            
                                                    )
                                                ),
                                                // - push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, "Q")<3,
                                                    // THEN - bump up the promotion to a Q
                                                    If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in "Q",
                                                        UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,18),
                                                        0
                                                    ),
                                                    // ELSE
                                                    0
                                                )
                                            )
                                        ),
            
                                        // ELSE
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " fCE_300(): DEBUG heuristic17 preMove active color BLACK " & 
                                                " # of WHITE pieces: " & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)
                                            })
                                        );
                                        If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)>1,
                                            // THEN
                                            0,
            
                                            // ELSE - the opponent is a lone king 
                                            Sum(
                                                With(
                                                    {
                                                        sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, "K"))
                                                    } As theirKing,
            
                                                    With(
                                                        {
                                                            adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & " " & UDF_sqNumToSqName(theirKing.sqNum)),
                                                            noKingPreMoveBoard: UDF_setBitAtSqNum(
                                                                                    theCurrentNode.preMoveBoard,
                                                                                    EMPTY_FILLER_ABBR,
                                                                                    UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, "K")
                                                                                ),
                                                            noKingPostMoveBoard:    UDF_setBitAtSqNum(
                                                                                        theCurrentNode.postMoveBoard,
                                                                                        EMPTY_FILLER_ABBR,
                                                                                        UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, "K")
                                                                                    ),
                                                            // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                            noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.preMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.sourceSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,"K")
                                                                                        ),
                                                            noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.postMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,"K")
                                                                                        )
                                                        } As adjToTheirKing,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_300(): heuristic17 opponent kingSq: " & UDF_sqNumToSqName(theirKing.sqNum) & "(" & theirKing.sqNum & ")" &
                                                                " White King adj set: " & adjToTheirKing.adjSquaresSet
                                                            })
                                                        );
                                                        If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||
                                                            UDF_isSqNumAttacked(
                                                                adjToTheirKing.noKingNoPiecePostMoveBoard,
                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                BLACK
                                                            ),
                                                            // THEN
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_300(): heuristic17 looking to encourage move if it qualifies targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                })
                                                            );
                                                            Sum(
                                                                ForAll(
                                                                    Split(adjToTheirKing.adjSquaresSet, " ") As adjSquareName,
            
                                                                    With(
                                                                        {
                                                                            preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK),
                                                                            postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK)
                                                                        } As attackBooleans,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " White King adjSquareName: " & adjSquareName.Value & "(" & UDF_sqNameToSqNum(adjSquareName.Value) & ")" &
                                                                                    " preMove isAttacked?: " & attackBooleans.preMoveIsAttacked &
                                                                                    " postMove isAttacked?: " & attackBooleans.postMoveIsAttacked
                                                                            })
                                                                        );
                                                                        Switch(true,
                                                                            attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,
                                                                            attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,
                                                                            
                                                                            // default
                                                                            0
                                                                        )
                                                                    )
                                                                ), Value
                                                            ) * -21,
            
                                                            // ELSE
                                                            If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,
                                                                // THEN
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_300(): heuristic17 discouraging move to naked adj square targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                21, // do not want to move there - will be captured,
            
                                                                // ELSE
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_300(): heuristic17 neutral targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                0
                                                            )
                                                        )
                                                    )
                                                ),
                                                // push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, "q")<3,
                                                    // THEN - bump up the promotion to a Q
                                                    If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in "Q",
                                                        (8 - UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName)) * RandBetween(-18,-8),
                                                        0
                                                    ),
                                                    // ELSE
                                                    0
                                                )
                                            )
                                        )
                                    ),
                                heuristic18:
                                    // add some order
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                        // THEN
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(-5,15), 0),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-5,15), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-5,15), 0)
                                        ),
            
                                        // ELSE
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(-15,5), 0),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-15,5), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-15,5), 0)
                                        )
                                    ),
                                heuristic19:
                                    RandBetween(-8,8)
            
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic11: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic17: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic18: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_300(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_300(): exiting"})
            )
            
        fCE_400: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_400(): entered pNodeID: " & pNodeID
                })
            );
            
            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                " comChessEngineFunctions.fCE_400(): entered2 pNodeID: " & pNodeID
            });
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_400(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    With(
                                        {
                                            materialDelta:
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ) -
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ),
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            materialCapture: 
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theCurrentNode.postMoveBoard,
                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<Abs(localVars.materialCapture)),
                                            // THEN
                                            localVars.materialDelta,
            
                                            // ELSE - discourage the move
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,-25,25)
                                        )
                                    ),
            
                                heuristic17:
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                        // THEN
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " fCE_400(): DEBUG heuristic17 preMove active color WHITE " & 
                                                " # of BLACK pieces: " & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " preMoveFEN: " & theCurrentNode.preMoveFEN
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " preMoveBoard: " & theCurrentNode.preMoveBoard
                                            })
                                        );
                                        If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)>1,
                                            // THEN
                                            0,
            
                                            // ELSE - the opponent is a lone king
                                            Sum(
                                                With(
                                                    {
                                                        sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, "k"))
                                                    } As theirKing,
            
                                                    With(
                                                        {
                                                            adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & " " & UDF_sqNumToSqName(theirKing.sqNum)),
                                                            noKingPreMoveBoard: UDF_setBitAtSqNum(
                                                                                    theCurrentNode.preMoveBoard,
                                                                                    EMPTY_FILLER_ABBR,
                                                                                    UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, "k")
                                                                                ),
                                                            noKingPostMoveBoard:    UDF_setBitAtSqNum(
                                                                                        theCurrentNode.postMoveBoard,
                                                                                        EMPTY_FILLER_ABBR,
                                                                                        UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, "k")
                                                                                    ),
                                                            // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                            noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.preMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.sourceSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,"k")
                                                                                        ),
                                                            noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.postMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,"k")
                                                                                        )
                                                        } As adjToTheirKing,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_400(): heuristic17 opponent kingSq: " & UDF_sqNumToSqName(theirKing.sqNum) & "(" & theirKing.sqNum & ")" &
                                                                " Black King adj set: " & adjToTheirKing.adjSquaresSet
                                                            })
                                                        );
                                                        If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||
                                                            UDF_isSqNumAttacked(
                                                                adjToTheirKing.noKingNoPiecePostMoveBoard,
                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                WHITE
                                                            ),
                                                            // THEN
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_400(): heuristic17 looking to encourage move if it qualifies targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                })
                                                            );
                                                            Sum(
                                                                ForAll(
                                                                    Split(adjToTheirKing.adjSquaresSet, " ") As adjSquareName,
            
                                                                    With(
                                                                        {
                                                                            preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE),
                                                                            postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE)
                                                                        } As attackBooleans,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " Black King adjSquareName: " & adjSquareName.Value & "(" & UDF_sqNameToSqNum(adjSquareName.Value) & ")" &
                                                                                    " preMove isAttacked?: " & attackBooleans.preMoveIsAttacked &
                                                                                    " postMove isAttacked?: " & attackBooleans.postMoveIsAttacked
                                                                            })
                                                                        );
                                                                        Switch(true,
                                                                            attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,
                                                                            attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,
                                                                            
                                                                            // default
                                                                            0
                                                                        )
                                                                    )
                                                                ), Value
                                                            ) * 21,
            
                                                            // ELSE
                                                            If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,
                                                                // THEN
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_400(): heuristic17 discouraging move to naked adj square targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                -21, // do not want to move there - will be captured,
            
                                                                // ELSE
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_400(): heuristic17 neutral targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                0
                                                            )
                                                        )
            
                                                    )
                                                ),
                                                // - push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, "Q")<3,
                                                    // THEN - bump up the promotion to a Q
                                                    If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in "Q",
                                                        UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,18),
                                                        0
                                                    ),
                                                    // ELSE
                                                    0
                                                )
                                            )
                                        ),
            
                                        // ELSE
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " fCE_400(): DEBUG heuristic17 preMove active color BLACK " & 
                                                " # of WHITE pieces: " & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)
                                            })
                                        );
                                        If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)>1,
                                            // THEN
                                            0,
            
                                            // ELSE - the opponent is a lone king 
                                            Sum(
                                                With(
                                                    {
                                                        sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, "K"))
                                                    } As theirKing,
            
                                                    With(
                                                        {
                                                            adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & " " & UDF_sqNumToSqName(theirKing.sqNum)),
                                                            noKingPreMoveBoard: UDF_setBitAtSqNum(
                                                                                    theCurrentNode.preMoveBoard,
                                                                                    EMPTY_FILLER_ABBR,
                                                                                    UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, "K")
                                                                                ),
                                                            noKingPostMoveBoard:    UDF_setBitAtSqNum(
                                                                                        theCurrentNode.postMoveBoard,
                                                                                        EMPTY_FILLER_ABBR,
                                                                                        UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, "K")
                                                                                    ),
                                                            // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                            noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.preMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.sourceSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,"K")
                                                                                        ),
                                                            noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(
                                                                                            UDF_setBitAtSqNum(
                                                                                                theCurrentNode.postMoveBoard,
                                                                                                EMPTY_FILLER_ABBR,
                                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                                            ),
                                                                                            EMPTY_FILLER_ABBR,
                                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,"K")
                                                                                        )
                                                        } As adjToTheirKing,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_400(): heuristic17 opponent kingSq: " & UDF_sqNumToSqName(theirKing.sqNum) & "(" & theirKing.sqNum & ")" &
                                                                " White King adj set: " & adjToTheirKing.adjSquaresSet
                                                            })
                                                        );
                                                        If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||
                                                            UDF_isSqNumAttacked(
                                                                adjToTheirKing.noKingNoPiecePostMoveBoard,
                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                BLACK
                                                            ),
                                                            // THEN
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_400(): heuristic17 looking to encourage move if it qualifies targetSqName: " & theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                })
                                                            );
                                                            Sum(
                                                                ForAll(
                                                                    Split(adjToTheirKing.adjSquaresSet, " ") As adjSquareName,
            
                                                                    With(
                                                                        {
                                                                            preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK),
                                                                            postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK)
                                                                        } As attackBooleans,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " White King adjSquareName: " & adjSquareName.Value & "(" & UDF_sqNameToSqNum(adjSquareName.Value) & ")" &
                                                                                    " preMove isAttacked?: " & attackBooleans.preMoveIsAttacked &
                                                                                    " postMove isAttacked?: " & attackBooleans.postMoveIsAttacked
                                                                            })
                                                                        );
                                                                        Switch(true,
                                                                            attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,
                                                                            attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,
                                                                            
                                                                            // default
                                                                            0
                                                                        )
                                                                    )
                                                                ), Value
                                                            ) * -21,
            
                                                            // ELSE
                                                            If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,
                                                                // THEN
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_400(): heuristic17 discouraging move to naked adj square targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                21, // do not want to move there - will be captured,
            
                                                                // ELSE
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_400(): heuristic17 neutral targetSqName: " &
                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                    })
                                                                );
                                                                0
                                                            )
                                                        )
                                                    )
                                                ),
                                                // push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, "q")<3,
                                                    // THEN - bump up the promotion to a Q
                                                    If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in "Q",
                                                        (8 - UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName)) * RandBetween(-18,-8),
                                                        0
                                                    ),
                                                    // ELSE
                                                    0
                                                )
                                            )
                                        )
                                    ),
                                heuristic18:
                                    // add some order
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                        // THEN
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(-5,15), 0),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-5,15), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-5,15), 0)
                                        ),
            
                                        // ELSE
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(-15,5), 0),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-15,5), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-15,5), 0)
                                        )
                                    ),
                                heuristic19:
                                    RandBetween(-8,8)
            
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic11: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic17: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic18: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_400(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_400(): exiting"})
            )
            
        fCE_500: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_500(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_500(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    With(
                                        {
                                            materialDelta:
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ) -
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ),
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            materialCapture: 
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theCurrentNode.postMoveBoard,
                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<Abs(localVars.materialCapture)),
                                            // THEN
                                            localVars.materialDelta,
            
                                            // ELSE - discourage the move
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,-25,25)
                                        )
                                    ),
                                heuristic12:
                                    // no capture - but moving an attacked piece to a unattacked square needs a small bonus
                                    With(
                                        {
                                            materialDelta:
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ) -
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ),
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            sourceSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theCurrentNode.preMoveBoard,
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theCurrentNode.postMoveBoard,
                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(localVars.sourceSqAttacked && !localVars.targetSqAttacked && localVars.materialDelta=0,
                                            // THEN
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,RandBetween(50,75),RandBetween(-75,-50)),
            
                                            // ELSE
                                            0
                                        )
                                    ),
            
                                heuristic16:
                                    If(!(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN)=GAME_PHASE_END),
                                        // THEN - not in the END GAME
                                        0,
            
                                        // ELSE - do END GAME analysis
                                        With(
                                            {
                                                totalWhiteBonus:
                                                    Sum(
                                                        // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                        If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, "Q")<3,
                                                            // THEN - push the pawn and bump up the promotion to a Q
                                                            If(
                                                                (IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in "Q") &&
                                                                !UDF_isSqNumAttacked(
                                                                    theCurrentNode.postMoveBoard,
                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                    UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)
                                                                ),
                                                                // THEN
                                                                UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,13),
            
                                                                // ELSE
                                                                0
                                                            ),
                                                            // ELSE
                                                            0
                                                        ),
            
                                                        // Sum: trapping the king
                                                        With(
                                                            {
                                                                sqNum:
                                                                    UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, "k"))
                                                            } As theKing,
            
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_500(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" 
                                                                });
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " current kingDangerBoard: " & theCurrentNode.postMoveActiveKingDangerBoard 
                                                                });
                                                            );
            
                                                            With(
                                                                {
                                                                    adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & " " &  UDF_sqNumToSqName(theKing.sqNum)),
                                                                    noKingPreMoveBoard: UDF_setBitAtSqNum(theCurrentNode.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    noKingPostMoveBoard:    UDF_setBitAtSqNum(theCurrentNode.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                                    noKingNoPiecePostMoveBoard:
                                                                        UDF_setBitAtSqNum(
                                                                            UDF_setBitAtSqNum(theCurrentNode.postMoveBoard,
                                                                                EMPTY_FILLER_ABBR,
                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum
                                                                            ),
                                                                            EMPTY_FILLER_ABBR,
                                                                            theKing.sqNum
                                                                        )
                                                                } As nextToKing,
            
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_500(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                        " adjSquaresSet: " & nextToKing.adjSquaresSet
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " premove no king board: " & nextToKing.noKingPreMoveBoard
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " postmove no king board: " & nextToKing.noKingPostMoveBoard
                                                                    });
                                                                );
            
                                                                With(
                                                                    {
                                                                        numAdjSquaresAttackedPreMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_500(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " premove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPreMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numAdjSquaresAttackedPostMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_500(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " postmove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPostMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numTargetSquareAttackedPostMove:
                                                                            If(theCurrentNode.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,
                                                                                // THEN
                                                                                UDF_getSetSize(
                                                                                    UDF_getAttackerSqNamesSet(
                                                                                        nextToKing.noKingNoPiecePostMoveBoard,
                                                                                        theCurrentNode.inactiveColorMoveRecord.targetSquareNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                    )
                                                                                ),
            
                                                                                // ELSE
                                                                                0
                                                                            )
                                                                    } As attackData,
            
                                                                    If(gblPF_DEBUG_EVAL,
                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                            " fCE_500(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                            " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                            " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove &
                                                                            " numTargetSquareAttackedPostMove: " & attackData.numTargetSquareAttackedPostMove
                                                                        })
                                                                    );
            
                                                                    With(
                                                                        {
                                                                            preMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                ),
                                                                            postMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                )
                                                                        } As theKingChecked,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_500(): DEBUG heuristic16 preMove" & 
                                                                                " # of adj Squares: " & UDF_getSetSize(nextToKing.adjSquaresSet) &
                                                                                " theKingChecked.preMove: " & theKingChecked.preMove &
                                                                                " theKingChecked.postMove: " & theKingChecked.postMove &
                                                                                " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                                " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove
                                                                            })
                                                                        );
                                                                        If((UDF_getSetSize(nextToKing.adjSquaresSet) - attackData.numAdjSquaresAttackedPostMove)=1 && !theKingChecked.postMove,
                                                                            // THEN - this move would cause a stalemate
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_500(): DEBUG heuristic16 postmove stalemate detected "
                                                                            });
                                                                            -1000,  // discourage the move
            
                                                                            // ELSE
                                                                            If(
                                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&
                                                                                attackData.numTargetSquareAttackedPostMove=0,
                                                                                // THEN - king can reach us and we are not protected - discourage move
                                                                                -50,
            
                                                                                // ELSE
                                                                                If(attackData.numAdjSquaresAttackedPostMove=UDF_getSetSize(nextToKing.adjSquaresSet),
                                                                                    // THEN - checkmate !
                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                        " checkmate FEN: " & theCurrentNode.preMoveFEN
                                                                                    });
                                                                                    10000, // strongly encourage the move
                                                                                    // ELSE - encourage the move if warranted
                                                                                    (attackData.numAdjSquaresAttackedPostMove - attackData.numAdjSquaresAttackedPreMove) * 21
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        ),
            
                                                        // Sum: TBD...
                                                        0
                                                    )
                                            } As totalBonus,
            
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,totalBonus.totalWhiteBonus,-totalBonus.totalWhiteBonus)
                                        )
                                    ),
            
                                heuristic18:
                                    // add some order
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                        // THEN
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP" ||
                                                    IsMatch(theCurrentNode.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        // THEN
                                                        RandBetween(-5,15),
                                                        
                                                        // ELSE
                                                        0
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-5,15), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-5,10), 0)
                                        ),
            
                                        // ELSE
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                If(
                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP" ||
                                                    IsMatch(theCurrentNode.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        // THEN
                                                        RandBetween(-15,-5),
                                                        
                                                        // ELSE
                                                        0
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-15,5), 0),
                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QR", RandBetween(-10,5), 0)
                                        )
                                    ),
                                heuristic19:
                                    RandBetween(-8,8)
            
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic11: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic12: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic16: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic18: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_500(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_500(): exiting"})
            )
            
        fCE_600: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_600(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    {
                        current:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),
                        parent:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)
                    } As theNodes,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_600(): san: " & theNodes.current.inactiveColorMoveRecord.san &
                            " pacn: " & theNodes.current.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN) &
                            " captureSquareOccupier: " & theNodes.current.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    With(
                                        {
                                            materialDelta:
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.postMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ) -
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.preMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ),
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            materialCapture: 
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<=Abs(localVars.materialCapture)),
                                            // THEN
                                            localVars.materialDelta,
            
                                            // ELSE - discourage the move
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,-25,25)
                                        )
                                    ),
                                heuristic12:
                                    // moving an attacked piece to a unattacked square needs a bonus
                                    With(
                                        {
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            sourceSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theNodes.current.preMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(localVars.sourceSqAttacked && (!localVars.targetSqAttacked),
                                            // THEN
                                            localVars.materialSource,
            
                                            // ELSE
                                            0
                                        )
                                    ),
            
                                heuristic15:
                                    If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_OPENING),
                                        // THEN
                                        Sum(
                                            // are we capturing one of their hanging pieces ?
                                            If((!IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareName)) &&
                                                theNodes.current.inactiveColorMoveRecord.captureSquareName in theData.evalData.theirHangingSquaresSet,
                                                // THEN
                                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,50,-50),
                                                // ELSE
                                                0
                                            ),
                                            // are we reducing the number of our hanging pieces ?
                                            With(
                                                {
                                                    myHangingSquaresSet: UDF_getHangingSquareNamesSet(theNodes.current.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN))
                                                } As v,
            
                                                If(UDF_getSetSize(v.myHangingSquaresSet)<UDF_getSetSize(theData.evalData.myHangingSquaresSet),
                                                    // THEN
                                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,40,-40),
                                                    // ELSE
                                                    0
                                                )
                                            ),
                                            // look for forks
                                            With(
                                                {
                                                    gettingForkedPieces:   If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,BLACK_PIECES,WHITE_PIECES),
                                                    forkingPieces:         If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)
                                                } As forkPieces,
            
                                                With(
                                                    {
                                                        gettingForkedSet:   UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.gettingForkedPieces),
                                                        forkingSet:         UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.forkingPieces)
                                                    } As forkSets,
                                                    
                                                    With(
                                                        {
                                                            targetTargetsSet:
                                                                // get only the eligibleSqName column
                                                                UDF_createSqNamesSet(
                                                                    Concat(
                                                                        ShowColumns(
                                                                            Filter(colPF_LEGAL_MOVES,
                                                                                sqNum=theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                                pieceUpper=
                                                                                    If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P",
                                                                                        // THEN - maintain the case sensitivity for PAWNs
                                                                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                                                        // ELSE
                                                                                        Upper(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier)
                                                                                    ),
                                                                                eligibleSqName in forkSets.gettingForkedSet,
                                                                                UDF_getSetSize(  
                                                                                    UDF_getSetIntersection(
                                                                                        slideOvers,
                                                                                        UDF_getSetUnion(forkSets.forkingSet,forkSets.gettingForkedSet)
                                                                                    )
                                                                                )=0 // no blockers in the sliderovers (or no sliderovers at all) results in a "true"
                                                                            ), eligibleSqName
                                                                        ), eligibleSqName, " "
                                                                    )
                                                                ),
                                                            targetIsAttacked:
                                                                UDF_isSqNumAttacked(
                                                                    theNodes.current.postMoveBoard, 
                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                )
                                                        } As targetData,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_600(): DEBUG heuristic15" & 
                                                                " gettingForkedSet: " & forkSets.gettingForkedSet &
                                                                " forkingSet: " & forkSets.forkingSet &
                                                                " targetTargetsSet: " & targetData.targetTargetsSet &
                                                                " target IsAttacked?: " & targetData.targetIsAttacked
                                                            })
                                                        );
                                                        If(targetData.targetIsAttacked,
                                                            // THEN
                                                            0,
            
                                                            // ELSE
                                                            With(
                                                                {
                                                                    protectedTargetTargetsCount:
                                                                        Sum(
                                                                            ForAll(
                                                                                Split(targetData.targetTargetsSet, " ") As theTargets,
            
                                                                                If(
                                                                                    UDF_isSqNumProtected(
                                                                                        theNodes.current.postMoveBoard,
                                                                                        UDF_sqNameToSqNum(theTargets.Value),
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                                    ),
                                                                                    // THEN
                                                                                    1,
            
                                                                                    // ELSE
                                                                                    0
                                                                                )
                                                                            ), Value
                                                                        )
                                                                } As counts,
            
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_600(): DEBUG heuristic15" & 
                                                                        " attackedTargetTargetsCount: " & counts.protectedTargetTargetsCount
                                                                    })
                                                                );
            
                                                                If(UDF_getSetSize(targetData.targetTargetsSet)<=1,
                                                                    // THEN - no fork
                                                                    0,
            
                                                                    // ELSE - might be a fork worth counting
                                                                    If(counts.protectedTargetTargetsCount>=UDF_getSetSize(targetData.targetTargetsSet),
                                                                        // THEN
                                                                        With(
                                                                            {
                                                                                sourceValue: 
                                                                                    UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.preMoveBoard, 
                                                                                        theNodes.current.inactiveColorMoveRecord.sourceSquareName,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    ),
                                                                                targetValue: 
                                                                                    -UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.postMoveBoard, 
                                                                                        targetData.targetTargetsSet,
                                                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                            } As theValues,
            
                                                                            If(gblPF_DEBUG_EVAL,
                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                    " fCE_600(): DEBUG heuristic15" & 
                                                                                    " source: " & theNodes.current.inactiveColorMoveRecord.sourceSquareName &
                                                                                    " value: " & theValues.sourceValue &
                                                                                    " target: " & targetData.targetTargetsSet &
                                                                                    " value: " & theValues.targetValue
                                                                                })
                                                                            );
                                                                            If(Abs(theValues.targetValue) < Abs(theValues.sourceValue),
                                                                                0,
                                                                                theValues.targetValue
                                                                            )
                                                                        ),
            
                                                                        // ELSE
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_600(): DEBUG heuristic15" & 
                                                                                " target: " & targetData.targetTargetsSet &
                                                                                " value: " & 
                                                                                    -UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.postMoveBoard, 
                                                                                        targetData.targetTargetsSet,
                                                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                            })
                                                                        );
                                                                        -UDF_minMaterialCentipawnValueFromSet(
                                                                            theNodes.current.postMoveBoard, 
                                                                            targetData.targetTargetsSet,
                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        ),
            
                                        // ELSE
                                        0
                                    ),
            
                                heuristic16:
                                    If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_END),
                                        // THEN - not in the END GAME
                                        0,
            
                                        // ELSE - do END GAME analysis
                                        With(
                                            {
                                                totalBonus:
                                                    Sum(
                                                        // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                        If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theNodes.current.preMoveBoard, "Q")<3,
                                                            // THEN - push the pawn and bump up the promotion to a Q
                                                            If(
                                                                (IsBlank(theNodes.current.inactiveColorMoveRecord.promoteTo) || theNodes.current.inactiveColorMoveRecord.promoteTo in "Q") &&
                                                                !UDF_isSqNumAttacked(
                                                                    theNodes.current.postMoveBoard,
                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                ),
                                                                // THEN
                                                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,
                                                                    UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName),
                                                                    8 - UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName)
                                                                 ) * RandBetween(8,21) + If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0),
            
                                                                // ELSE
                                                                If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0)
                                                            ),
                                                            // ELSE
                                                            If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,
                                                                RandBetween(100,200),
                                                                0
                                                            )
                                                        ),
            
                                                        // Sum: trapping the king
                                                        With(
                                                            {
                                                                sqNum:
                                                                    UDF_SearchBoardForPiece(theNodes.current.preMoveBoard, UDF_getICPieceABBR(theNodes.current.preMoveFEN, "k"))
                                                            } As theKing,
            
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_600(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" 
                                                                });
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " current kingDangerBoard: " & theNodes.current.postMoveActiveKingDangerBoard 
                                                                });
                                                            );
            
                                                            With(
                                                                {
                                                                    adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & " " &  UDF_sqNumToSqName(theKing.sqNum)),
                                                                    noKingPreMoveBoard: UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    noKingPostMoveBoard:    UDF_setBitAtSqNum(theNodes.current.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                                    noKingNoPiecePostMoveBoard:
                                                                        UDF_setBitAtSqNum(
                                                                            UDF_setBitAtSqNum(theNodes.current.postMoveBoard,
                                                                                EMPTY_FILLER_ABBR,
                                                                                theNodes.current.inactiveColorMoveRecord.targetSquareNum
                                                                            ),
                                                                            EMPTY_FILLER_ABBR,
                                                                            theKing.sqNum
                                                                        ),
                                                                    adjBlockedSquares:
                                                                        UDF_occupiedSqNamesSet(
                                                                            UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum), 
                                                                            UDF_createSqNamesSet(
                                                                                UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & " " &  UDF_sqNumToSqName(theKing.sqNum)
                                                                            ),
                                                                            If(UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)
                                                                        )
                                                                } As nextToKing,
            
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_600(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                        " adjSquaresSet: " & nextToKing.adjSquaresSet &
                                                                        " adjSquaresSet BLOCKED: " & nextToKing.adjBlockedSquares
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " premove no king board: " & nextToKing.noKingPreMoveBoard
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " postmove no king board: " & nextToKing.noKingPostMoveBoard
                                                                    });
                                                                );
            
                                                                With(
                                                                    {
                                                                        numAdjSquaresAttackedPreMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_600(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " premove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPreMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numAdjSquaresAttackedPostMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_600(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " postmove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPostMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numTargetSquareAttackedPostMove:
                                                                            If(theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,
                                                                                // THEN
                                                                                UDF_getSetSize(
                                                                                    UDF_getAttackerSqNamesSet(
                                                                                        nextToKing.noKingNoPiecePostMoveBoard,
                                                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                                ),
            
                                                                                // ELSE
                                                                                0
                                                                            )
                                                                    } As attackData,
            
                                                                    If(gblPF_DEBUG_EVAL,
                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                            " fCE_600(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                            " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                            " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove &
                                                                            " numTargetSquareAttackedPostMove: " & attackData.numTargetSquareAttackedPostMove
                                                                        })
                                                                    );
            
                                                                    With(
                                                                        {
                                                                            preMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                ),
                                                                            postMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                )
                                                                        } As theKingChecked,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_600(): DEBUG heuristic16 preMove" & 
                                                                                " # of adj Squares: " & UDF_getSetSize(nextToKing.adjSquaresSet) &
                                                                                " theKingChecked.preMove: " & theKingChecked.preMove &
                                                                                " theKingChecked.postMove: " & theKingChecked.postMove &
                                                                                " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                                " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove
                                                                            })
                                                                        );
                                                                        If((UDF_getSetSize(nextToKing.adjSquaresSet) - attackData.numAdjSquaresAttackedPostMove)=1 && !theKingChecked.postMove,
                                                                            // THEN - this move would cause a stalemate
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_600(): DEBUG heuristic16 postmove stalemate detected "
                                                                            });
                                                                            -1000,  // discourage the move
            
                                                                            // ELSE
                                                                            If(
                                                                                theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&
                                                                                attackData.numTargetSquareAttackedPostMove=0,
                                                                                // THEN - king can reach us and we are not protected - discourage move
                                                                                -50,
            
                                                                                // ELSE
                                                                                If(
                                                                                    (attackData.numAdjSquaresAttackedPostMove + UDF_getSetSize(nextToKing.adjBlockedSquares))
                                                                                    >=UDF_getSetSize(nextToKing.adjSquaresSet),
                                                                                    // THEN - checkmate !
                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                        " checkmate FEN: " & theNodes.current.preMoveFEN
                                                                                    });
                                                                                    10000, // strongly encourage the move
                                                                                    
                                                                                    // ELSE - encourage the move if warranted - early in game reduce impact
                                                                                    If(attackData.numAdjSquaresAttackedPostMove>attackData.numAdjSquaresAttackedPreMove,
                                                                                        // THEN
                                                                                        (attackData.numAdjSquaresAttackedPostMove - attackData.numAdjSquaresAttackedPreMove) * 21,
            
                                                                                        // ELSE
                                                                                        0 
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        ),
            
                                                        // Sum: TBD...
                                                        0
                                                    )
                                            } As totalBonus,
            
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,totalBonus.totalBonus,-totalBonus.totalBonus)
                                        )
                                    ),
            
                                heuristic18:
                                    // add some order
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,
                                        // THEN
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(10,25),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "BNP" && Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in "128",
                                                        RandBetween(0,15),
                                                        
                                                    // default
                                                        0
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(10,25),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", 
                                                        RandBetween(0,15),
            
                                                    // default
                                                    0
                                                ),
            
                                            // default
                                            0
                                        ),
            
                                        // ELSE
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(-25,-10),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "BNP"  && Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in "456",
                                                        RandBetween(-15,0),
                                                        
                                                    // default
                                                    0
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(-25,-10),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP",
                                                        RandBetween(-15,0),
                                                    
                                                    // default
                                                    0
                                                ),
            
                                            // default
                                            0
                                        )
                                    ),
                                heuristic19:
                                    RandBetween(-8,8)
            
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic11: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic12: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic15: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic16: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic18: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_600(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_600(): exiting"})
            )
            
        fCE_600_postEvaluate: |+
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_600_postEvaluate(): entered"
                })
            );
            
            
            
            
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_600_postEvaluate(): exiting"
                })
            );
            
        fCE_600_preEvaluate: |
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_600_preEvaluate(): entering"
                })
            );
            
            
            With(
                {
                    d0Node:         LookUp(colPF_MOVE_TREE, nodeDepth=0),
                    dynamicData:    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME)
                } As theData,
            
                UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {
                    evalData:   Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).evalData, {
                                    theirHangingSquaresSet: UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_INACTIVE_COLOR(theData.d0Node.postMoveFEN)),
                                    myHangingSquaresSet:    UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theData.d0Node.postMoveFEN))
                                })
                })
            );
            
            If(gblPF_DEBUG_EVAL,
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_600_preEvaluate(): DEBUG" &
                        " myHangingSquaresSet: " & theData.evalData.myHangingSquaresSet &
                        " theirHangingSquaresSet: " & theData.evalData.theirHangingSquaresSet
                    })
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_600_preEvaluate(): exiting"
                })
            );
        fCE_700: |+
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_700(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    {
                        current:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),
                        parent:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)
                    } As theNodes,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_700(): san: " & theNodes.current.inactiveColorMoveRecord.san &
                            " pacn: " & theNodes.current.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN) &
                            " captureSquareOccupier: " & theNodes.current.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                        postMoveEvalRecord: 
                            Patch(EVAL_RECORD_PF, {
                                heuristic11:
                                    With(
                                        {
                                            materialDelta:
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.postMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ) -
                                                Sum(
                                                    ForAll(
                                                        Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.preMoveFEN), "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                                    ),
                                                    Value
                                                ),
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            materialCapture: 
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            targetSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<=Abs(localVars.materialCapture)),
                                            // THEN
                                            localVars.materialDelta,
            
                                            // ELSE - discourage the move
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,-25,25)
                                        )
                                    ),
                                heuristic12:
                                    // bonus for moving - includes capturing a piece and/or running from danger
                                    With(
                                        {
                                            materialSource:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            materialCapture:
                                                UDF_getPieceCentipawnMaterialValue(
                                                    theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,
                                                    ALL_PIECES
                                                ),
                                            sourceSqProtected:
                                                UDF_isSqNumProtected(
                                                    theNodes.current.preMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                ),
                                            sourceSqAttacked:
                                                UDF_isSqNumAttacked(
                                                    theNodes.current.preMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                ),
                                            sourceAttackerMaterial:
                                                UDF_getSqNumAttackersMinMaterialCentipawn(
                                                    theNodes.current.preMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                ),
                                            targetSqProtectedByMe:
                                                UDF_isSqNumProtected(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                ),
                                            targetSqAttackedByThem:
                                                UDF_isSqNumProtected(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                ),
                                            targetAttackerMaterial:
                                                UDF_getSqNumAttackersMinMaterialCentipawn(
                                                    theNodes.current.postMoveBoard,
                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                )
                                        } As localVars,
            
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                " fCE_700(): heuristic12" & 
                                                " materialSource: " & localVars.materialSource &
                                                " materialCapture: " & localVars.materialCapture &
                                                " sourceSqProtected: " & localVars.sourceSqProtected &
                                                " sourceSqAttacked: " & localVars.sourceSqAttacked &
                                                " sourceAttackerMaterial: " & localVars.sourceAttackerMaterial &
                                                " targetSqProtectedByMe: " & localVars.targetSqProtectedByMe &
                                                " targetSqAttackedByThem: " & localVars.targetSqAttackedByThem &
                                                " targetAttackerMaterial: " & localVars.targetAttackerMaterial
                                            })
                                        );
            
                                        Switch(true,
                                            localVars.sourceSqAttacked && (!localVars.sourceSqProtected) && (!localVars.targetSqAttackedByThem) && localVars.materialCapture=0,
                                                // USE CASE: running from danger
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: running from danger" &
                                                        " bonus: " & localVars.materialSource
                                                    })
                                                );
                                                localVars.materialSource,
            
                                            localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&
                                            Abs(localVars.sourceAttackerMaterial)<Abs(localVars.materialSource),
                                                // USE CASE: walking from danger
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: walking from danger" &
                                                        " bonus: " & localVars.materialSource + localVars.sourceAttackerMaterial
                                                    })
                                                );
                                                localVars.materialSource + localVars.sourceAttackerMaterial,
            
                                            localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&
                                            Abs(localVars.sourceAttackerMaterial)>=Abs(localVars.materialSource),
                                                // USE CASE: facing our fears
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: facing our fears" &
                                                        " bonus: " & 0
                                                    })
                                                );
                                                0,
            
                                            (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && (!localVars.targetSqProtectedByMe),
                                                // USE CASE: discourage moving into a bullseye
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: discourage moving into a bullseye" &
                                                        " bonus: " & -localVars.materialSource
                                                    })
                                                );
                                                -localVars.materialSource,
                                            (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && localVars.targetSqProtectedByMe,
                                                // USE CASE: bullseye move depends upon players
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: bullseye move depends upon players" &
                                                        " bonus: " & -(localVars.targetAttackerMaterial + localVars.materialSource)
                                                    })
                                                );
                                                -(localVars.targetAttackerMaterial + localVars.materialSource),
                                            localVars.sourceSqAttacked && (!localVars.targetSqAttackedByThem) && localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),
                                                // USE CASE: capture hanging piece
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: capture hanging piece while running" &
                                                        " bonus: " & -localVars.materialCapture + localVars.materialSource
                                                    })
                                                );
                                                -localVars.materialCapture + localVars.materialSource,
                                            localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),
                                                // USE CASE: capture hanging piece
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: capture hanging piece" &
                                                        " bonus: " & -localVars.materialCapture
                                                    })
                                                );
                                                -localVars.materialCapture,
                                            localVars.materialCapture<>0 && localVars.targetSqAttackedByThem &&
                                            Abs(localVars.materialCapture)>=Abs(localVars.materialSource),
                                                // USE CASE: capture protected piece
                                                If(gblPF_DEBUG_EVAL,
                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                        " USE CASE: capture hanging piece" &
                                                        " bonus: " & -(localVars.materialCapture + localVars.materialSource)
                                                    })
                                                );
                                                -(localVars.materialCapture + localVars.materialSource),
            
                                            // default
                                            If(gblPF_DEBUG_EVAL,
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                    " USE CASE: default" &
                                                    " bonus: 0"
                                                })
                                            );
                                            0
                                        )
                                    ),
            
                                heuristic15:
                                    If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_OPENING),
                                        // THEN
                                        Sum(
                                            // are we capturing one of their hanging pieces ?
                                            If((!IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareName)) &&
                                                theNodes.current.inactiveColorMoveRecord.captureSquareName in theData.evalData.theirHangingSquaresSet,
                                                // THEN
                                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,50,-50),
                                                // ELSE
                                                0
                                            ),
                                            // are we reducing the number of our hanging pieces ?
                                            With(
                                                {
                                                    myHangingSquaresSet: UDF_getHangingSquareNamesSet(theNodes.current.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN))
                                                } As v,
            
                                                If(UDF_getSetSize(v.myHangingSquaresSet)<UDF_getSetSize(theData.evalData.myHangingSquaresSet),
                                                    // THEN
                                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,40,-40),
                                                    // ELSE
                                                    0
                                                )
                                            ),
                                            // look for forks
                                            With(
                                                {
                                                    gettingForkedPieces:   If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,BLACK_PIECES,WHITE_PIECES),
                                                    forkingPieces:         If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)
                                                } As forkPieces,
            
                                                With(
                                                    {
                                                        gettingForkedSet:   UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.gettingForkedPieces),
                                                        forkingSet:         UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.forkingPieces)
                                                    } As forkSets,
                                                    
                                                    With(
                                                        {
                                                            targetTargetsSet:
                                                                // get only the eligibleSqName column
                                                                UDF_createSqNamesSet(
                                                                    Concat(
                                                                        ShowColumns(
                                                                            Filter(colPF_LEGAL_MOVES,
                                                                                sqNum=theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                                pieceUpper=
                                                                                    If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P",
                                                                                        // THEN - maintain the case sensitivity for PAWNs
                                                                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,
                                                                                        // ELSE
                                                                                        Upper(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier)
                                                                                    ),
                                                                                eligibleSqName in forkSets.gettingForkedSet,
                                                                                UDF_getSetSize(  
                                                                                    UDF_getSetIntersection(
                                                                                        slideOvers,
                                                                                        UDF_getSetUnion(forkSets.forkingSet,forkSets.gettingForkedSet)
                                                                                    )
                                                                                )=0 // no blockers in the sliderovers (or no sliderovers at all) results in a "true"
                                                                            ), eligibleSqName
                                                                        ), eligibleSqName, " "
                                                                    )
                                                                ),
                                                            targetIsAttacked:
                                                                UDF_isSqNumAttacked(
                                                                    theNodes.current.postMoveBoard, 
                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                )
                                                        } As targetData,
            
                                                        If(gblPF_DEBUG_EVAL,
                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                " fCE_700(): DEBUG heuristic15" & 
                                                                " gettingForkedSet: " & forkSets.gettingForkedSet &
                                                                " forkingSet: " & forkSets.forkingSet &
                                                                " targetTargetsSet: " & targetData.targetTargetsSet &
                                                                " target IsAttacked?: " & targetData.targetIsAttacked
                                                            })
                                                        );
                                                        If(targetData.targetIsAttacked,
                                                            // THEN
                                                            0,
            
                                                            // ELSE
                                                            With(
                                                                {
                                                                    protectedTargetTargetsCount:
                                                                        Sum(
                                                                            ForAll(
                                                                                Split(targetData.targetTargetsSet, " ") As theTargets,
            
                                                                                If(
                                                                                    UDF_isSqNumProtected(
                                                                                        theNodes.current.postMoveBoard,
                                                                                        UDF_sqNameToSqNum(theTargets.Value),
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                                    ),
                                                                                    // THEN
                                                                                    1,
            
                                                                                    // ELSE
                                                                                    0
                                                                                )
                                                                            ), Value
                                                                        )
                                                                } As counts,
            
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_700(): DEBUG heuristic15" & 
                                                                        " attackedTargetTargetsCount: " & counts.protectedTargetTargetsCount
                                                                    })
                                                                );
            
                                                                If(UDF_getSetSize(targetData.targetTargetsSet)<=1,
                                                                    // THEN - no fork
                                                                    0,
            
                                                                    // ELSE - might be a fork worth counting
                                                                    If(counts.protectedTargetTargetsCount>=UDF_getSetSize(targetData.targetTargetsSet),
                                                                        // THEN
                                                                        With(
                                                                            {
                                                                                sourceValue: 
                                                                                    UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.preMoveBoard, 
                                                                                        theNodes.current.inactiveColorMoveRecord.sourceSquareName,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    ),
                                                                                targetValue: 
                                                                                    -UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.postMoveBoard, 
                                                                                        targetData.targetTargetsSet,
                                                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                            } As theValues,
            
                                                                            If(gblPF_DEBUG_EVAL,
                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                    " fCE_700(): DEBUG heuristic15" & 
                                                                                    " source: " & theNodes.current.inactiveColorMoveRecord.sourceSquareName &
                                                                                    " value: " & theValues.sourceValue &
                                                                                    " target: " & targetData.targetTargetsSet &
                                                                                    " value: " & theValues.targetValue
                                                                                })
                                                                            );
                                                                            If(Abs(theValues.targetValue) < Abs(theValues.sourceValue),
                                                                                0,
                                                                                theValues.targetValue
                                                                            )
                                                                        ),
            
                                                                        // ELSE
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_700(): DEBUG heuristic15" & 
                                                                                " target: " & targetData.targetTargetsSet &
                                                                                " value: " & 
                                                                                    -UDF_minMaterialCentipawnValueFromSet(
                                                                                        theNodes.current.postMoveBoard, 
                                                                                        targetData.targetTargetsSet,
                                                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                            })
                                                                        );
                                                                        -UDF_minMaterialCentipawnValueFromSet(
                                                                            theNodes.current.postMoveBoard, 
                                                                            targetData.targetTargetsSet,
                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                )
                                            )
                                        ),
            
                                        // ELSE
                                        0
                                    ),
            
                                heuristic16:
                                    If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_END),
                                        // THEN - not in the END GAME
                                        0,
            
                                        // ELSE - do END GAME analysis
                                        With(
                                            {
                                                totalBonus:
                                                    Sum(
                                                        // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?
                                                        If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_countPiecesOnBoard(theNodes.current.preMoveBoard, "Q")<3,
                                                            // THEN - push the pawn and bump up the promotion to a Q
                                                            If(
                                                                (IsBlank(theNodes.current.inactiveColorMoveRecord.promoteTo) || theNodes.current.inactiveColorMoveRecord.promoteTo in "Q") &&
                                                                !UDF_isSqNumAttacked(
                                                                    theNodes.current.postMoveBoard,
                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)
                                                                ),
                                                                // THEN
                                                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,
                                                                    UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName),
                                                                    8 - UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName)
                                                                 ) * RandBetween(8,21) + If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0),
            
                                                                // ELSE
                                                                If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0)
                                                            ),
                                                            // ELSE
                                                            If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "P" && UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,
                                                                RandBetween(100,200),
                                                                0
                                                            )
                                                        ),
            
                                                        // Sum: trapping the king
                                                        With(
                                                            {
                                                                sqNum:
                                                                    UDF_SearchBoardForPiece(theNodes.current.preMoveBoard, UDF_getICPieceABBR(theNodes.current.preMoveFEN, "k"))
                                                            } As theKing,
            
                                                            If(gblPF_DEBUG_EVAL,
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " fCE_700(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" 
                                                                });
                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                    " current kingDangerBoard: " & theNodes.current.postMoveActiveKingDangerBoard 
                                                                });
                                                            );
            
                                                            With(
                                                                {
                                                                    adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & " " &  UDF_sqNumToSqName(theKing.sqNum)),
                                                                    noKingPreMoveBoard: UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    noKingPostMoveBoard:    UDF_setBitAtSqNum(theNodes.current.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),
                                                                    // remove the moving piece so that we can determine if we can move to an adjacent protected square
                                                                    noKingNoPiecePostMoveBoard:
                                                                        UDF_setBitAtSqNum(
                                                                            UDF_setBitAtSqNum(theNodes.current.postMoveBoard,
                                                                                EMPTY_FILLER_ABBR,
                                                                                theNodes.current.inactiveColorMoveRecord.targetSquareNum
                                                                            ),
                                                                            EMPTY_FILLER_ABBR,
                                                                            theKing.sqNum
                                                                        ),
                                                                    adjBlockedSquares:
                                                                        UDF_occupiedSqNamesSet(
                                                                            UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum), 
                                                                            UDF_createSqNamesSet(
                                                                                UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & " " &  UDF_sqNumToSqName(theKing.sqNum)
                                                                            ),
                                                                            If(UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)
                                                                        )
                                                                } As nextToKing,
            
                                                                If(gblPF_DEBUG_EVAL,
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " fCE_700(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                        " adjSquaresSet: " & nextToKing.adjSquaresSet &
                                                                        " adjSquaresSet BLOCKED: " & nextToKing.adjBlockedSquares
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " premove no king board: " & nextToKing.noKingPreMoveBoard
                                                                    });
                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                        " postmove no king board: " & nextToKing.noKingPostMoveBoard
                                                                    });
                                                                );
            
                                                                With(
                                                                    {
                                                                        numAdjSquaresAttackedPreMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_700(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " premove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPreMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numAdjSquaresAttackedPostMove:
                                                                            UDF_getSetSize(
                                                                                UDF_createSqNamesSet(
                                                                                    Concat(
                                                                                        ForAll(
                                                                                            Split(nextToKing.adjSquaresSet, " ") As adjSqName,
            
                                                                                            If(gblPF_DEBUG_EVAL,
                                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                                    " fCE_700(): DEBUG heuristic16 adjSqName.Value: " & adjSqName.Value &
                                                                                                    " postmove AttackerSet: " &
                                                                                                        UDF_getAttackerSqNamesSet(
                                                                                                            nextToKing.noKingPostMoveBoard,
                                                                                                            UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                        )
                                                                                                })
                                                                                            );
            
                                                                                            If(
                                                                                                UDF_getSetSize(
                                                                                                    UDF_getAttackerSqNamesSet(
                                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                                        UDF_sqNameToSqNum(adjSqName.Value),
                                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                                    )
                                                                                                )>0,
                                                                                                adjSqName.Value, ""
                                                                                            )
                                                                                        ), Value, " "
                                                                                    )
                                                                                )
                                                                            ),
                                                                        numTargetSquareAttackedPostMove:
                                                                            If(theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,
                                                                                // THEN
                                                                                UDF_getSetSize(
                                                                                    UDF_getAttackerSqNamesSet(
                                                                                        nextToKing.noKingNoPiecePostMoveBoard,
                                                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )
                                                                                ),
            
                                                                                // ELSE
                                                                                0
                                                                            )
                                                                    } As attackData,
            
                                                                    If(gblPF_DEBUG_EVAL,
                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                            " fCE_700(): DEBUG heuristic16 theKing.sqNum: " & UDF_sqNumToSqName(theKing.sqNum) & "(" & theKing.sqNum & ")" &
                                                                            " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                            " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove &
                                                                            " numTargetSquareAttackedPostMove: " & attackData.numTargetSquareAttackedPostMove
                                                                        })
                                                                    );
            
                                                                    With(
                                                                        {
                                                                            preMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPreMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                ),
                                                                            postMove:
                                                                                If(
                                                                                    UDF_countSqNumAttacks(
                                                                                        nextToKing.noKingPostMoveBoard,
                                                                                        theKing.sqNum,
                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)
                                                                                    )>0,
                                                                                    true,false
                                                                                )
                                                                        } As theKingChecked,
            
                                                                        If(gblPF_DEBUG_EVAL,
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_700(): DEBUG heuristic16 preMove" & 
                                                                                " # of adj Squares: " & UDF_getSetSize(nextToKing.adjSquaresSet) &
                                                                                " theKingChecked.preMove: " & theKingChecked.preMove &
                                                                                " theKingChecked.postMove: " & theKingChecked.postMove &
                                                                                " numAdjSquaresAttackedPreMove: " & attackData.numAdjSquaresAttackedPreMove &
                                                                                " numAdjSquaresAttackedPostMove: " & attackData.numAdjSquaresAttackedPostMove
                                                                            })
                                                                        );
                                                                        If((UDF_getSetSize(nextToKing.adjSquaresSet) - attackData.numAdjSquaresAttackedPostMove)=1 && !theKingChecked.postMove,
                                                                            // THEN - this move would cause a stalemate
                                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                " fCE_700(): DEBUG heuristic16 postmove stalemate detected "
                                                                            });
                                                                            -1000,  // discourage the move
            
                                                                            // ELSE
                                                                            If(
                                                                                theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&
                                                                                attackData.numTargetSquareAttackedPostMove=0,
                                                                                // THEN - king can reach us and we are not protected - discourage move
                                                                                -50,
            
                                                                                // ELSE
                                                                                If(
                                                                                    (attackData.numAdjSquaresAttackedPostMove + UDF_getSetSize(nextToKing.adjBlockedSquares))
                                                                                    >=UDF_getSetSize(nextToKing.adjSquaresSet),
                                                                                    // THEN - checkmate !
                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                                                                        " checkmate FEN: " & theNodes.current.preMoveFEN
                                                                                    });
                                                                                    10000, // strongly encourage the move
                                                                                    
                                                                                    // ELSE - encourage the move if warranted - early in game reduce impact
                                                                                    If(attackData.numAdjSquaresAttackedPostMove>attackData.numAdjSquaresAttackedPreMove,
                                                                                        // THEN
                                                                                        (attackData.numAdjSquaresAttackedPostMove - attackData.numAdjSquaresAttackedPreMove) * 21,
            
                                                                                        // ELSE
                                                                                        0 
                                                                                    )
                                                                                )
                                                                            )
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        ),
            
                                                        // Sum: TBD...
                                                        0
                                                    )
                                            } As totalBonus,
            
                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,totalBonus.totalBonus,-totalBonus.totalBonus)
                                        )
                                    ),
            
                                heuristic18:
                                    // add some order
                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,
                                        // THEN
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                With(
                                                    {
                                                        inBook:    LookUp(Split(OPENING_BOOK_WHITE, " "),Value=theNodes.current.inactiveColorMoveRecord.san)
                                                    } As theOpening,
                                                    If(IsBlank(theOpening.inBook),
                                                        // THEN - not a book move
                                                        Switch(true,
                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "BNP" &&
                                                            Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in "128",
                                                                RandBetween(0,15),
                                                            // default
                                                            0
                                                        ),
                                                        // ELSE - the move is in the book
                                                        RandBetween(15,35)
                                                    )
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(10,25),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP" &&
                                                    (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture
                                                        RandBetween(0,15),
            
                                                    // default
                                                    0
                                                ),
            
                                            // default
                                            0
                                        ),
            
                                        // ELSE
                                        Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),
                                            GAME_PHASE_OPENING,
                                                With(
                                                    {
                                                        inBook:    LookUp(Split(OPENING_BOOK_BLACK, " "),Value=theNodes.current.inactiveColorMoveRecord.san)
                                                    } As theOpening,
                                                    If(IsBlank(theOpening.inBook),
                                                        // THEN - not a book move
                                                        Switch(true,
                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "BNP" &&
                                                            Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in "456",
                                                                RandBetween(-15,0),
                                                            // default
                                                            0
                                                        ),
                                                        // ELSE - the move is in the book
                                                        RandBetween(-35,-15)
                                                    )
                                                ),
                                            GAME_PHASE_MIDDLE,
                                                Switch(true,
                                                    IsMatch(theNodes.current.inactiveColorMoveRecord.san, "O-O", MatchOptions.BeginsWith),
                                                        RandBetween(-25,-10),
                                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP" &&
                                                    (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture
                                                        RandBetween(-15,0),
                                                    
                                                    // default
                                                    0
                                                ),
            
                                            // default
                                            0
                                        )
                                    ),
                                heuristic19:
                                    RandBetween(-8,8)
            
                            })
                    });
            
                    UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                        postMoveEvalRecord: 
                            Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                centipawn:
                                    With(
                                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                        
                                        If(gblPF_DEBUG_EVAL,
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic12: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic15: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic16: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic18: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                            });
                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            })
                                        );
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                        theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                    )
                            })
                    })
                );
            
                If(gblPF_DEBUG_EVAL,
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fCE_700(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                        })
                    )
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_700(): exiting"})
            )
            
        fCE_700_postEvaluate: |+
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_700_postEvaluate(): entered"
                })
            );
            
            
            
            
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_700_postEvaluate(): exiting"
                })
            );
            
        fCE_700_preEvaluate: |
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_700_preEvaluate(): entering"
                })
            );
            
            
            With(
                {
                    d0Node:         LookUp(colPF_MOVE_TREE, nodeDepth=0),
                    dynamicData:    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME)
                } As theData,
            
                UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {
                    evalData:   Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).evalData, {
                                    theirHangingSquaresSet: UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_INACTIVE_COLOR(theData.d0Node.postMoveFEN)),
                                    myHangingSquaresSet:    UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theData.d0Node.postMoveFEN))
                                })
                })
            );
            
            If(gblPF_DEBUG_EVAL,
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_700_preEvaluate(): DEBUG" &
                        " myHangingSquaresSet: " & theData.evalData.myHangingSquaresSet &
                        " theirHangingSquaresSet: " & theData.evalData.theirHangingSquaresSet
                    })
                )
            );
            
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fCE_700_preEvaluate(): exiting"
                })
            );
        fME_END_GAME: |
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fME_END_GAME(): entered pVersion: " & pVersion &
                    " pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fME_END_GAME(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    Sum(0,
                        With (
                            {
                                ppd:    UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN),
                                filterScreen: If(UDF_FEN_TO_INACTIVE_COLOR(theCurrentNode.postMoveFEN)=WHITE,"QRBNP","qrbnp")
                            } As localVars,
            
                            With(
                                {
                                    totalOpponentMaterial: Sum(
                                                            ForAll(
                                                                Split(localVars.ppd, "") As thePiece,
            
                                                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, localVars.filterScreen)
                                                            ),
                                                            Value
                                                        )
                                } As localVars,
            
                                If(localVars.totalOpponentMaterial<>0,
                                    // THEN
                                    0,
            
                                    // ELSE - we are playing against king only
                                    Sum(0,
                                        If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "P", 25, 0)
                                    )
                                )
                            )
                        )
                    )
                )
            );
            
            // no exit logging or will mess up return code
        fME_EvaluateMove: |
            =
            If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: " & pNodeID
                })
            );
            
            With(
                LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
            
                With(
                    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
            
                    If(gblPF_DEBUG_EVAL,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                            " fME_EvaluateMove(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                            " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                            " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                            " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                        })
                    );
            
                    // determine which player's turn it is, and then see what their computer setting is currently set to
                    With(
                        {
                            selectedEngine: If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE, drpWhitePiecesCE.Selected.Value, drpBlackPiecesCE.Selected.Value)
                        } As theEngine,
            
                        If(gblPF_DEBUG_TIMERS,
                            If(IsBlank(LookUp(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove")),
                                Collect(colPF_Timers, {timerName:"comChessEngineFunctions.fME_EvaluateMove", startTime: Now(), stopTime: Blank() }),
                                UpdateIf(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove", { startTime: Now(), stopTime: Blank() })
                            )
                        );
                        
                        Switch(true,
                            theEngine.selectedEngine=CE_PF_200,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_200(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_200(pNodeID),
                            theEngine.selectedEngine=CE_PF_300,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_300(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_300(pNodeID),
                            theEngine.selectedEngine=CE_PF_400,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_400(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_400(pNodeID),
                            theEngine.selectedEngine=CE_PF_500,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_500(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_500(pNodeID),
                            theEngine.selectedEngine=CE_PF_600,
                                comChessEngineFunctions.fCE_600_preEvaluate();
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_600(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_600(pNodeID);
                                comChessEngineFunctions.fCE_600_postEvaluate(),
                            theEngine.selectedEngine=CE_PF_700,
                                comChessEngineFunctions.fCE_700_preEvaluate();
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_700(" & pNodeID & ")"
                                    })
                                );
                                comChessEngineFunctions.fCE_700(pNodeID);
                                comChessEngineFunctions.fCE_700_postEvaluate(),
            
                            // default
                            If(gblPF_DEBUG_EVAL,
                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                    " fME_EvaluateMove(): calling comChessEngineFunctions.fCE_100(" & pNodeID & ")"
                                })
                            );
                            comChessEngineFunctions.fCE_100(pNodeID)
                        );
            
                        If(gblPF_DEBUG_TIMERS,
                            UpdateIf(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove", { stopTime: Now() });
                            With(
                                LookUp(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove") As theTimer,
            
                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                    " comChessEngineFunctions.fME_EvaluateMove(): elapsed time " &
                                    Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & " seconds" &
                                    " selectedEngine: " & theEngine.selectedEngine
                                    
                                })
                            )
                        )
                    )
                )
            );
            
            
            
            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fME_EvaluateMove(): exiting"});
        fME_getGamePhase: |
            =If(gblPF_DEBUG_EVAL,
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                    " comChessEngineFunctions.fME_getGamePhase(): entered pFEN: " & pFEN
                })
            );
            
            With (
                {
                    board:  UDF_FEN_TO_BOARD(pFEN),
                    ppd:    UDF_FEN_TO_PIECE_PLACEMENT(pFEN)
                } As theBoard,
            
                With (
                    {
                        whiteTotalDevelopment: Sum(
                                                If(UDF_getBitAtSqNum(theBoard.board,51)="P",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,52)="P",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,56)="R",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,57)="N",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,58)="B",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,59)="Q",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,60)="K",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,61)="B",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,62)="N",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,63)="R",0,1)
                                            ),
                        blackTotalDevelopment: Sum(
                                                If(UDF_getBitAtSqNum(theBoard.board,11)="p",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,12)="p",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,0)="r",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,1)="n",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,2)="b",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,3)="q",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,4)="k",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,5)="b",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,6)="n",0,1),
                                                If(UDF_getBitAtSqNum(theBoard.board,7)="r",0,1)
                                            ),
                        whiteTotalMaterial: Sum(
                                                ForAll(
                                                    Split(theBoard.ppd, "") As thePiece,
            
                                                    UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNP")
                                                ),
                                                Value
                                            ),
                        blackTotalMaterial: Abs(
                                                Sum(
                                                    ForAll(
                                                        Split(theBoard.ppd, "") As thePiece,
            
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "qrbnp")
                                                    ),
                                                    Value
                                                )
                                            )
                    } As theMaterial,
            
                    If(UDF_FEN_TO_ACTIVE_COLOR(pFEN)=WHITE,
                        // THEN
                        Switch(true,
                            Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && 
                            theMaterial.whiteTotalDevelopment<5 &&
                            UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                        " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_OPENING"
                                    })
                                );
                                GAME_PHASE_OPENING,
                            Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                        " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_MIDDLE"
                                    })
                                );
                                GAME_PHASE_MIDDLE,
            
                            // default
                            If(gblPF_DEBUG_EVAL,
                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                    " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_END"
                                })
                            );
                            GAME_PHASE_END
                        ),
            
                        // ELSE
                        Switch(true,
                            Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && 
                            theMaterial.blackTotalDevelopment<5 &&
                            UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                        " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_OPENING"
                                    })
                                );
                                GAME_PHASE_OPENING,
                            Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,
                                If(gblPF_DEBUG_EVAL,
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                        " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_MIDDLE"
                                    })
                                );
                                GAME_PHASE_MIDDLE,
            
                            // default
                            If(gblPF_DEBUG_EVAL,
                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                    " comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_END"
                                })
                            );
                            GAME_PHASE_END
                        )
                    )
                )
            );
        ZIndex: =2


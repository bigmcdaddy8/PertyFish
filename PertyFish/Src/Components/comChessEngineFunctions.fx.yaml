comChessEngineFunctions As CanvasComponent:
    fCE_100(pNodeID As Number):
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =
                If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_100(): entered pNodeID: " & pNodeID
                    })
                );
                
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
                
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                        If(gblPF_DEBUG_EVAL,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_100(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                                " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                            })
                        );
                
                        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                            postMoveEvalRecord: 
                                Patch(EVAL_RECORD_PF, {
                                    // a pinch of randomness
                                    heuristic19:
                                        RandBetween(-25,25)  // centipawns 
                                })
                        });
                
                        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                            postMoveEvalRecord: 
                                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                    centipawn:
                                        With(
                                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                            
                                            If(gblPF_DEBUG_EVAL,
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                                })
                                            );
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                        )
                                })
                        })
                    );
                
                    If(gblPF_DEBUG_EVAL,
                        With(
                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_100(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                            })
                        )
                    )
                );
                
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_100(): exiting"});
    fCE_200(pNodeID As Number):
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =
                If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_200(): entered pNodeID: " & pNodeID
                    })
                );
                
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
                
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                        If(gblPF_DEBUG_EVAL,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_200(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                                " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                            })
                        );
                
                        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                            postMoveEvalRecord: 
                                Patch(EVAL_RECORD_PF, {
                                    heuristic11:
                                        Sum(
                                            ForAll(
                                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
                
                                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                            ),
                                            Value
                                        ) -
                                        Sum(
                                            ForAll(
                                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
                
                                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                            ),
                                            Value
                                        ),
                                    heuristic19:
                                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),
                                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))
                                        )
                                })
                        });
                
                        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                            postMoveEvalRecord: 
                                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                    centipawn:
                                        With(
                                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                            
                                            If(gblPF_DEBUG_EVAL,
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic11 Basic Material BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                                })
                                            );
                                            Sum(
                                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic11,
                                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            )
                                        )
                                })
                        })
                    );
                
                    If(gblPF_DEBUG_EVAL,
                        With(
                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_200(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                            })
                        )
                    )
                );
                
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_200(): exiting"});
    fCE_300(pNodeID As Number):
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =
                If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_300(): entered pNodeID: " & pNodeID
                    })
                );
                
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
                
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                        If(gblPF_DEBUG_EVAL,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_300(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                                " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                            })
                        );
                
                        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                            postMoveEvalRecord: 
                                Patch(EVAL_RECORD_PF, {
                                    heuristic11:
                                        Sum(
                                            ForAll(
                                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), "") As thePiece,
                
                                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                            ),
                                            Value
                                        ) -
                                        Sum(
                                            ForAll(
                                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), "") As thePiece,
                
                                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNPqrbnp")
                                            ),
                                            Value
                                        ),
                                    heuristic15:
                                        If(comChessEngineFunctions.fME_getGamePhase(pNodeID)=GAME_PHASE_END,comChessEngineFunctions.fME_END_GAME(100,pNodeID),0),
                                    heuristic19:
                                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),
                                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))
                                        )
                                })
                        });
                
                        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                            postMoveEvalRecord: 
                                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                    centipawn:
                                        With(
                                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                            
                                            If(gblPF_DEBUG_EVAL,
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic11 Basic Material BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic15 END_GAME BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                                })
                                            );
                                            Sum(
                                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic11,
                                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic15,
                                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                            )
                                        )
                                })
                        })
                    );
                
                    If(gblPF_DEBUG_EVAL,
                        With(
                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_300(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                            })
                        )
                    )
                );
                
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_300(): exiting"});
    fCE_400(pNodeID As Number):
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =
                If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fCE_400(): entered pNodeID: " & pNodeID
                    })
                );
                
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
                
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                        If(gblPF_DEBUG_EVAL,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_400(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                                " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                            })
                        );
                
                        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {
                            postMoveEvalRecord: 
                                Patch(EVAL_RECORD_PF, {
                                    heuristic01:
                                        0,
                                    heuristic02:
                                        0,
                                    heuristic05:
                                        0,
                                    heuristic11:
                                        0,
                                    heuristic12:
                                        0,
                                    heuristic13:
                                        0,
                                    heuristic14:    
                                        0,
                                    heuristic16:
                                        0,
                                    heuristic17:
                                        0,
                                    heuristic18:
                                        0,
                                    // a pinch of randomness
                                    heuristic19:
                                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,
                                            // THEN
                                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                                GAME_PHASE_OPENING,
                                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(0,25), RandBetween(-25,0)),
                                                GAME_PHASE_MIDDLE,
                                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(0,25), RandBetween(-25,0)),
                                                RandBetween(-25,25)
                                            ),
                
                                            // ELSE
                                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),
                                                GAME_PHASE_OPENING,
                                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "NP", RandBetween(-25,0), RandBetween(0,25)),
                                                GAME_PHASE_MIDDLE,
                                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in "QBNP", RandBetween(-25,0), RandBetween(0,25)),
                                                RandBetween(-25,25)
                                            )
                                        )
                                })
                        });
                
                        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {
                            postMoveEvalRecord: 
                                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {
                                    centipawn:
                                        With(
                                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,
                                            
                                            If(gblPF_DEBUG_EVAL,
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic02 ME end game: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic11 generic tactics BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic12 fork tactic BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic13 move to/from protection BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic14 castling BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic16 BNP moves in opening sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic17 passed PAWN BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18
                                                });
                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                                    " heuristic19 the God of Randomness BONUS/PENALTY sub-total: " & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                                })
                                            );
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +
                                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +
                                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19
                                        )
                                })
                        })
                    );
                
                    If(gblPF_DEBUG_EVAL,
                        With(
                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fCE_400(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " centipawn: " & theCurrentNode.postMoveEvalRecord.centipawn
                            })
                        )
                    )
                );
                
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fCE_400(): exiting"});
    fME_END_GAME(pVersion As Number, pNodeID As Number):
        pVersion:
            Default: =100
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fME_END_GAME(): entered pNodeID: " & pNodeID
                    })
                );
                
                
                0
    fME_EvaluateMove(pNodeID As Number):
        pNodeID:
            Default: =EMPTY_NODE_ID
        ThisProperty:
            Default: |
                =
                If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: " & pNodeID
                    })
                );
                
                
                
                	
                
                
                With(
                    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,
                
                    With(
                        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,
                
                        If(gblPF_DEBUG_EVAL,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                " fME_EvaluateMove(): san: " & theCurrentNode.inactiveColorMoveRecord.san &
                                " pacn: " & theCurrentNode.inactiveColorMoveRecord.pacn &
                                " move color: " & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &
                                " captureSquareOccupier: " & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier
                            })
                        );
                
                        // determine which player's turn it is, and then see what their computer setting is currently set to
                        With(
                            {
                                selectedEngine: If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE, drpWhitePiecesCE.Selected.Value, drpBlackPiecesCE.Selected.Value)
                            } As theEngine,
                
                            If(gblPF_DEBUG_TIMERS,
                                If(IsBlank(LookUp(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove")),
                                    Collect(colPF_Timers, {timerName:"comChessEngineFunctions.fME_EvaluateMove", startTime: Now(), stopTime: Blank() }),
                                    UpdateIf(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove", { startTime: Now(), stopTime: Blank() })
                                )
                            );
                            
                            Switch(true,
                                theEngine.selectedEngine=CE_PF_200,
                                    comChessEngineFunctions.fCE_200(pNodeID),
                                theEngine.selectedEngine=CE_PF_300,
                                    comChessEngineFunctions.fCE_300(pNodeID),
                                theEngine.selectedEngine=CE_PF_400,
                                    comChessEngineFunctions.fCE_400(pNodeID),
                                
                                // default
                                comChessEngineFunctions.fCE_100(pNodeID)
                            );
                
                            If(gblPF_DEBUG_TIMERS,
                                UpdateIf(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove", { stopTime: Now() });
                                With(
                                    LookUp(colPF_Timers, timerName="comChessEngineFunctions.fME_EvaluateMove") As theTimer,
                
                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & 
                                        " comChessEngineFunctions.fME_EvaluateMove(): elapsed time " &
                                        Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & " seconds" &
                                        " selectedEngine: " & theEngine.selectedEngine
                                        
                                    })
                                )
                            )
                        )
                    )
                );
                
                
                
                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") & " fME_EvaluateMove(): exiting"});
    fME_getGamePhase(pFEN As String):
        pFEN:
            Default: =""
        ThisProperty:
            Default: |
                =If(gblPF_DEBUG_EVAL,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " comChessEngineFunctions.fME_getGamePhase(): entered pFEN: " & pFEN
                    })
                );
                
                With (
                    {
                        board:  UDF_FEN_TO_BOARD(pFEN),
                        ppd:    UDF_FEN_TO_PIECE_PLACEMENT(pFEN)
                    } As theBoard,
                
                    With (
                        {
                            whiteTotalDevelopment: Sum(
                                                    If(UDF_getBitAtSqNum(theBoard.board,51)="P",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,52)="P",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,56)="R",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,57)="N",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,58)="B",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,59)="Q",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,60)="K",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,61)="B",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,62)="N",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,63)="R",0,1)
                                                ),
                            blackTotalDevelopment: Sum(
                                                    If(UDF_getBitAtSqNum(theBoard.board,11)="p",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,12)="p",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,0)="r",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,1)="n",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,2)="b",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,3)="q",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,4)="k",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,5)="b",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,6)="n",0,1),
                                                    If(UDF_getBitAtSqNum(theBoard.board,7)="r",0,1)
                                                ),
                            whiteTotalMaterial: Sum(
                                                    ForAll(
                                                        Split(theBoard.ppd, "") As thePiece,
                
                                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, "QRBNP")
                                                    ),
                                                    Value
                                                ),
                            blackTotalMaterial: Abs(
                                                    Sum(
                                                        ForAll(
                                                            Split(theBoard.ppd, "") As thePiece,
                
                                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, "qrbnp")
                                                        ),
                                                        Value
                                                    )
                                                )
                        } As theMaterial,
                
                        If(UDF_FEN_TO_ACTIVE_COLOR(pFEN)=WHITE,
                            // THEN
                            Switch(true,
                                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && 
                                theMaterial.whiteTotalDevelopment<5 &&
                                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,
                                    GAME_PHASE_OPENING,
                                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,
                                    GAME_PHASE_MIDDLE,
                
                                // default
                                GAME_PHASE_END
                            ),
                
                            // ELSE
                            Switch(true,
                                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && 
                                theMaterial.blackTotalDevelopment<5 &&
                                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,
                                    GAME_PHASE_OPENING,
                                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,
                                    GAME_PHASE_MIDDLE,
                
                                // default
                                GAME_PHASE_END
                            )
                        )
                    )
                );
    Fill: =RGBA(0, 0, 0, 0)
    Height: =640
    Width: =640
    X: =0
    Y: =0
    ZIndex: =1


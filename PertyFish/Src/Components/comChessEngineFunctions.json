{
  "ComponentAllowCustomization": true,
  "ComponentChangedSinceFileImport": true,
  "ComponentDefinitionInfo": {
    "AllowAccessToGlobals": true,
    "Children": [],
    "ControlPropertyState": [
      "Fill",
      "Height",
      "Width",
      "X",
      "Y",
      "ZIndex",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_EvaluateMove_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fME_EvaluateMove",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      }
    ],
    "LastModifiedTimestamp": "638595860009753504",
    "Name": "comChessEngineFunctions",
    "Rules": [
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_EvaluateMove_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "1",
        "Property": "ZIndex",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "Y",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "X",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Width",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Height",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "RGBA(0, 0, 0, 0)",
        "Property": "Fill",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\r\nIf(gblPF_DEBUG_EVAL,\r\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n        \" comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: \" & pNodeID\r\n    })\r\n);\r\n\r\nWith(\r\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\r\n\r\n    With(\r\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\r\n\r\n        If(gblPF_DEBUG_EVAL,\r\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \r\n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\r\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\r\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\r\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\r\n            })\r\n        );\r\n\r\n        // https://www.quora.com/What-are-some-heuristics-for-quickly-evaluating-chess-positions\r\n        //UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\r\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\r\n            postMoveEvalRecord: \r\n                Patch(EVAL_RECORD_PF, {\r\n                    heuristic01:\r\n                        0,\r\n                    heuristic02:\r\n                        0,\r\n                    heuristic05:\r\n                        0,\r\n                    heuristic11:\r\n                        0,\r\n                    heuristic12:\r\n                        0,\r\n                    heuristic13:\r\n                        0,\r\n                    heuristic14:    \r\n                        0,\r\n                    heuristic16:\r\n                        0,\r\n                    heuristic17:\r\n                        0,\r\n                    heuristic18:\r\n                        0,\r\n                    // a pinch of randomness\r\n                    heuristic19:\r\n                        RandBetween(-5,5)  // centipawns \r\n                })\r\n        });\r\n\r\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\r\n            postMoveEvalRecord: \r\n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\r\n                    centipawn:\r\n                        With(\r\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\r\n                            \r\n                            If(gblPF_DEBUG_EVAL,\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\r\n                                });\r\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\r\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\r\n                                })\r\n                            );\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\r\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\r\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\r\n                        )\r\n                })\r\n        })\r\n    );\r\n\r\n    If(gblPF_DEBUG_EVAL,\r\n        With(\r\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\r\n\r\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \r\n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\r\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\r\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\r\n            })\r\n        )\r\n    )\r\n);\r\n\r\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_EvaluateMove(): exiting\"});\r\n",
        "Property": "fME_EvaluateMove",
        "RuleProviderType": "System"
      }
    ]
  },
  "ComponentManifest": {
    "AllowAccessToGlobals": true,
    "AllowCustomization": true,
    "Description": "",
    "Name": "comChessEngineFunctions",
    "TemplateGuid": "8c2bb0b54c6149c580a48882153f6ad1"
  },
  "ComponentType": "CanvasComponent",
  "CustomGroupControlTemplateName": "",
  "CustomProperties": [
    {
      "Category": 2,
      "DisplayName": "fME_EvaluateMove",
      "Hidden": true,
      "Name": "fME_EvaluateMove",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "67",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_EvaluateMove_pNodeID",
            "Name": "fME_EvaluateMove_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "Node ID holding the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "Node ID holding the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaluate the move specified in the referenced node ID",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    }
  ],
  "FirstParty": true,
  "Id": "http://microsoft.com/appmagic/Component",
  "IsComponentLocked": false,
  "IsComponentTemplate": true,
  "IsCustomGroupControlTemplate": false,
  "IsPcfControl": false,
  "IsPremiumPcfControl": false,
  "IsWidgetTemplate": false,
  "LastModifiedTimestamp": "638595860009753504",
  "Name": "8c2bb0b54c6149c580a48882153f6ad1",
  "OverridableProperties": {},
  "Version": "1.0"
}
{
  "ComponentAllowCustomization": true,
  "ComponentChangedSinceFileImport": true,
  "ComponentDefinitionInfo": {
    "AllowAccessToGlobals": true,
    "Children": [],
    "ControlPropertyState": [
      "Fill",
      "Height",
      "Width",
      "X",
      "Y",
      "ZIndex",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_EvaluateMove_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fME_EvaluateMove",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_100_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Random(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Random(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Random(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Random(): exiting\"});\n",
        "InvariantPropertyName": "fCE_100",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_100(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_100(): exiting\"});\n",
        "InvariantPropertyName": "fCE_200",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_200_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Preschool(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Preschool(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Preschool(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Preschool(): exiting\"});\n",
        "InvariantPropertyName": "fCE_300",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_300_pNodeID",
      "fCE_400_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Kindergarten(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(0,25), RandBetween(-25,0)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(0,25), RandBetween(-25,0)),\n                                RandBetween(-25,25)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-25,0), RandBetween(0,25)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-25,0), RandBetween(0,25)),\n                                RandBetween(-25,25)\n                            )\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Kindergarten(): exiting\"});\n",
        "InvariantPropertyName": "fCE_400",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\"Text\"",
        "InvariantPropertyName": "fME_getGamePhase_pFEN",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_getGamePhase",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fME_END_GAME_pVersion",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_END_GAME_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_END_GAME",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fME_prepNode_pVersion",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_prepNode_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fME_prepNode",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      }
    ],
    "LastModifiedTimestamp": "638609935275558160",
    "Name": "comChessEngineFunctions",
    "Rules": [
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_EvaluateMove_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_200_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "\"\"",
        "Property": "fME_getGamePhase_pFEN",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_100_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_300_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_400_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "100",
        "Property": "fME_END_GAME_pVersion",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_END_GAME_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "100",
        "Property": "fME_prepNode_pVersion",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_prepNode_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "1",
        "Property": "ZIndex",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "Y",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "X",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Width",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Height",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "RGBA(0, 0, 0, 0)",
        "Property": "Fill",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_100(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_100(): exiting\"})\n)\n",
        "Property": "fCE_100",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_300(): entered pNodeID: \" & pNodeID\n    })\n);\n\nIf(gblPF_DEBUG_TIMERS,\n    If(IsBlank(LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300\")),\n        Collect(colPF_Timers, {timerName:\"comChessEngineFunctions.fCE_300\",startTime:Now(),stopTime:Blank()}),\n        UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300\", { startTime: Now() })\n    )\n);\n\nWith(\n    {\n        theCurrentNode:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n        theParentNode:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)\n    } As theNodes,\n\n    If(gblPF_DEBUG_TIMERS,\n        If(IsBlank(LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300.PREP\")),\n            Collect(colPF_Timers, {timerName:\"comChessEngineFunctions.fCE_300.PREP\",startTime:Now(),stopTime:Blank()}),\n            UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300.PREP\", { startTime: Now() })\n        )\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n            \" fCE_300(): DEBUG board pre-update dump\"\n        });\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" ParentNode whiteStrongSqBoard: \" & theNodes.theParentNode.postMoveEvalRecord.whiteStrongSqBoard\n        });\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" ParentNode blackStrongSqBoard: \" & theNodes.theParentNode.postMoveEvalRecord.blackStrongSqBoard \n        });\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" CurrentNode whiteStrongSqBoard: \" & theNodes.theCurrentNode.postMoveEvalRecord.whiteStrongSqBoard\n        });\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" CurrentNode blackStrongSqBoard: \" & theNodes.theCurrentNode.postMoveEvalRecord.blackStrongSqBoard \n        })\n    );\n\n    comChessEngineFunctions.fME_prepNode(100, theNodes.theParentNode.nodeID);\n    comChessEngineFunctions.fME_prepNode(100, theNodes.theCurrentNode.nodeID);\n    \n    If(gblPF_DEBUG_TIMERS,\n        UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300.PREP\", { stopTime: Now() });\n        With(\n            LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300.PREP\") As theTimer,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" comChessEngineFunctions.fCE_300(): PREP total elapsed time: \" &\n                Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & \" seconds\"\n            })\n        )\n    )\n);\n\nWith(\n    {\n        theData:        LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME),\n        theCurrentNode: LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n        theParentNode:  LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID),\n        evalRecord:     EVAL_RECORD_PF\n    } As localVars,\n\n\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n            \" fCE_300(): san: \" & localVars.theCurrentNode.inactiveColorMoveRecord.san &\n            \" pacn: \" & localVars.theCurrentNode.inactiveColorMoveRecord.pacn &\n            \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(localVars.theCurrentNode.preMoveFEN) &\n            \" captureSquareOccupier: \" & localVars.theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" post-update parent whiteStrongSqBoard: \" & localVars.theParentNode.postMoveEvalRecord.whiteStrongSqBoard\n        })\n    );\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" post-update parent blackStrongSqBoard: \" & localVars.theParentNode.postMoveEvalRecord.blackStrongSqBoard\n        })\n    );\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" post-update current whiteStrongSqBoard: \" & localVars.theCurrentNode.postMoveEvalRecord.whiteStrongSqBoard\n        })\n    );\n    If(gblPF_DEBUG_EVAL,\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" post-update current blackStrongSqBoard: \" & localVars.theCurrentNode.postMoveEvalRecord.blackStrongSqBoard\n        })\n    );\n\n    With(\n        Patch(localVars, {\n            evalRecord:\n                Patch(localVars.evalRecord, {\n                    heuristic19:    If(UDF_FEN_TO_ACTIVE_COLOR(localVars.theCurrentNode.preMoveFEN)=WHITE,\n                                        If(localVars.theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),\n                                        If(localVars.theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))\n                                    )\n                })\n        }) As updatedLocalVars,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" heuristic11 Basic Material BONUS/PENALTY sub-total: \" & updatedLocalVars.evalRecord.heuristic11\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" heuristic15 END_GAME BONUS/PENALTY sub-total: \" & updatedLocalVars.evalRecord.heuristic15\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & updatedLocalVars.evalRecord.heuristic19\n            })\n        );\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(updatedLocalVars.evalRecord, {\n                    centipawn:  Sum(\n                                    updatedLocalVars.evalRecord.heuristic11,\n                                    updatedLocalVars.evalRecord.heuristic15,\n                                    updatedLocalVars.evalRecord.heuristic19\n                                )\n                })\n        })\n    )\n\n\n/*\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ) -\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ),\n                    heuristic15:\n                        With (\n                            {\n                                centipawnAdj: If(comChessEngineFunctions.fME_getGamePhase(pNodeID)=GAME_PHASE_END,comChessEngineFunctions.fME_END_GAME(100,pNodeID),0)\n                            } As localVars,\n\n                            If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,localVars.centipawnAdj,0 - localVars.centipawnAdj)\n                        ),\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))\n                        )\n                })\n        });\n */\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_300(): exiting\"})\n);\n\nIf(gblPF_DEBUG_TIMERS,\n    UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300\", { stopTime: Now() });\n    With(\n        LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fCE_300\") As theTimer,\n\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n            \" comChessEngineFunctions.fCE_300(): total elapsed time: \" &\n            Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & \" seconds\"\n        })\n    )\n);\n\n",
        "Property": "fCE_300",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_400(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_400(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(0,25), RandBetween(-25,0)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(0,25), RandBetween(-25,0)),\n                                RandBetween(-25,25)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-25,0), RandBetween(0,25)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-25,0), RandBetween(0,25)),\n                                RandBetween(-25,25)\n                            )\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_400(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_400(): exiting\"})\n)\n\n",
        "Property": "fCE_400",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_200(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_200(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ) -\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ),\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 Basic Material BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            Sum(\n                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic11,\n                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                            )\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_200(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_200(): exiting\"})\n)\n\n",
        "Property": "fCE_200",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        // determine which player's turn it is, and then see what their computer setting is currently set to\n        With(\n            {\n                selectedEngine: If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE, drpWhitePiecesCE.Selected.Value, drpBlackPiecesCE.Selected.Value)\n            } As theEngine,\n\n            If(gblPF_DEBUG_TIMERS,\n                If(IsBlank(LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\")),\n                    Collect(colPF_Timers, {timerName:\"comChessEngineFunctions.fME_EvaluateMove\", startTime: Now(), stopTime: Blank() }),\n                    UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\", { startTime: Now(), stopTime: Blank() })\n                )\n            );\n            \n            Switch(true,\n                theEngine.selectedEngine=CE_PF_200,\n                    comChessEngineFunctions.fCE_200(pNodeID),\n                theEngine.selectedEngine=CE_PF_300,\n                    comChessEngineFunctions.fCE_300(pNodeID),\n                theEngine.selectedEngine=CE_PF_400,\n                    comChessEngineFunctions.fCE_400(pNodeID),\n                \n                // default\n                comChessEngineFunctions.fCE_100(pNodeID)\n            );\n\n            If(gblPF_DEBUG_TIMERS,\n                UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\", { stopTime: Now() });\n                With(\n                    LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\") As theTimer,\n\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                        \" comChessEngineFunctions.fME_EvaluateMove(): elapsed time \" &\n                        Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & \" seconds\" &\n                        \" selectedEngine: \" & theEngine.selectedEngine\n                        \n                    })\n                )\n            )\n        )\n    )\n);\n\n\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_EvaluateMove(): exiting\"});\n",
        "Property": "fME_EvaluateMove",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_getGamePhase(): entered pFEN: \" & pFEN\n    })\n);\n\nWith (\n    {\n        board:  UDF_FEN_TO_BOARD(pFEN),\n        ppd:    UDF_FEN_TO_PIECE_PLACEMENT(pFEN)\n    } As theBoard,\n\n    With (\n        {\n            whiteTotalDevelopment: Sum(\n                                    If(UDF_getBitAtSqNum(theBoard.board,51)=\"P\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,52)=\"P\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,56)=\"R\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,57)=\"N\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,58)=\"B\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,59)=\"Q\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,60)=\"K\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,61)=\"B\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,62)=\"N\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,63)=\"R\",0,1)\n                                ),\n            blackTotalDevelopment: Sum(\n                                    If(UDF_getBitAtSqNum(theBoard.board,11)=\"p\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,12)=\"p\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,0)=\"r\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,1)=\"n\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,2)=\"b\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,3)=\"q\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,4)=\"k\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,5)=\"b\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,6)=\"n\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,7)=\"r\",0,1)\n                                ),\n            whiteTotalMaterial: Sum(\n                                    ForAll(\n                                        Split(theBoard.ppd, \"\") As thePiece,\n\n                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNP\")\n                                    ),\n                                    Value\n                                ),\n            blackTotalMaterial: Abs(\n                                    Sum(\n                                        ForAll(\n                                            Split(theBoard.ppd, \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"qrbnp\")\n                                        ),\n                                        Value\n                                    )\n                                )\n        } As theMaterial,\n\n        If(UDF_FEN_TO_ACTIVE_COLOR(pFEN)=WHITE,\n            // THEN\n            Switch(true,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && \n                theMaterial.whiteTotalDevelopment<5 &&\n                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,\n                    GAME_PHASE_OPENING,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,\n                    GAME_PHASE_MIDDLE,\n\n                // default\n                GAME_PHASE_END\n            ),\n\n            // ELSE\n            Switch(true,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && \n                theMaterial.blackTotalDevelopment<5 &&\n                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,\n                    GAME_PHASE_OPENING,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,\n                    GAME_PHASE_MIDDLE,\n\n                // default\n                GAME_PHASE_END\n            )\n        )\n    )\n);\n",
        "Property": "fME_getGamePhase",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_END_GAME(): entered pVersion: \" & pVersion &\n        \" pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_END_GAME(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Sum(0,\n            With (\n                {\n                    ppd:    UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN),\n                    filterScreen: If(UDF_FEN_TO_INACTIVE_COLOR(theCurrentNode.postMoveFEN)=WHITE,\"QRBNP\",\"qrbnp\")\n                } As localVars,\n\n                With(\n                    {\n                        totalOpponentMaterial: Sum(\n                                                ForAll(\n                                                    Split(localVars.ppd, \"\") As thePiece,\n\n                                                    UDF_getPieceCentipawnMaterialValue(thePiece.Value, localVars.filterScreen)\n                                                ),\n                                                Value\n                                            )\n                    } As localVars,\n\n                    If(localVars.totalOpponentMaterial<>0,\n                        // THEN\n                        0,\n\n                        // ELSE - we are playing against king only\n                        Sum(0,\n                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\", 25, 0)\n                        )\n                    )\n                )\n            )\n        )\n    )\n);\n\n// no exit logging or will mess up return code\n",
        "Property": "fME_END_GAME",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_prepNode(): entered pVersion: \" & pVersion &\n        \" pNodeID: \" & pNodeID\n    })\n);\n\nIf(gblPF_DEBUG_EVAL,\n    // THEN\n    With(\n        LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n        With(\n            {\n                theCurrentMoveTreeNode: LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n                theParentMoveTreeNode:  LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID),\n                theMoveHistoryTail:     If(CountRows(colPF_MOVE_HISTORY)>=1,LookUp(colPF_MOVE_HISTORY, nodeID=theData.chessEngineData.moveHistoryTAILNodeID).nodeID,Blank()),\n                theMoveHistoryTailM1:   If(CountRows(colPF_MOVE_HISTORY)>=2,LookUp(colPF_MOVE_HISTORY, nodeID=theData.chessEngineData.moveHistoryTAILNodeID).parentNodeID,Blank())\n            } As localVars,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" History tail nodeID: \" & If(IsBlank(localVars.theMoveHistoryTail),\"Blank\",localVars.theMoveHistoryTail) &\n                \" History tail postMovePINs: \" & \n                    If(IsBlank(localVars.theMoveHistoryTail),\"Blank\",LookUp(colPF_MOVE_HISTORY, nodeID=localVars.theMoveHistoryTail).postMovePINs)\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" History tail-1 nodeID: \" & If(IsBlank(localVars.theMoveHistoryTailM1),\"Blank\",localVars.theMoveHistoryTailM1) &\n                \" History tail-1 postMovePINs: \" & \n                    If(IsBlank(localVars.theMoveHistoryTailM1),\"Blank\",LookUp(colPF_MOVE_HISTORY, nodeID=localVars.theMoveHistoryTailM1).postMovePINs)\n            })\n        )\n    )\n);\n\nWith(\n    LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n    With(\n        {\n            postMoveBoard:      UDF_FEN_TO_BOARD(theCurrentNode.postMoveFEN)\n        } As localVars,\n\n        If(gblPF_DEBUG_EVAL,\n            // THEN\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" pre-update whiteStrongSqBoard: \" & theCurrentNode.postMoveEvalRecord.whiteStrongSqBoard\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" pre-update blackStrongSqBoard: \" & theCurrentNode.postMoveEvalRecord.blackStrongSqBoard\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" postMoveBoard: \" & localVars.postMoveBoard\n            });\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                \" postMovePINs: \" & theCurrentNode.postMovePINs\n            })\n        );\n\n        If(IsBlank(theCurrentNode.postMoveEvalRecord.whiteStrongSqBoard),\n            // THEN - need to populate the whiteStrongSqBoard board\n            With(\n                {\n                    whiteStrongSqNameList:\n                        Concat(\n                            Distinct(\n                                Sort(\n                                    Split(\n                                        Trim(\n                                            Concat(\n                                                ForAll(\n                                                    Sequence(64,0) As theSqNum,\n\n                                                    With(\n                                                        {\n                                                            moveBit: UDF_getBitAtSqNum(localVars.postMoveBoard,theSqNum.Value) \n                                                        } As theMoveBit,\n\n                                                        If(theMoveBit.moveBit=EMPTY_FILLER_ABBR || theMoveBit.moveBit exactin \"kqrbnp\",\n                                                            // THEN - there is no piece\n                                                            \"\",\n\n                                                            // THEN - we got a piece - get its' moves and filter them\n                                                            Concat(\n                                                                ForAll(\n                                                                    Filter(colPF_LEGAL_MOVES,\n                                                                        sqNum=theSqNum.Value &&\n                                                                        // the PAWN is case sensitive since it is uni-directional\n                                                                        pieceUpper= If(theMoveBit.moveBit in \"P\",theMoveBit.moveBit,Upper(theMoveBit.moveBit))\n                                                                    ) As theEligibleMove,\n\n                                                                    Switch(true,\n                                                                        // pawn forward moves do not capture therefore do not make strong squares\n                                                                        theMoveBit.moveBit in \"P\" && Text(theEligibleMove.theDirection) in \"15\",\n                                                                            \"\",\n\n                                                                        // castle moves do not capture therefore do not make strong squares\n                                                                        theEligibleMove.castle<>\"-\",\n                                                                            \"\",\n\n                                                                        // make sure slider squares are unoccupied\n                                                                        (!IsBlank(theEligibleMove.slideOvers)) &&\n                                                                            (!IsEmpty(\n                                                                                Filter(\n                                                                                    ForAll (\n                                                                                        Split(theEligibleMove.slideOvers, \" \") As theSlideOverSqName,\n                                                                    \n                                                                                        If(\n                                                                                            UDF_getBitAtSqNum(\n                                                                                                localVars.postMoveBoard, \n                                                                                                UDF_sqNameToSqNum(theSlideOverSqName.Value)\n                                                                                            ) in \"KQRBNP\", // any piece of any color in slide zone ?\n                                                                                            true,\n                                                                                            false\n                                                                                        )\n                                                                                    ), Value=true\n                                                                                )\n                                                                            )),\n                                                                            \"\",\n\n                                                                        // default\n                                                                        theEligibleMove.eligibleSqName\n                                                                    )\n                                                                ), Value, \" \"\n                                                            )\n                                                        )\n                                                    )\n                                                ), Value, \" \"\n                                            )\n                                        ), \" \"\n                                    ), Value\n                                ), Value\n                            ), Value, \" \"\n                        )\n                } As theLists,\n\n                If(gblPF_DEBUG_EVAL,\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                        \" comChessEngineFunctions.fME_prepNode(): DEBUG whiteStrongSqNameList: \" & theLists.whiteStrongSqNameList\n                    });\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                        \" comChessEngineFunctions.fME_prepNode(): DEBUG postMovePINs: \" & theCurrentNode.postMovePINs &\n                        \" postMovePINDirections: \" & theCurrentNode.postMovePINDirections\n                    });\n                );\n\n                UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n                    postMoveEvalRecord: \n                        Patch(theCurrentNode.postMoveEvalRecord, {\n                            whiteStrongSqBoard: Concat(\n                                                    ForAll(\n                                                        Sequence(64,0) As theSqNum,\n\n                                                        If(UDF_sqNumToSqName(theSqNum.Value) in theLists.whiteStrongSqNameList, ATTACKED_ABBR, EMPTY_FILLER_ABBR)\n                                                    ), Value, \"\"\n                                                )\n                        })\n                })\n            )\n        );\n\n        If(IsBlank(theCurrentNode.postMoveEvalRecord.blackStrongSqBoard),\n            // THEN - need to populate the blackStrongSqBoard board\n            With(\n                {\n                    blackStrongSqNameList:\n                        Concat(\n                            Distinct(\n                                Sort(\n                                    Split(\n                                        Trim(\n                                            Concat(\n                                                ForAll(\n                                                    Sequence(64,0) As theSqNum,\n\n                                                    With(\n                                                        {\n                                                            moveBit: UDF_getBitAtSqNum(localVars.postMoveBoard,theSqNum.Value) \n                                                        } As theMoveBit,\n\n                                                        If(theMoveBit.moveBit=EMPTY_FILLER_ABBR || theMoveBit.moveBit exactin \"KQRBNP\",\n                                                            // THEN - there is no piece\n                                                            \"\",\n\n                                                            // THEN - we got a piece - get its' moves and filter them\n                                                            Concat(\n                                                                ForAll(\n                                                                    Filter(colPF_LEGAL_MOVES,\n                                                                        sqNum=theSqNum.Value &&\n                                                                        // the PAWN is case sensitive since it is uni-directional\n                                                                        pieceUpper= If(theMoveBit.moveBit in \"P\",theMoveBit.moveBit,Upper(theMoveBit.moveBit))\n                                                                    ) As theEligibleMove,\n                                                                    \n                                                                    Switch(true,\n                                                                        // pawn forward moves do not capture therefore do not make strong squares\n                                                                        theMoveBit.moveBit in \"P\" && Text(theEligibleMove.theDirection) in \"15\",\n                                                                            \"\",\n\n                                                                        // castle moves do not capture therefore do not make strong squares\n                                                                        theEligibleMove.castle<>\"-\",\n                                                                            \"\",\n\n                                                                        // make sure slider squares are unoccupied\n                                                                        (!IsBlank(theEligibleMove.slideOvers)) &&\n                                                                            (!IsEmpty(\n                                                                                Filter(\n                                                                                    ForAll (\n                                                                                        Split(theEligibleMove.slideOvers, \" \") As theSlideOverSqName,\n                                                                    \n                                                                                        If(\n                                                                                            UDF_getBitAtSqNum(\n                                                                                                localVars.postMoveBoard, \n                                                                                                UDF_sqNameToSqNum(theSlideOverSqName.Value)\n                                                                                            ) in \"KQRBNP\", // any piece of any color in slide zone ?\n                                                                                            true,\n                                                                                            false\n                                                                                        )\n                                                                                    ), Value=true\n                                                                                )\n                                                                            )),\n                                                                            \"\",\n\n                                                                        // default\n                                                                        theEligibleMove.eligibleSqName\n                                                                    )\n                                                                ), Value, \" \"\n                                                            )\n                                                        )\n                                                    )\n                                                ), Value, \" \"\n                                            )\n                                        ), \" \"\n                                    ), Value\n                                ), Value\n                            ), Value, \" \"\n                        )\n                } As theLists,\n\n                If(gblPF_DEBUG_EVAL,\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                        \" comChessEngineFunctions.fME_prepNode(): DEBUG blackStrongSqList: \" & theLists.blackStrongSqNameList\n                    })\n                );\n\n                UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n                    postMoveEvalRecord: \n                        Patch(theCurrentNode.postMoveEvalRecord, {\n                            blackStrongSqBoard: Concat(\n                                                    ForAll(\n                                                        Sequence(64,0) As theSqNum,\n\n                                                        If(UDF_sqNumToSqName(theSqNum.Value) in theLists.blackStrongSqNameList, ATTACKED_ABBR, EMPTY_FILLER_ABBR)\n                                                    ), Value, \"\"\n                                                )\n                        })\n                })\n            )\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_prepNode(): exiting\"\n    })\n);\n\n",
        "Property": "fME_prepNode",
        "RuleProviderType": "System"
      }
    ]
  },
  "ComponentManifest": {
    "AllowAccessToGlobals": true,
    "AllowCustomization": true,
    "Description": "",
    "Name": "comChessEngineFunctions",
    "TemplateGuid": "8c2bb0b54c6149c580a48882153f6ad1"
  },
  "ComponentType": "CanvasComponent",
  "CustomGroupControlTemplateName": "",
  "CustomProperties": [
    {
      "Category": 2,
      "DisplayName": "fME_EvaluateMove",
      "Hidden": true,
      "Name": "fME_EvaluateMove",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_EvaluateMove_pNodeID",
            "Name": "fME_EvaluateMove_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "Node ID holding the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "Node ID holding the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaluate the move specified in the referenced node ID",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_100",
      "Hidden": true,
      "Name": "fCE_100",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_100_pNodeID",
            "Name": "fCE_100_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "random evaluate moves",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_200",
      "Hidden": true,
      "Name": "fCE_200",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_200_pNodeID",
            "Name": "fCE_200_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "capture whenever possible",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_300",
      "Hidden": true,
      "Name": "fCE_300",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_300_pNodeID",
            "Name": "fCE_300_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "nodeID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "nodeID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "A custom property",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_400",
      "Hidden": true,
      "Name": "fCE_400",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_400_pNodeID",
            "Name": "fCE_400_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "A custom property",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fME_getGamePhase",
      "Hidden": true,
      "Name": "fME_getGamePhase",
      "PropertyDataTypeKey": "Number",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_getGamePhase_pFEN",
            "Name": "fME_getGamePhase_pFEN",
            "PropertyDataTypeKey": "String",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "FEN to evaulate game phase on",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pFEN"
            },
            "Tooltip": "FEN to evaulate game phase on",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "determine if OPENING, MIDDLE, or END game",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fME_END_GAME",
      "Hidden": true,
      "Name": "fME_END_GAME",
      "PropertyDataTypeKey": "Number",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_END_GAME_pVersion",
            "Name": "fME_END_GAME_pVersion",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "API version",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pVersion"
            },
            "Tooltip": "API version",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          },
          {
            "DisplayName": "fME_END_GAME_pNodeID",
            "Name": "fME_END_GAME_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node containg the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node containg the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaulate move in END GAME",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fME_prepNode",
      "Hidden": true,
      "Name": "fME_prepNode",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_prepNode_pVersion",
            "Name": "fME_prepNode_pVersion",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "API version number",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pVersion"
            },
            "Tooltip": "API version number",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          },
          {
            "DisplayName": "fME_prepNode_pNodeID",
            "Name": "fME_prepNode_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "prepare node for analysis",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    }
  ],
  "FirstParty": true,
  "Id": "http://microsoft.com/appmagic/Component",
  "IsComponentLocked": false,
  "IsComponentTemplate": true,
  "IsCustomGroupControlTemplate": false,
  "IsPcfControl": false,
  "IsPremiumPcfControl": false,
  "IsWidgetTemplate": false,
  "LastModifiedTimestamp": "638609935275558160",
  "Name": "8c2bb0b54c6149c580a48882153f6ad1",
  "OverridableProperties": {},
  "Version": "1.0"
}
{
  "ComponentAllowCustomization": true,
  "ComponentChangedSinceFileImport": true,
  "ComponentDefinitionInfo": {
    "AllowAccessToGlobals": true,
    "Children": [],
    "ControlPropertyState": [
      "Fill",
      "Height",
      "Width",
      "X",
      "Y",
      "ZIndex",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_EvaluateMove_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fME_EvaluateMove",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      }
    ],
    "LastModifiedTimestamp": "638597011802980213",
    "Name": "comChessEngineFunctions",
    "Rules": [
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_EvaluateMove_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "1",
        "Property": "ZIndex",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "Y",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "X",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Width",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Height",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "RGBA(0, 0, 0, 0)",
        "Property": "Fill",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        // https://www.quora.com/What-are-some-heuristics-for-quickly-evaluating-chess-positions\n        //UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-5,5)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_EvaluateMove(): exiting\"});\n",
        "Property": "fME_EvaluateMove",
        "RuleProviderType": "System"
      }
    ]
  },
  "ComponentManifest": {
    "AllowAccessToGlobals": true,
    "AllowCustomization": true,
    "Description": "",
    "Name": "comChessEngineFunctions",
    "TemplateGuid": "8c2bb0b54c6149c580a48882153f6ad1"
  },
  "ComponentType": "CanvasComponent",
  "CustomGroupControlTemplateName": "",
  "CustomProperties": [
    {
      "Category": 2,
      "DisplayName": "fME_EvaluateMove",
      "Hidden": true,
      "Name": "fME_EvaluateMove",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "5",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_EvaluateMove_pNodeID",
            "Name": "fME_EvaluateMove_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "Node ID holding the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "Node ID holding the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaluate the move specified in the referenced node ID",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    }
  ],
  "FirstParty": true,
  "Id": "http://microsoft.com/appmagic/Component",
  "IsComponentLocked": false,
  "IsComponentTemplate": true,
  "IsCustomGroupControlTemplate": false,
  "IsPcfControl": false,
  "IsPremiumPcfControl": false,
  "IsWidgetTemplate": false,
  "LastModifiedTimestamp": "638597011802980213",
  "Name": "8c2bb0b54c6149c580a48882153f6ad1",
  "OverridableProperties": {},
  "Version": "1.0"
}
{
  "ComponentAllowCustomization": true,
  "ComponentChangedSinceFileImport": true,
  "ComponentDefinitionInfo": {
    "AllowAccessToGlobals": true,
    "Children": [],
    "ControlPropertyState": [
      "Fill",
      "Height",
      "Width",
      "X",
      "Y",
      "ZIndex",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_EvaluateMove_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fME_EvaluateMove",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_100_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Random(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Random(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Random(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Random(): exiting\"});\n",
        "InvariantPropertyName": "fCE_100",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_100(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(0,25), RandBetween(-25,0)),\n                            If(theCurrentNode.inactiveColorMoveRecord.captureSquareNum<>EMPTY_SQUARE_NUM, RandBetween(-25,0), RandBetween(0,25))\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_100(): exiting\"});\n",
        "InvariantPropertyName": "fCE_200",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_200_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Preschool(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Preschool(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Preschool(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Preschool(): exiting\"});\n",
        "InvariantPropertyName": "fCE_300",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_300_pNodeID",
      "fCE_400_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Kindergarten(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(0,25), RandBetween(-25,0)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(0,25), RandBetween(-25,0)),\n                                RandBetween(-25,25)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-25,0), RandBetween(0,25)),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-25,0), RandBetween(0,25)),\n                                RandBetween(-25,25)\n                            )\n                        )\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Kindergarten(): exiting\"});\n",
        "InvariantPropertyName": "fCE_400",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "\"Text\"",
        "InvariantPropertyName": "fME_getGamePhase_pFEN",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_getGamePhase",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fME_END_GAME_pVersion",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_END_GAME_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fME_END_GAME",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_500_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_500",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      "fCE_600_pNodeID",
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_600",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_600_preEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_600_postEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fCE_700_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_700",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_700_preEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_700_postEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "100",
        "InvariantPropertyName": "fCE_800_pNodeID",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_800",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_800_preEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      },
      {
        "AFDDataSourceName": "",
        "AutoRuleBindingEnabled": false,
        "AutoRuleBindingString": "",
        "InvariantPropertyName": "fCE_800_postEvaluate",
        "IsLockable": false,
        "NameMapSourceSchema": "?"
      }
    ],
    "LastModifiedTimestamp": "638636000944174712",
    "Name": "comChessEngineFunctions",
    "Rules": [
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_EvaluateMove_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_200_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "\"\"",
        "Property": "fME_getGamePhase_pFEN",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_100_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_300_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_400_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "100",
        "Property": "fME_END_GAME_pVersion",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fME_END_GAME_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "100",
        "Property": "fCE_500_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "100",
        "Property": "fCE_600_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_700_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Data",
        "InvariantScript": "EMPTY_NODE_ID",
        "Property": "fCE_800_pNodeID",
        "RuleProviderType": "System"
      },
      {
        "Category": "Design",
        "InvariantScript": "1",
        "Property": "ZIndex",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "Y",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "0",
        "Property": "X",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Width",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "640",
        "Property": "Height",
        "RuleProviderType": "Unknown"
      },
      {
        "Category": "Design",
        "InvariantScript": "RGBA(0, 0, 0, 0)",
        "Property": "Fill",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_100(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_100(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_100(): exiting\"})\n)\n",
        "Property": "fCE_100",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_300(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_300(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        // the dumb bully part\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ) -\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ),\n                    heuristic17:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_300(): DEBUG heuristic17 preMove active color WHITE \" & \n                                    \" # of BLACK pieces: \" & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" preMoveFEN: \" & theCurrentNode.preMoveFEN\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" preMoveBoard: \" & theCurrentNode.preMoveBoard\n                                })\n                            );\n                            If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)>1,\n                                // THEN\n                                0,\n\n                                // ELSE - the opponent is a lone king\n                                Sum(\n                                    With(\n                                        {\n                                            sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, \"k\"))\n                                        } As theirKing,\n\n                                        With(\n                                            {\n                                                adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & \" \" & UDF_sqNumToSqName(theirKing.sqNum)),\n                                                noKingPreMoveBoard: UDF_setBitAtSqNum(\n                                                                        theCurrentNode.preMoveBoard,\n                                                                        EMPTY_FILLER_ABBR,\n                                                                        UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, \"k\")\n                                                                    ),\n                                                noKingPostMoveBoard:    UDF_setBitAtSqNum(\n                                                                            theCurrentNode.postMoveBoard,\n                                                                            EMPTY_FILLER_ABBR,\n                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, \"k\")\n                                                                        ),\n                                                // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.preMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,\"k\")\n                                                                            ),\n                                                noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.postMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,\"k\")\n                                                                            )\n                                            } As adjToTheirKing,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_300(): heuristic17 opponent kingSq: \" & UDF_sqNumToSqName(theirKing.sqNum) & \"(\" & theirKing.sqNum & \")\" &\n                                                    \" Black King adj set: \" & adjToTheirKing.adjSquaresSet\n                                                })\n                                            );\n                                            If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||\n                                                UDF_isSqNumAttacked(\n                                                    adjToTheirKing.noKingNoPiecePostMoveBoard,\n                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                    WHITE\n                                                ),\n                                                // THEN\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_300(): heuristic17 looking to encourage move if it qualifies targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                    })\n                                                );\n                                                Sum(\n                                                    ForAll(\n                                                        Split(adjToTheirKing.adjSquaresSet, \" \") As adjSquareName,\n\n                                                        With(\n                                                            {\n                                                                preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE),\n                                                                postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE)\n                                                            } As attackBooleans,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" Black King adjSquareName: \" & adjSquareName.Value & \"(\" & UDF_sqNameToSqNum(adjSquareName.Value) & \")\" &\n                                                                        \" preMove isAttacked?: \" & attackBooleans.preMoveIsAttacked &\n                                                                        \" postMove isAttacked?: \" & attackBooleans.postMoveIsAttacked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,\n                                                                attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,\n                                                                \n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    ), Value\n                                                ) * 21,\n\n                                                // ELSE\n                                                If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,\n                                                    // THEN\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_300(): heuristic17 discouraging move to naked adj square targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    -21, // do not want to move there - will be captured,\n\n                                                    // ELSE\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_300(): heuristic17 neutral targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    0\n                                                )\n                                            )\n\n                                        )\n                                    ),\n                                    // - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, \"Q\")<3,\n                                        // THEN - bump up the promotion to a Q\n                                        If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in \"Q\",\n                                            UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,18),\n                                            0\n                                        ),\n                                        // ELSE\n                                        0\n                                    )\n                                )\n                            ),\n\n                            // ELSE\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_300(): DEBUG heuristic17 preMove active color BLACK \" & \n                                    \" # of WHITE pieces: \" & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)\n                                })\n                            );\n                            If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)>1,\n                                // THEN\n                                0,\n\n                                // ELSE - the opponent is a lone king \n                                Sum(\n                                    With(\n                                        {\n                                            sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, \"K\"))\n                                        } As theirKing,\n\n                                        With(\n                                            {\n                                                adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & \" \" & UDF_sqNumToSqName(theirKing.sqNum)),\n                                                noKingPreMoveBoard: UDF_setBitAtSqNum(\n                                                                        theCurrentNode.preMoveBoard,\n                                                                        EMPTY_FILLER_ABBR,\n                                                                        UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, \"K\")\n                                                                    ),\n                                                noKingPostMoveBoard:    UDF_setBitAtSqNum(\n                                                                            theCurrentNode.postMoveBoard,\n                                                                            EMPTY_FILLER_ABBR,\n                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, \"K\")\n                                                                        ),\n                                                // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.preMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,\"K\")\n                                                                            ),\n                                                noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.postMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,\"K\")\n                                                                            )\n                                            } As adjToTheirKing,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_300(): heuristic17 opponent kingSq: \" & UDF_sqNumToSqName(theirKing.sqNum) & \"(\" & theirKing.sqNum & \")\" &\n                                                    \" White King adj set: \" & adjToTheirKing.adjSquaresSet\n                                                })\n                                            );\n                                            If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||\n                                                UDF_isSqNumAttacked(\n                                                    adjToTheirKing.noKingNoPiecePostMoveBoard,\n                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                    BLACK\n                                                ),\n                                                // THEN\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_300(): heuristic17 looking to encourage move if it qualifies targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                    })\n                                                );\n                                                Sum(\n                                                    ForAll(\n                                                        Split(adjToTheirKing.adjSquaresSet, \" \") As adjSquareName,\n\n                                                        With(\n                                                            {\n                                                                preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK),\n                                                                postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK)\n                                                            } As attackBooleans,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" White King adjSquareName: \" & adjSquareName.Value & \"(\" & UDF_sqNameToSqNum(adjSquareName.Value) & \")\" &\n                                                                        \" preMove isAttacked?: \" & attackBooleans.preMoveIsAttacked &\n                                                                        \" postMove isAttacked?: \" & attackBooleans.postMoveIsAttacked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,\n                                                                attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,\n                                                                \n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    ), Value\n                                                ) * -21,\n\n                                                // ELSE\n                                                If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,\n                                                    // THEN\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_300(): heuristic17 discouraging move to naked adj square targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    21, // do not want to move there - will be captured,\n\n                                                    // ELSE\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_300(): heuristic17 neutral targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    0\n                                                )\n                                            )\n                                        )\n                                    ),\n                                    // push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, \"q\")<3,\n                                        // THEN - bump up the promotion to a Q\n                                        If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in \"Q\",\n                                            (8 - UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName)) * RandBetween(-18,-8),\n                                            0\n                                        ),\n                                        // ELSE\n                                        0\n                                    )\n                                )\n                            )\n                        ),\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-5,15), 0),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-5,15), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-5,15), 0)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-15,5), 0),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-15,5), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-15,5), 0)\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_300(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_300(): exiting\"})\n)\n\n",
        "Property": "fCE_300",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_400(): entered pNodeID: \" & pNodeID\n    })\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n    \" comChessEngineFunctions.fCE_400(): entered2 pNodeID: \" & pNodeID\n});\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_400(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture: \n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theCurrentNode.postMoveBoard,\n                                        theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<Abs(localVars.materialCapture)),\n                                // THEN\n                                localVars.materialDelta,\n\n                                // ELSE - discourage the move\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,-25,25)\n                            )\n                        ),\n\n                    heuristic17:\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_400(): DEBUG heuristic17 preMove active color WHITE \" & \n                                    \" # of BLACK pieces: \" & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" preMoveFEN: \" & theCurrentNode.preMoveFEN\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" preMoveBoard: \" & theCurrentNode.preMoveBoard\n                                })\n                            );\n                            If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, BLACK_PIECES)>1,\n                                // THEN\n                                0,\n\n                                // ELSE - the opponent is a lone king\n                                Sum(\n                                    With(\n                                        {\n                                            sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, \"k\"))\n                                        } As theirKing,\n\n                                        With(\n                                            {\n                                                adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & \" \" & UDF_sqNumToSqName(theirKing.sqNum)),\n                                                noKingPreMoveBoard: UDF_setBitAtSqNum(\n                                                                        theCurrentNode.preMoveBoard,\n                                                                        EMPTY_FILLER_ABBR,\n                                                                        UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, \"k\")\n                                                                    ),\n                                                noKingPostMoveBoard:    UDF_setBitAtSqNum(\n                                                                            theCurrentNode.postMoveBoard,\n                                                                            EMPTY_FILLER_ABBR,\n                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, \"k\")\n                                                                        ),\n                                                // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.preMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,\"k\")\n                                                                            ),\n                                                noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.postMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,\"k\")\n                                                                            )\n                                            } As adjToTheirKing,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_400(): heuristic17 opponent kingSq: \" & UDF_sqNumToSqName(theirKing.sqNum) & \"(\" & theirKing.sqNum & \")\" &\n                                                    \" Black King adj set: \" & adjToTheirKing.adjSquaresSet\n                                                })\n                                            );\n                                            If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||\n                                                UDF_isSqNumAttacked(\n                                                    adjToTheirKing.noKingNoPiecePostMoveBoard,\n                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                    WHITE\n                                                ),\n                                                // THEN\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_400(): heuristic17 looking to encourage move if it qualifies targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                    })\n                                                );\n                                                Sum(\n                                                    ForAll(\n                                                        Split(adjToTheirKing.adjSquaresSet, \" \") As adjSquareName,\n\n                                                        With(\n                                                            {\n                                                                preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE),\n                                                                postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), WHITE)\n                                                            } As attackBooleans,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" Black King adjSquareName: \" & adjSquareName.Value & \"(\" & UDF_sqNameToSqNum(adjSquareName.Value) & \")\" &\n                                                                        \" preMove isAttacked?: \" & attackBooleans.preMoveIsAttacked &\n                                                                        \" postMove isAttacked?: \" & attackBooleans.postMoveIsAttacked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,\n                                                                attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,\n                                                                \n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    ), Value\n                                                ) * 21,\n\n                                                // ELSE\n                                                If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,\n                                                    // THEN\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_400(): heuristic17 discouraging move to naked adj square targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    -21, // do not want to move there - will be captured,\n\n                                                    // ELSE\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_400(): heuristic17 neutral targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    0\n                                                )\n                                            )\n\n                                        )\n                                    ),\n                                    // - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, \"Q\")<3,\n                                        // THEN - bump up the promotion to a Q\n                                        If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in \"Q\",\n                                            UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,18),\n                                            0\n                                        ),\n                                        // ELSE\n                                        0\n                                    )\n                                )\n                            ),\n\n                            // ELSE\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_400(): DEBUG heuristic17 preMove active color BLACK \" & \n                                    \" # of WHITE pieces: \" & UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)\n                                })\n                            );\n                            If(UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, WHITE_PIECES)>1,\n                                // THEN\n                                0,\n\n                                // ELSE - the opponent is a lone king \n                                Sum(\n                                    With(\n                                        {\n                                            sqNum:      UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, \"K\"))\n                                        } As theirKing,\n\n                                        With(\n                                            {\n                                                adjSquaresSet: UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theirKing.sqNum) & \" \" & UDF_sqNumToSqName(theirKing.sqNum)),\n                                                noKingPreMoveBoard: UDF_setBitAtSqNum(\n                                                                        theCurrentNode.preMoveBoard,\n                                                                        EMPTY_FILLER_ABBR,\n                                                                        UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, \"K\")\n                                                                    ),\n                                                noKingPostMoveBoard:    UDF_setBitAtSqNum(\n                                                                            theCurrentNode.postMoveBoard,\n                                                                            EMPTY_FILLER_ABBR,\n                                                                            UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard, \"K\")\n                                                                        ),\n                                                // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                noKingNoPiecePreMoveBoard:  UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.preMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.sourceSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard,\"K\")\n                                                                            ),\n                                                noKingNoPiecePostMoveBoard: UDF_setBitAtSqNum(\n                                                                                UDF_setBitAtSqNum(\n                                                                                    theCurrentNode.postMoveBoard,\n                                                                                    EMPTY_FILLER_ABBR,\n                                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                                                ),\n                                                                                EMPTY_FILLER_ABBR,\n                                                                                UDF_SearchBoardForPiece(theCurrentNode.postMoveBoard,\"K\")\n                                                                            )\n                                            } As adjToTheirKing,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_400(): heuristic17 opponent kingSq: \" & UDF_sqNumToSqName(theirKing.sqNum) & \"(\" & theirKing.sqNum & \")\" &\n                                                    \" White King adj set: \" & adjToTheirKing.adjSquaresSet\n                                                })\n                                            );\n                                            If((!(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet)) ||\n                                                UDF_isSqNumAttacked(\n                                                    adjToTheirKing.noKingNoPiecePostMoveBoard,\n                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                    BLACK\n                                                ),\n                                                // THEN\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_400(): heuristic17 looking to encourage move if it qualifies targetSqName: \" & theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                    })\n                                                );\n                                                Sum(\n                                                    ForAll(\n                                                        Split(adjToTheirKing.adjSquaresSet, \" \") As adjSquareName,\n\n                                                        With(\n                                                            {\n                                                                preMoveIsAttacked:  UDF_isSqNumAttacked(adjToTheirKing.noKingPreMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK),\n                                                                postMoveIsAttacked: UDF_isSqNumAttacked(adjToTheirKing.noKingPostMoveBoard, UDF_sqNameToSqNum(adjSquareName.Value), BLACK)\n                                                            } As attackBooleans,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" White King adjSquareName: \" & adjSquareName.Value & \"(\" & UDF_sqNameToSqNum(adjSquareName.Value) & \")\" &\n                                                                        \" preMove isAttacked?: \" & attackBooleans.preMoveIsAttacked &\n                                                                        \" postMove isAttacked?: \" & attackBooleans.postMoveIsAttacked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                attackBooleans.preMoveIsAttacked=false && attackBooleans.postMoveIsAttacked=true, 1,\n                                                                attackBooleans.preMoveIsAttacked=true && attackBooleans.postMoveIsAttacked=false, -1,\n                                                                \n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    ), Value\n                                                ) * -21,\n\n                                                // ELSE\n                                                If(theCurrentNode.inactiveColorMoveRecord.targetSquareName exactin adjToTheirKing.adjSquaresSet,\n                                                    // THEN\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_400(): heuristic17 discouraging move to naked adj square targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    21, // do not want to move there - will be captured,\n\n                                                    // ELSE\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_400(): heuristic17 neutral targetSqName: \" &\n                                                                theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                        })\n                                                    );\n                                                    0\n                                                )\n                                            )\n                                        )\n                                    ),\n                                    // push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, \"q\")<3,\n                                        // THEN - bump up the promotion to a Q\n                                        If(IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in \"Q\",\n                                            (8 - UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName)) * RandBetween(-18,-8),\n                                            0\n                                        ),\n                                        // ELSE\n                                        0\n                                    )\n                                )\n                            )\n                        ),\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-5,15), 0),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-5,15), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-5,15), 0)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\", RandBetween(-15,5), 0),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-15,5), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-15,5), 0)\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_400(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_400(): exiting\"})\n)\n\n",
        "Property": "fCE_400",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_200(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_200(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        // the dumb bully part\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ) -\n                        Sum(\n                            ForAll(\n                                Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                            ),\n                            Value\n                        ),\n                    heuristic19:\n                        // add a touch of randomness\n                        RandBetween(-5,5)\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 Basic Material BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            Sum(\n                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic11,\n                                theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                            )\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_200(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_200(): exiting\"})\n)\n\n",
        "Property": "fCE_200",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_EvaluateMove(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_EvaluateMove(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        // determine which player's turn it is, and then see what their computer setting is currently set to\n        With(\n            {\n                selectedEngine: If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE, drpWhitePiecesCE.Selected.Value, drpBlackPiecesCE.Selected.Value)\n            } As theEngine,\n\n            If(gblPF_DEBUG_TIMERS,\n                If(IsBlank(LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\")),\n                    Collect(colPF_Timers, {timerName:\"comChessEngineFunctions.fME_EvaluateMove\", startTime: Now(), stopTime: Blank() }),\n                    UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\", { startTime: Now(), stopTime: Blank() })\n                )\n            );\n            \n            Switch(true,\n                theEngine.selectedEngine=CE_PF_200,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_200(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_200(pNodeID),\n                theEngine.selectedEngine=CE_PF_300,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_300(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_300(pNodeID),\n                theEngine.selectedEngine=CE_PF_400,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_400(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_400(pNodeID),\n                theEngine.selectedEngine=CE_PF_500,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_500(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_500(pNodeID),\n                theEngine.selectedEngine=CE_PF_600,\n                    comChessEngineFunctions.fCE_600_preEvaluate();\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_600(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_600(pNodeID);\n                    comChessEngineFunctions.fCE_600_postEvaluate(),\n                theEngine.selectedEngine=CE_PF_700,\n                    comChessEngineFunctions.fCE_700_preEvaluate();\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_700(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_700(pNodeID);\n                    comChessEngineFunctions.fCE_700_postEvaluate(),\n                theEngine.selectedEngine=CE_PF_800,\n                    comChessEngineFunctions.fCE_800_preEvaluate();\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                            \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_800(\" & pNodeID & \")\"\n                        })\n                    );\n                    comChessEngineFunctions.fCE_800(pNodeID);\n                    comChessEngineFunctions.fCE_800_postEvaluate(),\n\n                // default\n                If(gblPF_DEBUG_EVAL,\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                        \" fME_EvaluateMove(): calling comChessEngineFunctions.fCE_100(\" & pNodeID & \")\"\n                    })\n                );\n                comChessEngineFunctions.fCE_100(pNodeID)\n            );\n\n            If(gblPF_DEBUG_TIMERS,\n                UpdateIf(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\", { stopTime: Now() });\n                With(\n                    LookUp(colPF_Timers, timerName=\"comChessEngineFunctions.fME_EvaluateMove\") As theTimer,\n\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                        \" comChessEngineFunctions.fME_EvaluateMove(): elapsed time \" &\n                        Text(DateDiff(theTimer.startTime, theTimer.stopTime, TimeUnit.Milliseconds)/1000) & \" seconds\" &\n                        \" selectedEngine: \" & theEngine.selectedEngine\n                        \n                    })\n                )\n            )\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_EvaluateMove(): exiting\"})\n);\n",
        "Property": "fME_EvaluateMove",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_getGamePhase(): entered pFEN: \" & pFEN\n    })\n);\n\nWith (\n    {\n        board:  UDF_FEN_TO_BOARD(pFEN),\n        ppd:    UDF_FEN_TO_PIECE_PLACEMENT(pFEN)\n    } As theBoard,\n\n    With (\n        {\n            whiteTotalDevelopment: Sum(\n                                    If(UDF_getBitAtSqNum(theBoard.board,51)=\"P\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,52)=\"P\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,56)=\"R\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,57)=\"N\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,58)=\"B\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,59)=\"Q\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,60)=\"K\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,61)=\"B\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,62)=\"N\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,63)=\"R\",0,1)\n                                ),\n            blackTotalDevelopment: Sum(\n                                    If(UDF_getBitAtSqNum(theBoard.board,11)=\"p\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,12)=\"p\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,0)=\"r\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,1)=\"n\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,2)=\"b\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,3)=\"q\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,4)=\"k\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,5)=\"b\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,6)=\"n\",0,1),\n                                    If(UDF_getBitAtSqNum(theBoard.board,7)=\"r\",0,1)\n                                ),\n            whiteTotalMaterial: Sum(\n                                    ForAll(\n                                        Split(theBoard.ppd, \"\") As thePiece,\n\n                                        UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNP\")\n                                    ),\n                                    Value\n                                ),\n            blackTotalMaterial: Abs(\n                                    Sum(\n                                        ForAll(\n                                            Split(theBoard.ppd, \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"qrbnp\")\n                                        ),\n                                        Value\n                                    )\n                                )\n        } As theMaterial,\n\n        If(UDF_FEN_TO_ACTIVE_COLOR(pFEN)=WHITE,\n            // THEN\n            Switch(true,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && \n                theMaterial.whiteTotalDevelopment<5 &&\n                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                            \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_OPENING\"\n                        })\n                    );\n                    GAME_PHASE_OPENING,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                            \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_MIDDLE\"\n                        })\n                    );\n                    GAME_PHASE_MIDDLE,\n\n                // default\n                If(gblPF_DEBUG_EVAL,\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                        \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_END\"\n                    })\n                );\n                GAME_PHASE_END\n            ),\n\n            // ELSE\n            Switch(true,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=3000 && \n                theMaterial.blackTotalDevelopment<5 &&\n                UDF_FEN_TO_FULLMOVE_COUNT(pFEN)<=10,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                            \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_OPENING\"\n                        })\n                    );\n                    GAME_PHASE_OPENING,\n                Min(theMaterial.whiteTotalMaterial, theMaterial.blackTotalMaterial)>=1700,\n                    If(gblPF_DEBUG_EVAL,\n                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                            \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_MIDDLE\"\n                        })\n                    );\n                    GAME_PHASE_MIDDLE,\n\n                // default\n                If(gblPF_DEBUG_EVAL,\n                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                        \" comChessEngineFunctions.fME_getGamePhase(): GAME_PHASE_END\"\n                    })\n                );\n                GAME_PHASE_END\n            )\n        )\n    )\n);\n",
        "Property": "fME_getGamePhase",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_END_GAME(): entered pVersion: \" & pVersion &\n        \" pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_END_GAME(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Sum(0,\n            With (\n                {\n                    ppd:    UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN),\n                    filterScreen: If(UDF_FEN_TO_INACTIVE_COLOR(theCurrentNode.postMoveFEN)=WHITE,\"QRBNP\",\"qrbnp\")\n                } As localVars,\n\n                With(\n                    {\n                        totalOpponentMaterial: Sum(\n                                                ForAll(\n                                                    Split(localVars.ppd, \"\") As thePiece,\n\n                                                    UDF_getPieceCentipawnMaterialValue(thePiece.Value, localVars.filterScreen)\n                                                ),\n                                                Value\n                                            )\n                    } As localVars,\n\n                    If(localVars.totalOpponentMaterial<>0,\n                        // THEN\n                        0,\n\n                        // ELSE - we are playing against king only\n                        Sum(0,\n                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\", 25, 0)\n                        )\n                    )\n                )\n            )\n        )\n    )\n);\n\n// no exit logging or will mess up return code\n",
        "Property": "fME_END_GAME",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_500(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_500(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture: \n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theCurrentNode.postMoveBoard,\n                                        theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<Abs(localVars.materialCapture)),\n                                // THEN\n                                localVars.materialDelta,\n\n                                // ELSE - discourage the move\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,-25,25)\n                            )\n                        ),\n                    heuristic12:\n                        // no capture - but moving an attacked piece to a unattacked square needs a small bonus\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theCurrentNode.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                sourceSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theCurrentNode.preMoveBoard,\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theCurrentNode.postMoveBoard,\n                                        theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(localVars.sourceSqAttacked && !localVars.targetSqAttacked && localVars.materialDelta=0,\n                                // THEN\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,RandBetween(50,75),RandBetween(-75,-50)),\n\n                                // ELSE\n                                0\n                            )\n                        ),\n\n                    heuristic16:\n                        If(!(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN)=GAME_PHASE_END),\n                            // THEN - not in the END GAME\n                            0,\n\n                            // ELSE - do END GAME analysis\n                            With(\n                                {\n                                    totalWhiteBonus:\n                                        Sum(\n                                            // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                            If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theCurrentNode.preMoveBoard, \"Q\")<3,\n                                                // THEN - push the pawn and bump up the promotion to a Q\n                                                If(\n                                                    (IsBlank(theCurrentNode.inactiveColorMoveRecord.promoteTo) || theCurrentNode.inactiveColorMoveRecord.promoteTo in \"Q\") &&\n                                                    !UDF_isSqNumAttacked(\n                                                        theCurrentNode.postMoveBoard,\n                                                        theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.postMoveFEN)\n                                                    ),\n                                                    // THEN\n                                                    UDF_getRankFromSqName(theCurrentNode.inactiveColorMoveRecord.targetSquareName) * RandBetween(8,13),\n\n                                                    // ELSE\n                                                    0\n                                                ),\n                                                // ELSE\n                                                0\n                                            ),\n\n                                            // Sum: trapping the king\n                                            With(\n                                                {\n                                                    sqNum:\n                                                        UDF_SearchBoardForPiece(theCurrentNode.preMoveBoard, UDF_getICPieceABBR(theCurrentNode.preMoveFEN, \"k\"))\n                                                } As theKing,\n\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_500(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" \n                                                    });\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" current kingDangerBoard: \" & theCurrentNode.postMoveActiveKingDangerBoard \n                                                    });\n                                                );\n\n                                                With(\n                                                    {\n                                                        adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)),\n                                                        noKingPreMoveBoard: UDF_setBitAtSqNum(theCurrentNode.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        noKingPostMoveBoard:    UDF_setBitAtSqNum(theCurrentNode.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                        noKingNoPiecePostMoveBoard:\n                                                            UDF_setBitAtSqNum(\n                                                                UDF_setBitAtSqNum(theCurrentNode.postMoveBoard,\n                                                                    EMPTY_FILLER_ABBR,\n                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareNum\n                                                                ),\n                                                                EMPTY_FILLER_ABBR,\n                                                                theKing.sqNum\n                                                            )\n                                                    } As nextToKing,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_500(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                            \" adjSquaresSet: \" & nextToKing.adjSquaresSet\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" premove no king board: \" & nextToKing.noKingPreMoveBoard\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" postmove no king board: \" & nextToKing.noKingPostMoveBoard\n                                                        });\n                                                    );\n\n                                                    With(\n                                                        {\n                                                            numAdjSquaresAttackedPreMove:\n                                                                UDF_getSetSize(\n                                                                    UDF_createSqNamesSet(\n                                                                        Concat(\n                                                                            ForAll(\n                                                                                Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                                If(gblPF_DEBUG_EVAL,\n                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                        \" fCE_500(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                        \" premove AttackerSet: \" &\n                                                                                            UDF_getAttackerSqNamesSet(\n                                                                                                nextToKing.noKingPreMoveBoard,\n                                                                                                UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                                UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                                            )\n                                                                                    })\n                                                                                );\n\n                                                                                If(\n                                                                                    UDF_getSetSize(\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPreMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                                        )\n                                                                                    )>0,\n                                                                                    adjSqName.Value, \"\"\n                                                                                )\n                                                                            ), Value, \" \"\n                                                                        )\n                                                                    )\n                                                                ),\n                                                            numAdjSquaresAttackedPostMove:\n                                                                UDF_getSetSize(\n                                                                    UDF_createSqNamesSet(\n                                                                        Concat(\n                                                                            ForAll(\n                                                                                Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                                If(gblPF_DEBUG_EVAL,\n                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                        \" fCE_500(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                        \" postmove AttackerSet: \" &\n                                                                                            UDF_getAttackerSqNamesSet(\n                                                                                                nextToKing.noKingPostMoveBoard,\n                                                                                                UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                                UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                                            )\n                                                                                    })\n                                                                                );\n\n                                                                                If(\n                                                                                    UDF_getSetSize(\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPostMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                                        )\n                                                                                    )>0,\n                                                                                    adjSqName.Value, \"\"\n                                                                                )\n                                                                            ), Value, \" \"\n                                                                        )\n                                                                    )\n                                                                ),\n                                                            numTargetSquareAttackedPostMove:\n                                                                If(theCurrentNode.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,\n                                                                    // THEN\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingNoPiecePostMoveBoard,\n                                                                            theCurrentNode.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                        )\n                                                                    ),\n\n                                                                    // ELSE\n                                                                    0\n                                                                )\n                                                        } As attackData,\n\n                                                        If(gblPF_DEBUG_EVAL,\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_500(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                                \" numAdjSquaresAttackedPreMove: \" & attackData.numAdjSquaresAttackedPreMove &\n                                                                \" numAdjSquaresAttackedPostMove: \" & attackData.numAdjSquaresAttackedPostMove &\n                                                                \" numTargetSquareAttackedPostMove: \" & attackData.numTargetSquareAttackedPostMove\n                                                            })\n                                                        );\n\n                                                        With(\n                                                            {\n                                                                preMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPreMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                postMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    )\n                                                            } As theKingChecked,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_500(): DEBUG heuristic16 preMove\" & \n                                                                    \" # of adj Squares: \" & UDF_getSetSize(nextToKing.adjSquaresSet) &\n                                                                    \" theKingChecked.preMove: \" & theKingChecked.preMove &\n                                                                    \" theKingChecked.postMove: \" & theKingChecked.postMove &\n                                                                    \" numAdjSquaresAttackedPreMove: \" & attackData.numAdjSquaresAttackedPreMove &\n                                                                    \" numAdjSquaresAttackedPostMove: \" & attackData.numAdjSquaresAttackedPostMove\n                                                                })\n                                                            );\n                                                            If((UDF_getSetSize(nextToKing.adjSquaresSet) - attackData.numAdjSquaresAttackedPostMove)=1 && !theKingChecked.postMove,\n                                                                // THEN - this move would cause a stalemate\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_500(): DEBUG heuristic16 postmove stalemate detected \"\n                                                                });\n                                                                -1000,  // discourage the move\n\n                                                                // ELSE\n                                                                If(\n                                                                    theCurrentNode.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&\n                                                                    attackData.numTargetSquareAttackedPostMove=0,\n                                                                    // THEN - king can reach us and we are not protected - discourage move\n                                                                    -50,\n\n                                                                    // ELSE\n                                                                    If(attackData.numAdjSquaresAttackedPostMove=UDF_getSetSize(nextToKing.adjSquaresSet),\n                                                                        // THEN - checkmate !\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" checkmate FEN: \" & theCurrentNode.preMoveFEN\n                                                                        });\n                                                                        10000, // strongly encourage the move\n                                                                        // ELSE - encourage the move if warranted\n                                                                        (attackData.numAdjSquaresAttackedPostMove - attackData.numAdjSquaresAttackedPreMove) * 21\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            ),\n\n                                            // Sum: TBD...\n                                            0\n                                        )\n                                } As totalBonus,\n\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,totalBonus.totalWhiteBonus,-totalBonus.totalWhiteBonus)\n                            )\n                        ),\n\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\" ||\n                                        IsMatch(theCurrentNode.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            // THEN\n                                            RandBetween(-5,15),\n                                            \n                                            // ELSE\n                                            0\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-5,15), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-5,10), 0)\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theCurrentNode.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    If(\n                                        theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"NP\" ||\n                                        IsMatch(theCurrentNode.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            // THEN\n                                            RandBetween(-15,-5),\n                                            \n                                            // ELSE\n                                            0\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", RandBetween(-15,5), 0),\n                                If(theCurrentNode.inactiveColorMoveRecord.sourceSquareOccupier in \"QR\", RandBetween(-10,5), 0)\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_500(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_500(): exiting\"})\n)\n\n",
        "Property": "fCE_500",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_600(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        {\n            current:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n            parent:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)\n        } As theNodes,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_600(): san: \" & theNodes.current.inactiveColorMoveRecord.san &\n                \" pacn: \" & theNodes.current.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN) &\n                \" captureSquareOccupier: \" & theNodes.current.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture: \n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<=Abs(localVars.materialCapture)),\n                                // THEN\n                                localVars.materialDelta,\n\n                                // ELSE - discourage the move\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,-25,25)\n                            )\n                        ),\n                    heuristic12:\n                        // moving an attacked piece to a unattacked square needs a bonus\n                        With(\n                            {\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                sourceSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(localVars.sourceSqAttacked && (!localVars.targetSqAttacked),\n                                // THEN\n                                localVars.materialSource,\n\n                                // ELSE\n                                0\n                            )\n                        ),\n\n                    heuristic15:\n                        If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_OPENING),\n                            // THEN\n                            Sum(\n                                // are we capturing one of their hanging pieces ?\n                                If((!IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareName)) &&\n                                    theNodes.current.inactiveColorMoveRecord.captureSquareName in theData.evalData.theirHangingSquaresSet,\n                                    // THEN\n                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,50,-50),\n                                    // ELSE\n                                    0\n                                ),\n                                // are we reducing the number of our hanging pieces ?\n                                With(\n                                    {\n                                        myHangingSquaresSet: UDF_getHangingSquareNamesSet(theNodes.current.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN))\n                                    } As v,\n\n                                    If(UDF_getSetSize(v.myHangingSquaresSet)<UDF_getSetSize(theData.evalData.myHangingSquaresSet),\n                                        // THEN\n                                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,40,-40),\n                                        // ELSE\n                                        0\n                                    )\n                                ),\n                                // look for forks\n                                With(\n                                    {\n                                        gettingForkedPieces:   If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,BLACK_PIECES,WHITE_PIECES),\n                                        forkingPieces:         If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                    } As forkPieces,\n\n                                    With(\n                                        {\n                                            gettingForkedSet:   UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.gettingForkedPieces),\n                                            forkingSet:         UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.forkingPieces)\n                                        } As forkSets,\n                                        \n                                        With(\n                                            {\n                                                targetTargetsSet:\n                                                    // get only the eligibleSqName column\n                                                    UDF_createSqNamesSet(\n                                                        Concat(\n                                                            ShowColumns(\n                                                                Filter(colPF_LEGAL_MOVES,\n                                                                    sqNum=theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                    pieceUpper=\n                                                                        If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\",\n                                                                            // THEN - maintain the case sensitivity for PAWNs\n                                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                                                            // ELSE\n                                                                            Upper(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier)\n                                                                        ),\n                                                                    eligibleSqName in forkSets.gettingForkedSet,\n                                                                    UDF_getSetSize(  \n                                                                        UDF_getSetIntersection(\n                                                                            slideOvers,\n                                                                            UDF_getSetUnion(forkSets.forkingSet,forkSets.gettingForkedSet)\n                                                                        )\n                                                                    )=0 // no blockers in the sliderovers (or no sliderovers at all) results in a \"true\"\n                                                                ), eligibleSqName\n                                                            ), eligibleSqName, \" \"\n                                                        )\n                                                    ),\n                                                targetIsAttacked:\n                                                    UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard, \n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    )\n                                            } As targetData,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_600(): DEBUG heuristic15\" & \n                                                    \" gettingForkedSet: \" & forkSets.gettingForkedSet &\n                                                    \" forkingSet: \" & forkSets.forkingSet &\n                                                    \" targetTargetsSet: \" & targetData.targetTargetsSet &\n                                                    \" target IsAttacked?: \" & targetData.targetIsAttacked\n                                                })\n                                            );\n                                            If(targetData.targetIsAttacked,\n                                                // THEN\n                                                0,\n\n                                                // ELSE\n                                                With(\n                                                    {\n                                                        protectedTargetTargetsCount:\n                                                            Sum(\n                                                                ForAll(\n                                                                    Split(targetData.targetTargetsSet, \" \") As theTargets,\n\n                                                                    If(\n                                                                        UDF_isSqNumProtected(\n                                                                            theNodes.current.postMoveBoard,\n                                                                            UDF_sqNameToSqNum(theTargets.Value),\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                                        ),\n                                                                        // THEN\n                                                                        1,\n\n                                                                        // ELSE\n                                                                        0\n                                                                    )\n                                                                ), Value\n                                                            )\n                                                    } As counts,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_600(): DEBUG heuristic15\" & \n                                                            \" attackedTargetTargetsCount: \" & counts.protectedTargetTargetsCount\n                                                        })\n                                                    );\n\n                                                    If(UDF_getSetSize(targetData.targetTargetsSet)<=1,\n                                                        // THEN - no fork\n                                                        0,\n\n                                                        // ELSE - might be a fork worth counting\n                                                        If(counts.protectedTargetTargetsCount>=UDF_getSetSize(targetData.targetTargetsSet),\n                                                            // THEN\n                                                            With(\n                                                                {\n                                                                    sourceValue: \n                                                                        UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.preMoveBoard, \n                                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareName,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        ),\n                                                                    targetValue: \n                                                                        -UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.postMoveBoard, \n                                                                            targetData.targetTargetsSet,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                } As theValues,\n\n                                                                If(gblPF_DEBUG_EVAL,\n                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                        \" fCE_600(): DEBUG heuristic15\" & \n                                                                        \" source: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareName &\n                                                                        \" value: \" & theValues.sourceValue &\n                                                                        \" target: \" & targetData.targetTargetsSet &\n                                                                        \" value: \" & theValues.targetValue\n                                                                    })\n                                                                );\n                                                                If(Abs(theValues.targetValue) < Abs(theValues.sourceValue),\n                                                                    0,\n                                                                    theValues.targetValue\n                                                                )\n                                                            ),\n\n                                                            // ELSE\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_600(): DEBUG heuristic15\" & \n                                                                    \" target: \" & targetData.targetTargetsSet &\n                                                                    \" value: \" & \n                                                                        -UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.postMoveBoard, \n                                                                            targetData.targetTargetsSet,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                })\n                                                            );\n                                                            -UDF_minMaterialCentipawnValueFromSet(\n                                                                theNodes.current.postMoveBoard, \n                                                                targetData.targetTargetsSet,\n                                                                UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            ),\n\n                            // ELSE\n                            0\n                        ),\n\n                    heuristic16:\n                        If(!(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN)=GAME_PHASE_END),\n                            // THEN - not in the END GAME\n                            0,\n\n                            // ELSE - do END GAME analysis\n                            With(\n                                {\n                                    totalBonus:\n                                        Sum(\n                                            // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                            If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theNodes.current.preMoveBoard, \"Q\")<3,\n                                                // THEN - push the pawn and bump up the promotion to a Q\n                                                If(\n                                                    (IsBlank(theNodes.current.inactiveColorMoveRecord.promoteTo) || theNodes.current.inactiveColorMoveRecord.promoteTo in \"Q\") &&\n                                                    !UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard,\n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    ),\n                                                    // THEN\n                                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                                                        UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName),\n                                                        8 - UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName)\n                                                     ) * RandBetween(8,21) + If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0),\n\n                                                    // ELSE\n                                                    If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0)\n                                                ),\n                                                // ELSE\n                                                If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,\n                                                    RandBetween(100,200),\n                                                    0\n                                                )\n                                            ),\n\n                                            // Sum: trapping the king\n                                            With(\n                                                {\n                                                    sqNum:\n                                                        UDF_SearchBoardForPiece(theNodes.current.preMoveBoard, UDF_getICPieceABBR(theNodes.current.preMoveFEN, \"k\"))\n                                                } As theKing,\n\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_600(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" \n                                                    });\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" current kingDangerBoard: \" & theNodes.current.postMoveActiveKingDangerBoard \n                                                    });\n                                                );\n\n                                                With(\n                                                    {\n                                                        adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)),\n                                                        noKingPreMoveBoard: UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        noKingPostMoveBoard:    UDF_setBitAtSqNum(theNodes.current.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                        noKingNoPiecePostMoveBoard:\n                                                            UDF_setBitAtSqNum(\n                                                                UDF_setBitAtSqNum(theNodes.current.postMoveBoard,\n                                                                    EMPTY_FILLER_ABBR,\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum\n                                                                ),\n                                                                EMPTY_FILLER_ABBR,\n                                                                theKing.sqNum\n                                                            ),\n                                                        adjBlockedSquares:\n                                                            UDF_occupiedSqNamesSet(\n                                                                UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum), \n                                                                UDF_createSqNamesSet(\n                                                                    UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)\n                                                                ),\n                                                                If(UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                                            )\n                                                    } As nextToKing,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_600(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                            \" adjSquaresSet: \" & nextToKing.adjSquaresSet &\n                                                            \" adjSquaresSet BLOCKED: \" & nextToKing.adjBlockedSquares\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" premove no king board: \" & nextToKing.noKingPreMoveBoard\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" postmove no king board: \" & nextToKing.noKingPostMoveBoard\n                                                        });\n                                                    );\n\n                                                    With(\n                                                        {\n                                                            numAdjSquaresAttackedPreMove:\n                                                                UDF_getSetSize(\n                                                                    UDF_createSqNamesSet(\n                                                                        Concat(\n                                                                            ForAll(\n                                                                                Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                                If(gblPF_DEBUG_EVAL,\n                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                        \" fCE_600(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                        \" premove AttackerSet: \" &\n                                                                                            UDF_getAttackerSqNamesSet(\n                                                                                                nextToKing.noKingPreMoveBoard,\n                                                                                                UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                                UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                            )\n                                                                                    })\n                                                                                );\n\n                                                                                If(\n                                                                                    UDF_getSetSize(\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPreMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                    )>0,\n                                                                                    adjSqName.Value, \"\"\n                                                                                )\n                                                                            ), Value, \" \"\n                                                                        )\n                                                                    )\n                                                                ),\n                                                            numAdjSquaresAttackedPostMove:\n                                                                UDF_getSetSize(\n                                                                    UDF_createSqNamesSet(\n                                                                        Concat(\n                                                                            ForAll(\n                                                                                Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                                If(gblPF_DEBUG_EVAL,\n                                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                        \" fCE_600(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                        \" postmove AttackerSet: \" &\n                                                                                            UDF_getAttackerSqNamesSet(\n                                                                                                nextToKing.noKingPostMoveBoard,\n                                                                                                UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                                UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                            )\n                                                                                    })\n                                                                                );\n\n                                                                                If(\n                                                                                    UDF_getSetSize(\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPostMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                    )>0,\n                                                                                    adjSqName.Value, \"\"\n                                                                                )\n                                                                            ), Value, \" \"\n                                                                        )\n                                                                    )\n                                                                ),\n                                                            numTargetSquareAttackedPostMove:\n                                                                If(theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,\n                                                                    // THEN\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingNoPiecePostMoveBoard,\n                                                                            theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                    ),\n\n                                                                    // ELSE\n                                                                    0\n                                                                )\n                                                        } As attackData,\n\n                                                        If(gblPF_DEBUG_EVAL,\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_600(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                                \" numAdjSquaresAttackedPreMove: \" & attackData.numAdjSquaresAttackedPreMove &\n                                                                \" numAdjSquaresAttackedPostMove: \" & attackData.numAdjSquaresAttackedPostMove &\n                                                                \" numTargetSquareAttackedPostMove: \" & attackData.numTargetSquareAttackedPostMove\n                                                            })\n                                                        );\n\n                                                        With(\n                                                            {\n                                                                preMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPreMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                postMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    )\n                                                            } As theKingChecked,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_600(): DEBUG heuristic16 preMove\" & \n                                                                    \" # of adj Squares: \" & UDF_getSetSize(nextToKing.adjSquaresSet) &\n                                                                    \" theKingChecked.preMove: \" & theKingChecked.preMove &\n                                                                    \" theKingChecked.postMove: \" & theKingChecked.postMove &\n                                                                    \" numAdjSquaresAttackedPreMove: \" & attackData.numAdjSquaresAttackedPreMove &\n                                                                    \" numAdjSquaresAttackedPostMove: \" & attackData.numAdjSquaresAttackedPostMove\n                                                                })\n                                                            );\n                                                            If((UDF_getSetSize(nextToKing.adjSquaresSet) - attackData.numAdjSquaresAttackedPostMove)=1 && !theKingChecked.postMove,\n                                                                // THEN - this move would cause a stalemate\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_600(): DEBUG heuristic16 postmove stalemate detected \"\n                                                                });\n                                                                -1000,  // discourage the move\n\n                                                                // ELSE\n                                                                If(\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&\n                                                                    attackData.numTargetSquareAttackedPostMove=0,\n                                                                    // THEN - king can reach us and we are not protected - discourage move\n                                                                    -50,\n\n                                                                    // ELSE\n                                                                    If(\n                                                                        (attackData.numAdjSquaresAttackedPostMove + UDF_getSetSize(nextToKing.adjBlockedSquares))\n                                                                        >=UDF_getSetSize(nextToKing.adjSquaresSet),\n                                                                        // THEN - checkmate !\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" checkmate FEN: \" & theNodes.current.preMoveFEN\n                                                                        });\n                                                                        10000, // strongly encourage the move\n                                                                        \n                                                                        // ELSE - encourage the move if warranted - early in game reduce impact\n                                                                        If(attackData.numAdjSquaresAttackedPostMove>attackData.numAdjSquaresAttackedPreMove,\n                                                                            // THEN\n                                                                            (attackData.numAdjSquaresAttackedPostMove - attackData.numAdjSquaresAttackedPreMove) * 21,\n\n                                                                            // ELSE\n                                                                            0 \n                                                                        )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            ),\n\n                                            // Sum: TBD...\n                                            0\n                                        )\n                                } As totalBonus,\n\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,totalBonus.totalBonus,-totalBonus.totalBonus)\n                            )\n                        ),\n\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    Switch(true,\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(10,25),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\" && Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"128\",\n                                            RandBetween(0,15),\n                                            \n                                        // default\n                                            0\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(10,25),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\", \n                                            RandBetween(0,15),\n\n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            ),\n\n                            // ELSE\n                            Switch(comChessEngineFunctions.fME_getGamePhase(theNodes.current.preMoveFEN),\n                                GAME_PHASE_OPENING,\n                                    Switch(true,\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(-25,-10),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\"  && Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"456\",\n                                            RandBetween(-15,0),\n                                            \n                                        // default\n                                        0\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(-25,-10),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\",\n                                            RandBetween(-15,0),\n                                        \n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic15: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_600(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_600(): exiting\"})\n)\n\n",
        "Property": "fCE_600",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_600_preEvaluate(): entering\"\n    })\n);\n\n\nWith(\n    {\n        d0Node:         LookUp(colPF_MOVE_TREE, nodeDepth=0),\n        dynamicData:    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME)\n    } As theData,\n\n    UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {\n        evalData:   Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).evalData, {\n                        theirHangingSquaresSet: UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_INACTIVE_COLOR(theData.d0Node.postMoveFEN)),\n                        myHangingSquaresSet:    UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theData.d0Node.postMoveFEN))\n                    })\n    })\n);\n\nIf(gblPF_DEBUG_EVAL,\n    With(\n        LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" comChessEngineFunctions.fCE_600_preEvaluate(): DEBUG\" &\n            \" myHangingSquaresSet: \" & theData.evalData.myHangingSquaresSet &\n            \" theirHangingSquaresSet: \" & theData.evalData.theirHangingSquaresSet\n        })\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_600_preEvaluate(): exiting\"\n    })\n);\n",
        "Property": "fCE_600_preEvaluate",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_600_postEvaluate(): entered\"\n    })\n);\n\n\n\n\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_600_postEvaluate(): exiting\"\n    })\n);\n\n",
        "Property": "fCE_600_postEvaluate",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_700(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        {\n            current:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n            parent:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)\n        } As theNodes,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_700(): san: \" & theNodes.current.inactiveColorMoveRecord.san &\n                \" pacn: \" & theNodes.current.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN) &\n                \" captureSquareOccupier: \" & theNodes.current.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture: \n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                targetSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(!localVars.targetSqAttacked || (Abs(localVars.materialSource)<=Abs(localVars.materialCapture)),\n                                // THEN\n                                localVars.materialDelta,\n\n                                // ELSE - discourage the move\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,-25,25)\n                            )\n                        ),\n                    heuristic12:\n                        // bonus for moving - includes capturing a piece and/or running from danger\n                        With(\n                            {\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                sourceSqProtected:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                sourceSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                sourceAttackerMaterial:\n                                    UDF_getSqNumAttackersMinMaterialCentipawn(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                sourceAttackerSqNames:\n                                    UDF_getAttackerSqNamesSet(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                targetSqProtectedByMe:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                targetSqAttackedByThem:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                targetAttackerMaterial:\n                                    UDF_getSqNumAttackersMinMaterialCentipawn(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_700(): heuristic12\" & \n                                    \" materialSource: \" & localVars.materialSource &\n                                    \" materialCapture: \" & localVars.materialCapture &\n                                    \" sourceSqProtected: \" & localVars.sourceSqProtected &\n                                    \" sourceSqAttacked: \" & localVars.sourceSqAttacked &\n                                    \" sourceAttackerMaterial: \" & localVars.sourceAttackerMaterial &\n                                    \" sourceAttackerSqNames: \" & localVars.sourceAttackerSqNames &\n                                    \" targetSqProtectedByMe: \" & localVars.targetSqProtectedByMe &\n                                    \" targetSqAttackedByThem: \" & localVars.targetSqAttackedByThem &\n                                    \" targetAttackerMaterial: \" & localVars.targetAttackerMaterial\n                                })\n                            );\n\n                            Switch(true,\n                                localVars.sourceSqAttacked && localVars.materialCapture=0 && UDF_getSetSize(localVars.sourceAttackerSqNames)=1 &&\n                                UDF_isSqNumAttacked(\n                                    // make sure that somebody other than the source piece is attacking the attacker\n                                    UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                    UDF_sqNameToSqNum(localVars.sourceAttackerSqNames),\n                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                ),\n                                    // USE CASE: face fear - trust another move will remove threat\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: face fear - trust another move will remove threat\" &\n                                            \" sourceAttackerSqNames: \" & localVars.sourceAttackerSqNames\n                                        })\n                                    );\n                                    0,\n\n                                localVars.sourceSqAttacked && (!localVars.sourceSqProtected) && (!localVars.targetSqAttackedByThem) && localVars.materialCapture=0,\n                                    // USE CASE: running from danger\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: running from danger\" &\n                                            \" bonus: \" & localVars.materialSource * 0.5\n                                        })\n                                    );\n                                    localVars.materialSource * 0.5,\n\n                                localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&\n                                Abs(localVars.sourceAttackerMaterial)<Abs(localVars.materialSource) &&\n                                (\n                                    (!localVars.targetSqAttackedByThem) ||\n                                    Abs(localVars.sourceAttackerMaterial)<Abs(localVars.targetAttackerMaterial)\n                                ),\n                                    // USE CASE: walking from danger\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: walking from danger\" &\n                                            \" bonus: \" & localVars.materialSource + localVars.sourceAttackerMaterial\n                                        })\n                                    );\n                                    localVars.materialSource + localVars.sourceAttackerMaterial,\n\n                                localVars.sourceSqAttacked && (!localVars.sourceSqProtected) && localVars.materialCapture=0 &&\n                                localVars.targetSqAttackedByThem && localVars.targetSqProtectedByMe,\n                                    // USE CASE: switching danger - going to a protected square \n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: switching danger - going to a protected square \" &\n                                            \" bonus: \" & localVars.materialSource * 0.25\n                                        })\n                                    );\n                                    localVars.materialSource * 0.25,\n\n                                localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&\n                                Abs(localVars.sourceAttackerMaterial)>=Abs(localVars.materialSource),\n                                    // USE CASE: facing our fears\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: facing our fears\" &\n                                            \" bonus: \" & 0\n                                        })\n                                    );\n                                    0,\n\n                                (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && (!localVars.targetSqProtectedByMe),\n                                    // USE CASE: discourage moving into a bullseye\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: discourage moving into a bullseye\" &\n                                            \" bonus: \" & -localVars.materialSource\n                                        })\n                                    );\n                                    -localVars.materialSource,\n                                (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && localVars.targetSqProtectedByMe,\n                                    // USE CASE: bullseye move depends upon players\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: bullseye move depends upon players\" &\n                                            \" bonus: \" &\n                                                If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                                                    // THEN - no bullseye during the opening\n                                                    0,\n                                                    // ELSE\n                                                    -(localVars.targetAttackerMaterial + localVars.materialSource) * 0.15\n                                                )\n                                        })\n                                    );\n                                    If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                                        // THEN - no bullseye during the opening\n                                        0,\n                                        // ELSE\n                                        -(localVars.targetAttackerMaterial + localVars.materialSource) * 0.15\n                                    ),\n                                localVars.sourceSqAttacked && (!localVars.targetSqAttackedByThem) && localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),\n                                    // USE CASE: capture hanging piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece while running\" &\n                                            \" bonus: \" & -localVars.materialCapture + localVars.materialSource\n                                        })\n                                    );\n                                    -localVars.materialCapture + localVars.materialSource,\n                                localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),\n                                    // USE CASE: capture hanging piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece\" &\n                                            \" bonus: \" & -localVars.materialCapture\n                                        })\n                                    );\n                                    -localVars.materialCapture,\n                                localVars.materialCapture<>0 && localVars.targetSqAttackedByThem &&\n                                Abs(localVars.materialCapture)>=Abs(localVars.materialSource),\n                                    // USE CASE: capture protected piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece\" &\n                                            \" bonus: \" & -(localVars.materialCapture + localVars.materialSource)\n                                        })\n                                    );\n                                    -(localVars.materialCapture + localVars.materialSource),\n\n                                // default\n                                If(gblPF_DEBUG_EVAL,\n                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                        \" USE CASE: default\" &\n                                        \" bonus: 0\"\n                                    })\n                                );\n                                0\n                            )\n                        ),\n\n                    heuristic15:\n                        If(!(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING),\n                            // THEN\n                            Sum(\n                                // are we capturing one of their hanging pieces ?\n                                If((!IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareName)) &&\n                                    theNodes.current.inactiveColorMoveRecord.captureSquareName in theData.evalData.theirHangingSquaresSet,\n                                    // THEN\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" fCE_700(): heuristic15 capturing a hanging piece\"\n                                        })\n                                    );\n                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,50,-50),\n                                    // ELSE\n                                    0\n                                ),\n                                // are we reducing the number of our hanging pieces ?\n                                With(\n                                    {\n                                        myHangingSquaresSet: UDF_getHangingSquareNamesSet(theNodes.current.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN))\n                                    } As v,\n\n                                    If(UDF_getSetSize(v.myHangingSquaresSet)<UDF_getSetSize(theData.evalData.myHangingSquaresSet),\n                                        // THEN\n                                        If(gblPF_DEBUG_EVAL,\n                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                \" fCE_700(): heuristic15 reducing number of hanging pieces\" & \n                                                \" prev hanging set size: \" & v.myHangingSquaresSet &\n                                                \" new hanging set size: \" & theData.evalData.myHangingSquaresSet\n                                            })\n                                        );\n                                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,35,-35),\n                                        // ELSE\n                                        0\n                                    )\n                                ),\n                                // look for forks\n                                With(\n                                    {\n                                        gettingForkedPieces:   If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,BLACK_PIECES,WHITE_PIECES),\n                                        forkingPieces:         If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                    } As forkPieces,\n\n                                    With(\n                                        {\n                                            gettingForkedSet:   UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.gettingForkedPieces),\n                                            forkingSet:         UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.forkingPieces)\n                                        } As forkSets,\n                                        \n                                        With(\n                                            {\n                                                targetTargetsSet:\n                                                    // get only the eligibleSqName column\n                                                    UDF_createSqNamesSet(\n                                                        Concat(\n                                                            ShowColumns(\n                                                                Filter(colPF_LEGAL_MOVES,\n                                                                    sqNum=theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                    pieceUpper=\n                                                                        If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\",\n                                                                            // THEN - maintain the case sensitivity for PAWNs\n                                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                                                            // ELSE\n                                                                            Upper(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier)\n                                                                        ),\n                                                                    eligibleSqName in forkSets.gettingForkedSet,\n                                                                    UDF_getSetSize(  \n                                                                        UDF_getSetIntersection(\n                                                                            slideOvers,\n                                                                            UDF_getSetUnion(forkSets.forkingSet,forkSets.gettingForkedSet)\n                                                                        )\n                                                                    )=0 // no blockers in the sliderovers (or no sliderovers at all) results in a \"true\"\n                                                                ), eligibleSqName\n                                                            ), eligibleSqName, \" \"\n                                                        )\n                                                    ),\n                                                targetIsAttacked:\n                                                    UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard, \n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    )\n                                            } As targetData,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_700(): heuristic15\" & \n                                                    \" gettingForkedSet: \" & forkSets.gettingForkedSet &\n                                                    \" forkingSet: \" & forkSets.forkingSet &\n                                                    \" targetTargetsSet: \" & targetData.targetTargetsSet &\n                                                    \" target IsAttacked?: \" & targetData.targetIsAttacked\n                                                })\n                                            );\n                                            If(targetData.targetIsAttacked,\n                                                // THEN\n                                                0,\n\n                                                // ELSE\n                                                With(\n                                                    {\n                                                        protectedTargetTargetsCount:\n                                                            Sum(\n                                                                ForAll(\n                                                                    Split(targetData.targetTargetsSet, \" \") As theTargets,\n\n                                                                    If(\n                                                                        UDF_isSqNumProtected(\n                                                                            theNodes.current.postMoveBoard,\n                                                                            UDF_sqNameToSqNum(theTargets.Value),\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                                        ),\n                                                                        // THEN\n                                                                        1,\n\n                                                                        // ELSE\n                                                                        0\n                                                                    )\n                                                                ), Value\n                                                            )\n                                                    } As counts,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_700(): DEBUG heuristic15\" & \n                                                            \" attackedTargetTargetsCount: \" & counts.protectedTargetTargetsCount\n                                                        })\n                                                    );\n\n                                                    If(UDF_getSetSize(targetData.targetTargetsSet)<=1,\n                                                        // THEN - no fork\n                                                        0,\n\n                                                        // ELSE - might be a fork worth counting\n                                                        If(counts.protectedTargetTargetsCount>=UDF_getSetSize(targetData.targetTargetsSet),\n                                                            // THEN\n                                                            With(\n                                                                {\n                                                                    sourceValue: \n                                                                        UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.preMoveBoard, \n                                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareName,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        ),\n                                                                    targetValue: \n                                                                        -UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.postMoveBoard, \n                                                                            targetData.targetTargetsSet,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                } As theValues,\n\n                                                                If(gblPF_DEBUG_EVAL,\n                                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                        \" fCE_700(): DEBUG heuristic15\" & \n                                                                        \" source: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareName &\n                                                                        \" value: \" & theValues.sourceValue &\n                                                                        \" target: \" & targetData.targetTargetsSet &\n                                                                        \" value: \" & theValues.targetValue\n                                                                    })\n                                                                );\n                                                                If(Abs(theValues.targetValue) < Abs(theValues.sourceValue),\n                                                                    0,\n                                                                    theValues.targetValue\n                                                                )\n                                                            ),\n\n                                                            // ELSE\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_700(): DEBUG heuristic15\" & \n                                                                    \" target: \" & targetData.targetTargetsSet &\n                                                                    \" value: \" & \n                                                                        -UDF_minMaterialCentipawnValueFromSet(\n                                                                            theNodes.current.postMoveBoard, \n                                                                            targetData.targetTargetsSet,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                })\n                                                            );\n                                                            -UDF_minMaterialCentipawnValueFromSet(\n                                                                theNodes.current.postMoveBoard, \n                                                                targetData.targetTargetsSet,\n                                                                UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            ),\n\n                            // ELSE\n                            0\n                        ),\n\n                    heuristic16:\n                        If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                            // THEN - still in GAME_PHASE_OPENING\n                            0,\n\n                            // ELSE - do END GAME analysis\n                            With(\n                                {\n                                    totalBonus:\n                                        Sum(\n                                            // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                            If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theNodes.current.preMoveBoard, \"Q\")<3,\n                                                // THEN - push the pawn and bump up the promotion to a Q\n                                                If(\n                                                    (IsBlank(theNodes.current.inactiveColorMoveRecord.promoteTo) || theNodes.current.inactiveColorMoveRecord.promoteTo in \"Q\") &&\n                                                    !UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard,\n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    ),\n                                                    // THEN\n                                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                                                        UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName),\n                                                        8 - UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName)\n                                                     ) * RandBetween(8,21) + If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0),\n\n                                                    // ELSE\n                                                    If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0)\n                                                ),\n                                                // ELSE\n                                                If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,\n                                                    RandBetween(100,200),\n                                                    0\n                                                )\n                                            ),\n\n                                            // Sum: trapping the king\n                                            With(\n                                                {\n                                                    sqNum: // get the square their KING is on\n                                                        UDF_SearchBoardForPiece(theNodes.current.preMoveBoard, UDF_getICPieceABBR(theNodes.current.preMoveFEN, \"k\"))\n                                                } As theKing,\n\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_700(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" \n                                                    })\n                                                );\n\n                                                With(\n                                                    {\n                                                        adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)),\n                                                        noKingPreMoveBoard: UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        noKingPostMoveBoard:    UDF_setBitAtSqNum(theNodes.current.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                        noKingNoPiecePostMoveBoard:\n                                                            UDF_setBitAtSqNum(\n                                                                UDF_setBitAtSqNum(theNodes.current.postMoveBoard,\n                                                                    EMPTY_FILLER_ABBR,\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum\n                                                                ),\n                                                                EMPTY_FILLER_ABBR,\n                                                                theKing.sqNum\n                                                            ),\n                                                        adjBlockedSquares:\n                                                            UDF_occupiedSqNamesSet(\n                                                                UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum), \n                                                                UDF_createSqNamesSet(\n                                                                    UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)\n                                                                ),\n                                                                If(UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                                            )\n                                                    } As nextToKing,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_700(): heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                            \" adjSquaresSet: \" & nextToKing.adjSquaresSet &\n                                                            \" adjSquaresSet BLOCKED: \" & nextToKing.adjBlockedSquares\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" premove no king board: \" & nextToKing.noKingPreMoveBoard\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" postmove no king board: \" & nextToKing.noKingPostMoveBoard\n                                                        });\n                                                    );\n\n                                                    With(\n                                                        {\n                                                            adjSquaresAttackedPreMove:\n                                                                UDF_createSqNamesSet(\n                                                                    Concat(\n                                                                        ForAll(\n                                                                            Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                            If(gblPF_DEBUG_EVAL,\n                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                    \" fCE_700(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                    \" premove AttackerSet: \" &\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPreMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                })\n                                                                            );\n\n                                                                            If(\n                                                                                UDF_getSetSize(\n                                                                                    UDF_getAttackerSqNamesSet(\n                                                                                        nextToKing.noKingPreMoveBoard,\n                                                                                        UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                    )\n                                                                                )>0,\n                                                                                adjSqName.Value, \"\"\n                                                                            )\n                                                                        ), Value, \" \"\n                                                                    )\n                                                                ),\n                                                            adjSquaresAttackedPostMove:\n                                                                UDF_createSqNamesSet(\n                                                                    Concat(\n                                                                        ForAll(\n                                                                            Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                            If(gblPF_DEBUG_EVAL,\n                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                    \" fCE_700(): heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                    \" postmove AttackerSet: \" &\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPostMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                })\n                                                                            );\n\n                                                                            If(\n                                                                                UDF_getSetSize(\n                                                                                    UDF_getAttackerSqNamesSet(\n                                                                                        nextToKing.noKingPostMoveBoard,\n                                                                                        UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                    )\n                                                                                )>0,\n                                                                                adjSqName.Value, \"\"\n                                                                            )\n                                                                        ), Value, \" \"\n                                                                    )\n                                                                ),\n                                                            isTargetSquareProtectedByMe:\n                                                                UDF_isSqNumProtected(\n                                                                    nextToKing.noKingNoPiecePostMoveBoard,\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                ),\n                                                            numTargetSquareAttackedByThem:\n                                                                If(theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,\n                                                                    // THEN\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingNoPiecePostMoveBoard,\n                                                                            theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                    ),\n\n                                                                    // ELSE\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                    )\n                                                                )\n                                                        } As attackData,\n\n                                                        If(gblPF_DEBUG_EVAL,\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_700(): heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                                \" adjSquaresAttackedPreMove: \" & attackData.adjSquaresAttackedPreMove &\n                                                                \" adjSquaresAttackedPostMove: \" & attackData.adjSquaresAttackedPostMove &\n                                                                \" isTargetSquareProtectedByMe: \" & attackData.isTargetSquareProtectedByMe &\n                                                                \" numTargetSquareAttackedByThem: \" & attackData.numTargetSquareAttackedByThem\n                                                            });\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_700(): heuristic16\" &\n                                                                \" adj attacked or blocked: \" & UDF_getSetUnion(attackData.adjSquaresAttackedPostMove, nextToKing.adjBlockedSquares)\n                                                            });\n                                                        );\n\n                                                        With(\n                                                            {\n                                                                preMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPreMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                postMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                numAdjAttackedOrBlocked:\n                                                                    UDF_getSetSize(UDF_getSetUnion(attackData.adjSquaresAttackedPostMove, nextToKing.adjBlockedSquares))\n                                                            } As theKingChecked,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_700(): heuristic16 preMove\" & \n                                                                    \" # of adj Squares: \" & UDF_getSetSize(nextToKing.adjSquaresSet) &\n                                                                    \" theKingChecked.preMove: \" & theKingChecked.preMove &\n                                                                    \" theKingChecked.postMove: \" & theKingChecked.postMove &\n                                                                    \" adjSquaresAttackedPreMove: \" & attackData.adjSquaresAttackedPreMove &\n                                                                    \" adjSquaresAttackedPostMove: \" & attackData.adjSquaresAttackedPostMove &\n                                                                    \" numAdjAttackedOrBlocked: \" & theKingChecked.numAdjAttackedOrBlocked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                (UDF_getSetSize(nextToKing.adjSquaresSet) - UDF_getSetSize(attackData.adjSquaresAttackedPostMove))=1 &&\n                                                                (!theKingChecked.postMove),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_700(): heuristic16 postmove stalemate detected \"\n                                                                        })\n                                                                    );\n                                                                    -1000,  // discourage the move\n                                                                theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&\n                                                                (\n                                                                    attackData.numTargetSquareAttackedByThem>0 || // somebody can get me\n                                                                    (attackData.numTargetSquareAttackedByThem=0 && (!attackData.isTargetSquareProtectedByMe)) // king can get me\n                                                                ),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_700(): heuristic16 adjacent target square is not safe\"\n                                                                        })\n                                                                    );\n                                                                    -50,\n                                                                attackData.numTargetSquareAttackedByThem>0,\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_700(): heuristic16 target square is not safe\"\n                                                                        })\n                                                                    );\n                                                                    0,\n\n                                                                theKingChecked.numAdjAttackedOrBlocked>=UDF_getSetSize(nextToKing.adjSquaresSet) && theKingChecked.postMove,\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" checkmate detected FEN: \" & theNodes.current.preMoveFEN\n                                                                        })\n                                                                    );\n                                                                    10000, // strongly encourage the move\n                                                                        \n                                                                UDF_getSetSize(attackData.adjSquaresAttackedPostMove)>UDF_getSetSize(attackData.adjSquaresAttackedPreMove),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" detected increase in adj squares attacked BONUS:\" &\n                                                                            (\n                                                                                UDF_getSetSize(attackData.adjSquaresAttackedPostMove) - \n                                                                                UDF_getSetSize(attackData.adjSquaresAttackedPreMove)\n                                                                            ) * 21\n                                                                        })\n                                                                    );\n                                                                    (\n                                                                        UDF_getSetSize(attackData.adjSquaresAttackedPostMove) - \n                                                                        UDF_getSetSize(attackData.adjSquaresAttackedPreMove)\n                                                                    ) * 21,\n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            ),\n\n                                            // Sum: TBD...\n                                            0\n                                        )\n                                } As totalBonus,\n\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,totalBonus.totalBonus,-totalBonus.totalBonus)\n                            )\n                        ),\n\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(theData.evalData.gamePhasePreMove,\n                                GAME_PHASE_OPENING,\n                                    With(\n                                        {\n                                            inBook:    LookUp(Split(OPENING_BOOK_WHITE, \" \"),Value=theNodes.current.inactiveColorMoveRecord.san)\n                                        } As theOpening,\n                                        If(IsBlank(theOpening.inBook),\n                                            // THEN - not a book move\n                                            Switch(true,\n                                                theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\" &&\n                                                Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"128\",\n                                                    RandBetween(0,15),\n                                                // default\n                                                0\n                                            ),\n                                            // ELSE - the move is in the book\n                                            RandBetween(15,35)\n                                        )\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        // encourage a castle\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(30,45),\n                                        // encourage a move out of starting position\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QRBN\" &&\n                                        UDF_isPieceinStartingPosition(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier, theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                            RandBetween(10,25),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\" &&\n                                        (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture\n                                            RandBetween(0,15),\n\n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            ),\n\n                            // ELSE\n                            Switch(theData.evalData.gamePhasePreMove,\n                                GAME_PHASE_OPENING,\n                                    With(\n                                        {\n                                            inBook:    LookUp(Split(OPENING_BOOK_BLACK, \" \"),Value=theNodes.current.inactiveColorMoveRecord.san)\n                                        } As theOpening,\n                                        If(IsBlank(theOpening.inBook),\n                                            // THEN - not a book move\n                                            Switch(true,\n                                                theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\" &&\n                                                Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"456\",\n                                                    RandBetween(-15,0),\n                                                // default\n                                                0\n                                            ),\n                                            // ELSE - the move is in the book\n                                            RandBetween(-35,-15)\n                                        )\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        // encourage a castle\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(-45,-30),\n                                        // encourage a move out of starting position\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QRBN\" &&\n                                        UDF_isPieceinStartingPosition(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier, theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                            RandBetween(-25,-10),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\" &&\n                                        (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture\n                                            RandBetween(-15,0),\n                                        \n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic15: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_700(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_700(): exiting\"})\n)\n\n",
        "Property": "fCE_700",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_700_preEvaluate(): entering\"\n    })\n);\n\n\nWith(\n    {\n        d0Node:         LookUp(colPF_MOVE_TREE, nodeDepth=0),\n        dynamicData:    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME)\n    } As theData,\n\n    UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {\n        evalData:   Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).evalData, {\n                        theirHangingSquaresSet: UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_INACTIVE_COLOR(theData.d0Node.postMoveFEN)),\n                        myHangingSquaresSet:    UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theData.d0Node.postMoveFEN)),\n                        gamePhasePreMove:       comChessEngineFunctions.fME_getGamePhase(theData.d0Node.postMoveFEN) // D0 post move is D1 pre move...\n                    })\n    })\n);\n\nIf(gblPF_DEBUG_EVAL,\n    With(\n        LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" comChessEngineFunctions.fCE_700_preEvaluate(): DEBUG\" &\n            \" myHangingSquaresSet: \" & theData.evalData.myHangingSquaresSet &\n            \" theirHangingSquaresSet: \" & theData.evalData.theirHangingSquaresSet\n        })\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_700_preEvaluate(): exiting\"\n    })\n);\n",
        "Property": "fCE_700_preEvaluate",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_700_postEvaluate(): entered\"\n    })\n);\n\n\n\n\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_700_postEvaluate(): exiting\"\n    })\n);\n\n",
        "Property": "fCE_700_postEvaluate",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_800(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        {\n            current:    LookUp(colPF_MOVE_TREE, nodeID=pNodeID),\n            parent:     LookUp(colPF_MOVE_TREE, nodeID=LookUp(colPF_MOVE_TREE, nodeID=pNodeID).parentNodeID)\n        } As theNodes,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_800(): san: \" & theNodes.current.inactiveColorMoveRecord.san &\n                \" pacn: \" & theNodes.current.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN) &\n                \" captureSquareOccupier: \" & theNodes.current.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic11:  // agressive-ness bonus\n                        With(\n                            {\n                                materialDelta:\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.postMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ) -\n                                    Sum(\n                                        ForAll(\n                                            Split(UDF_FEN_TO_PIECE_PLACEMENT(theNodes.current.preMoveFEN), \"\") As thePiece,\n\n                                            UDF_getPieceCentipawnMaterialValue(thePiece.Value, \"QRBNPqrbnp\")\n                                        ),\n                                        Value\n                                    ),\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture: \n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                numSourceSqAttacks:\n                                    UDF_countSqNumProtections(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                numTargetSqAttacks:\n                                    UDF_countSqNumAttacks(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                activeColor: UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                            } As localVars,\n\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_800(): heuristic11\" &\n                                    \" activeColor: \" & localVars.activeColor &\n                                    \" materialSource: \" & localVars.materialSource &\n                                    \" materialCapture: \" & localVars.materialCapture &\n                                    \" moveDirection: \" & theNodes.current.inactiveColorMoveRecord.moveDirection &\n                                    \" numSourceSqAttacks: \" & localVars.numSourceSqAttacks &\n                                    \" numTargetSqAttacks: \" & localVars.numTargetSqAttacks\n                                })\n                            );\n\n                            Sum(\n                                0,\n                                Switch(true,\n                                    localVars.activeColor=WHITE && theNodes.current.inactiveColorMoveRecord.moveDirection in \"128\" && \n                                    localVars.materialCapture<>0 && Abs(localVars.materialSource)<=Abs(localVars.materialCapture),\n                                        If(gblPF_DEBUG_EVAL,\n                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                \" fCE_800(): heuristic11\" &\n                                                \" bonus: \" & localVars.materialSource * 0.34\n                                            })\n                                        );\n                                        localVars.materialSource * 0.34,\n                                    localVars.activeColor=BLACK && theNodes.current.inactiveColorMoveRecord.moveDirection in \"456\" && \n                                    localVars.materialCapture<>0 && Abs(localVars.materialSource)<=Abs(localVars.materialCapture),\n                                        If(gblPF_DEBUG_EVAL,\n                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                \" fCE_800(): heuristic11\" &\n                                                \" bonus: \" & localVars.materialSource * 0.34\n                                            })\n                                        );\n                                        localVars.materialSource * 0.34,\n                                    // default\n                                    0\n                                )\n                            )\n                        ),\n                    heuristic12:\n                        // bonus for moving - includes capturing a piece and/or running from danger\n                        With(\n                            {\n                                materialSource:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                materialCapture:\n                                    UDF_getPieceCentipawnMaterialValue(\n                                        theNodes.current.inactiveColorMoveRecord.captureSquareOccupier,\n                                        ALL_PIECES\n                                    ),\n                                sourceSqProtected:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                sourceSqAttacked:\n                                    UDF_isSqNumAttacked(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                sourceAttackerMaterial:\n                                    UDF_getSqNumAttackersMinMaterialCentipawn(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                sourceAttackerSqNames:\n                                    UDF_getAttackerSqNamesSet(\n                                        theNodes.current.preMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                targetSqProtectedByMe:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                    ),\n                                targetSqAttackedByThem:\n                                    UDF_isSqNumProtected(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    ),\n                                targetAttackerMaterial:\n                                    UDF_getSqNumAttackersMinMaterialCentipawn(\n                                        theNodes.current.postMoveBoard,\n                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                    )\n                            } As localVars,\n\n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                    \" fCE_800(): heuristic12\" & \n                                    \" materialSource: \" & localVars.materialSource &\n                                    \" materialCapture: \" & localVars.materialCapture &\n                                    \" sourceSqProtected: \" & localVars.sourceSqProtected &\n                                    \" sourceSqAttacked: \" & localVars.sourceSqAttacked &\n                                    \" sourceAttackerMaterial: \" & localVars.sourceAttackerMaterial &\n                                    \" sourceAttackerSqNames: \" & localVars.sourceAttackerSqNames &\n                                    \" targetSqProtectedByMe: \" & localVars.targetSqProtectedByMe &\n                                    \" targetSqAttackedByThem: \" & localVars.targetSqAttackedByThem &\n                                    \" targetAttackerMaterial: \" & localVars.targetAttackerMaterial\n                                })\n                            );\n\n                            Switch(true,\n                                localVars.sourceSqAttacked && localVars.materialCapture=0 && UDF_getSetSize(localVars.sourceAttackerSqNames)=1 &&\n                                UDF_isSqNumAttacked(\n                                    // make sure that somebody other than the source piece is attacking the attacker\n                                    UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                    UDF_sqNameToSqNum(localVars.sourceAttackerSqNames),\n                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                ) &&\n                                (!UDF_isSqNumProtected(\n                                    // make sure that somebody other than the source piece is attacking the attacker\n                                    UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                    UDF_sqNameToSqNum(localVars.sourceAttackerSqNames),\n                                    UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                )),\n                                    // USE CASE: face fear - trust another move will remove threat\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: face fear - trust another move will remove threat\" &\n                                            \" sourceAttackerSqNames: \" & localVars.sourceAttackerSqNames\n                                        })\n                                    );\n                                    0,\n\n                                localVars.sourceSqAttacked && (!localVars.sourceSqProtected) && (!localVars.targetSqAttackedByThem) && localVars.materialCapture=0,\n                                    // USE CASE: running from danger\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: running from danger\" &\n                                            \" bonus: \" & localVars.materialSource * 0.89\n                                        })\n                                    );\n                                    localVars.materialSource * 0.89,\n\n                                localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&\n                                Abs(localVars.sourceAttackerMaterial)<Abs(localVars.materialSource) &&\n                                (\n                                    (!localVars.targetSqAttackedByThem) ||\n                                    Abs(localVars.materialSource)<Abs(localVars.targetAttackerMaterial)\n                                ),\n                                    // USE CASE: walking from danger\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: walking from danger\" &\n                                            \" bonus: \" & localVars.materialSource + localVars.materialSource\n                                        })\n                                    );\n                                    localVars.materialSource + localVars.materialSource,\n\n                                localVars.sourceSqAttacked && (!localVars.sourceSqProtected) && localVars.materialCapture=0 &&\n                                localVars.targetSqAttackedByThem && localVars.targetSqProtectedByMe,\n                                    // USE CASE: switching danger - going to a protected square \n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: switching danger - going to a protected square \" &\n                                            \" bonus: \" & localVars.materialSource * 0.25\n                                        })\n                                    );\n                                    localVars.materialSource * 0.25,\n\n                                localVars.sourceSqAttacked && localVars.sourceSqProtected && localVars.materialCapture=0 &&\n                                Abs(localVars.sourceAttackerMaterial)>=Abs(localVars.materialSource),\n                                    // USE CASE: facing our fears\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: facing our fears\" &\n                                            \" bonus: \" & 0\n                                        })\n                                    );\n                                    0,\n\n                                (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && (!localVars.targetSqProtectedByMe),\n                                    // USE CASE: discourage moving into a bullseye\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: discourage moving into a bullseye\" &\n                                            \" bonus: \" & -localVars.materialSource\n                                        })\n                                    );\n                                    -localVars.materialSource,\n                                (!localVars.sourceSqAttacked) && localVars.materialCapture=0 && localVars.targetSqAttackedByThem && localVars.targetSqProtectedByMe,\n                                    // USE CASE: bullseye move depends upon players\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: bullseye move depends upon players\" &\n                                            \" bonus: \" &\n                                                If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                                                    // THEN - no bullseye during the opening\n                                                    0,\n                                                    // ELSE\n                                                    -(localVars.targetAttackerMaterial + localVars.materialSource) * 0.15\n                                                )\n                                        })\n                                    );\n                                    If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                                        // THEN - no bullseye during the opening\n                                        0,\n                                        // ELSE\n                                        -(localVars.targetAttackerMaterial + localVars.materialSource) * 0.15\n                                    ),\n                                localVars.sourceSqAttacked && (!localVars.targetSqAttackedByThem) && localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),\n                                    // USE CASE: capture hanging piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece while running\" &\n                                            \" bonus: \" & -localVars.materialCapture + localVars.materialSource\n                                        })\n                                    );\n                                    -localVars.materialCapture + localVars.materialSource,\n                                localVars.materialCapture<>0 && (!localVars.targetSqAttackedByThem),\n                                    // USE CASE: capture hanging piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece\" &\n                                            \" bonus: \" & -localVars.materialCapture\n                                        })\n                                    );\n                                    -localVars.materialCapture,\n                                localVars.materialCapture<>0 && localVars.targetSqAttackedByThem &&\n                                Abs(localVars.materialCapture)>=Abs(localVars.materialSource),\n                                    // USE CASE: capture protected piece\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" USE CASE: capture hanging piece\" &\n                                            \" bonus: \" & -(localVars.materialCapture + localVars.materialSource)\n                                        })\n                                    );\n                                    -(localVars.materialCapture + localVars.materialSource),\n\n                                // default\n                                If(gblPF_DEBUG_EVAL,\n                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                        \" USE CASE: default\" &\n                                        \" bonus: 0\"\n                                    })\n                                );\n                                0\n                            )\n                        ),\n\n                    heuristic15:\n                        If(!(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING),\n                            // THEN\n                            Sum(\n                                // are we capturing one of their hanging pieces ?\n                                If((!IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareName)) &&\n                                    theNodes.current.inactiveColorMoveRecord.captureSquareName in theData.evalData.theirHangingSquaresSet,\n                                    // THEN\n                                    If(gblPF_DEBUG_EVAL,\n                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                            \" fCE_800(): heuristic15 capturing a hanging piece\"\n                                        })\n                                    );\n                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,50,-50),\n                                    // ELSE\n                                    0\n                                ),\n                                // are we reducing the number of our hanging pieces ?\n                                With(\n                                    {\n                                        myHangingSquaresSet: UDF_getHangingSquareNamesSet(theNodes.current.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN))\n                                    } As v,\n\n                                    If(UDF_getSetSize(v.myHangingSquaresSet)<UDF_getSetSize(theData.evalData.myHangingSquaresSet),\n                                        // THEN\n                                        If(gblPF_DEBUG_EVAL,\n                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                \" fCE_800(): heuristic15 reducing number of hanging pieces\" & \n                                                \" prev hanging set size: \" & v.myHangingSquaresSet &\n                                                \" new hanging set size: \" & theData.evalData.myHangingSquaresSet\n                                            })\n                                        );\n                                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,35,-35),\n                                        // ELSE\n                                        0\n                                    )\n                                ),\n                                // look for forks\n                                With(\n                                    {\n                                        gettingForkedPieces:   If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,BLACK_PIECES,WHITE_PIECES),\n                                        forkingPieces:         If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                    } As forkPieces,\n\n                                    With(\n                                        {\n                                            gettingForkedSet:   UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.gettingForkedPieces),\n                                            forkingSet:         UDF_occupiedSqNamesSet(theNodes.current.postMoveBoard, UNIVERSAL_SQNAMES_SET, forkPieces.forkingPieces)\n                                        } As forkSets,\n                                        \n                                        With(\n                                            {\n                                                targetTargetsSet:\n                                                    // get only the eligibleSqName column\n                                                    UDF_createSqNamesSet(\n                                                        Concat(\n                                                            ShowColumns(\n                                                                Filter(colPF_LEGAL_MOVES,\n                                                                    sqNum=theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                    pieceUpper=\n                                                                        If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\",\n                                                                            // THEN - maintain the case sensitivity for PAWNs\n                                                                            theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier,\n                                                                            // ELSE\n                                                                            Upper(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier)\n                                                                        ),\n                                                                    eligibleSqName in forkSets.gettingForkedSet,\n                                                                    UDF_getSetSize(  \n                                                                        UDF_getSetIntersection(\n                                                                            slideOvers,\n                                                                            UDF_getSetUnion(forkSets.forkingSet,forkSets.gettingForkedSet)\n                                                                        )\n                                                                    )=0 // no blockers in the sliderovers (or no sliderovers at all) results in a \"true\"\n                                                                ), eligibleSqName\n                                                            ), eligibleSqName, \" \"\n                                                        )\n                                                    ),\n                                                targetIsAttacked:\n                                                    UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard, \n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    ),\n                                                targetIsProtected:\n                                                    UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard, \n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    )\n                                            } As targetData,\n\n                                            If(gblPF_DEBUG_EVAL,\n                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                    \" fCE_800(): heuristic15\" & \n                                                    \" gettingForkedSet: \" & forkSets.gettingForkedSet &\n                                                    \" forkingSet: \" & forkSets.forkingSet &\n                                                    \" targetTargetsSet: \" & targetData.targetTargetsSet &\n                                                    \" target IsAttacked?: \" & targetData.targetIsAttacked\n                                                })\n                                            );\n                                            If(targetData.targetIsAttacked && (!targetData.targetIsProtected),\n                                                // THEN\n                                                0,\n\n                                                // ELSE\n                                                With(\n                                                    {\n                                                        protectedTargetTargetsCount:\n                                                            Sum(\n                                                                ForAll(\n                                                                    Split(targetData.targetTargetsSet, \" \") As theTargets,\n\n                                                                    If(\n                                                                        UDF_isSqNumProtected(\n                                                                            theNodes.current.postMoveBoard,\n                                                                            UDF_sqNameToSqNum(theTargets.Value),\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                                        ),\n                                                                        // THEN\n                                                                        1,\n\n                                                                        // ELSE\n                                                                        0\n                                                                    )\n                                                                ), Value\n                                                            )\n                                                    } As counts,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_800(): DEBUG heuristic15\" & \n                                                            \" protectedTargetTargetsCount: \" & counts.protectedTargetTargetsCount\n                                                        })\n                                                    );\n\n                                                    If(UDF_getSetSize(targetData.targetTargetsSet)<=1,\n                                                        // THEN - no fork\n                                                        0,\n\n                                                        // ELSE - might be a fork worth counting\n                                                        With(\n                                                            {\n                                                                sourceValue: \n                                                                    UDF_minMaterialCentipawnValueFromSet(\n                                                                        theNodes.current.preMoveBoard, \n                                                                        theNodes.current.inactiveColorMoveRecord.sourceSquareName,\n                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                    ),\n                                                                targetValue: \n                                                                    -UDF_minMaterialCentipawnValueFromSet(\n                                                                        theNodes.current.postMoveBoard, \n                                                                        targetData.targetTargetsSet,\n                                                                        UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                    )\n                                                            } As theValues,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_800(): DEBUG heuristic15\" & \n                                                                    \" source: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareName &\n                                                                    \" value: \" & theValues.sourceValue &\n                                                                    \" target: \" & targetData.targetTargetsSet &\n                                                                    \" value: \" & theValues.targetValue\n                                                                })\n                                                            );\n                                                            If(Abs(theValues.targetValue) < Abs(theValues.sourceValue),\n                                                                0,\n                                                                theValues.targetValue * If(targetData.targetIsAttacked,0.5,0.75)\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                ),\n                                // look for skewers\n                                Switch(true,\n                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"R\",\n                                        Sum(\n                                            ForAll(\n                                                Sequence(4, 1, 2) As theDir,\n                                                With(\n                                                    {\n                                                        bits:   UDF_getBitsAtSqNum(\n                                                                    theNodes.current.postMoveBoard, \n                                                                    UDF_getSqNumRelativeToSqNum(\n                                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                        UDF_getDirX(theDir.Value),\n                                                                        UDF_getDirY(theDir.Value)\n                                                                    ), \n                                                                    theDir.Value, \n                                                                    7\n                                                                )\n                                                    } As v,\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_800(): heuristic15 looking for a skewer\" &\n                                                            \" source piece: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier &\n                                                            \" v.bits: \" & v.bits &\n                                                            \" theDir: \" & theDir.Value\n                                                        })\n                                                    );\n                                                    Switch(true,\n                                                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                                                            // THEN\n                                                            IsMatch(\n                                                                v.bits, \n                                                                \"#{0,6}k#{0,6}q\",\n                                                                MatchOptions.BeginsWith\n                                                            ),\n                                                            // ELSE\n                                                            IsMatch(\n                                                                v.bits, \n                                                                \"#{0,6}K#{0,6}Q\",\n                                                                MatchOptions.BeginsWith\n                                                            )\n                                                        ),\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_800(): heuristic15 skewer detected\" &\n                                                                    \" source piece: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier &\n                                                                    \" v.bits: \" & v.bits &\n                                                                    \" theDir: \" & theDir.Value\n                                                                })\n                                                            );\n                                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,350,-350),\n                                                        // default\n                                                        0\n                                                    )\n                                                )\n                                            ), Value\n                                        ),\n                                    theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"B\",\n                                        Sum(\n                                            ForAll(\n                                                Sequence(4, 2, 2) As theDir,\n                                                With(\n                                                    {\n                                                        bits:   UDF_getBitsAtSqNum(\n                                                                    theNodes.current.postMoveBoard, \n                                                                    UDF_getSqNumRelativeToSqNum(\n                                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                        UDF_getDirX(theDir.Value),\n                                                                        UDF_getDirY(theDir.Value)\n                                                                    ), \n                                                                    theDir.Value, \n                                                                    7\n                                                                )\n                                                    } As v,\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_800(): heuristic15 looking for a skewer\" &\n                                                            \" source piece: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier &\n                                                            \" v.bits: \" & v.bits &\n                                                            \" theDir: \" & theDir.Value\n                                                        })\n                                                    );\n                                                    Switch(true,\n                                                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                                                            // THEN\n                                                            IsMatch(\n                                                                v.bits, \n                                                                \"#{0,6}k#{0,6}[qr]\",\n                                                                MatchOptions.BeginsWith\n                                                            ),\n                                                            // ELSE\n                                                            IsMatch(\n                                                                v.bits, \n                                                                \"#{0,6}K#{0,6}[QR]\",\n                                                                MatchOptions.BeginsWith\n                                                            )\n                                                        ),\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_800(): heuristic15 skewer detected\" &\n                                                                    \" source piece: \" & theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier &\n                                                                    \" v.bits: \" & v.bits &\n                                                                    \" theDir: \" & theDir.Value\n                                                                })\n                                                            );\n                                                            If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,250,-250),\n                                                        // default\n                                                        0\n                                                    )\n                                                )\n                                            ), Value\n                                        ),\n                                    // default\n                                    0\n                                )\n                            ),\n\n                            // ELSE\n                            0\n                        ),\n\n                    heuristic16:\n                        If(theData.evalData.gamePhasePreMove=GAME_PHASE_OPENING,\n                            // THEN - still in GAME_PHASE_OPENING\n                            0,\n\n                            // ELSE - do END GAME analysis\n                            With(\n                                {\n                                    totalBonus:\n                                        Sum(\n                                            // Sum: Push Pawns forward - push the pawns forward (until we have enough Qs) - is this a pawn move ?\n                                            If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_countPiecesOnBoard(theNodes.current.preMoveBoard, \"Q\")<3,\n                                                // THEN - push the pawn and bump up the promotion to a Q\n                                                If(\n                                                    (IsBlank(theNodes.current.inactiveColorMoveRecord.promoteTo) || theNodes.current.inactiveColorMoveRecord.promoteTo in \"Q\") &&\n                                                    !UDF_isSqNumAttacked(\n                                                        theNodes.current.postMoveBoard,\n                                                        theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.postMoveFEN)\n                                                    ),\n                                                    // THEN\n                                                    If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                                                        UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName),\n                                                        8 - UDF_getRankFromSqName(theNodes.current.inactiveColorMoveRecord.targetSquareName)\n                                                     ) * RandBetween(8,21) + If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0),\n\n                                                    // ELSE\n                                                    If(UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,RandBetween(100,200),0)\n                                                ),\n                                                // ELSE\n                                                If(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"P\" && UDF_FEN_TO_HALFMOVE_COUNT(theNodes.current.preMoveFEN)>10,\n                                                    RandBetween(100,200),\n                                                    0\n                                                )\n                                            ),\n\n                                            // Sum: trapping the king\n                                            With(\n                                                {\n                                                    sqNum: // get the square their KING is on\n                                                        UDF_SearchBoardForPiece(theNodes.current.preMoveBoard, UDF_getICPieceABBR(theNodes.current.preMoveFEN, \"k\"))\n                                                } As theKing,\n\n                                                If(gblPF_DEBUG_EVAL,\n                                                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                        \" fCE_800(): DEBUG heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" \n                                                    })\n                                                );\n\n                                                With(\n                                                    {\n                                                        adjSquaresSet:  UDF_createSqNamesSet(UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)),\n                                                        noKingPreMoveBoard: UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        noKingPostMoveBoard:    UDF_setBitAtSqNum(theNodes.current.postMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum),\n                                                        // remove the moving piece so that we can determine if we can move to an adjacent protected square\n                                                        noKingNoPiecePostMoveBoard:\n                                                            UDF_setBitAtSqNum(\n                                                                UDF_setBitAtSqNum(theNodes.current.postMoveBoard,\n                                                                    EMPTY_FILLER_ABBR,\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum\n                                                                ),\n                                                                EMPTY_FILLER_ABBR,\n                                                                theKing.sqNum\n                                                            ),\n                                                        adjBlockedSquares:\n                                                            UDF_occupiedSqNamesSet(\n                                                                UDF_setBitAtSqNum(theNodes.current.preMoveBoard,EMPTY_FILLER_ABBR,theKing.sqNum), \n                                                                UDF_createSqNamesSet(\n                                                                    UDF_sqNumToAdjacentSqNamesSet(theKing.sqNum) & \" \" &  UDF_sqNumToSqName(theKing.sqNum)\n                                                                ),\n                                                                If(UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,WHITE_PIECES,BLACK_PIECES)\n                                                            )\n                                                    } As nextToKing,\n\n                                                    If(gblPF_DEBUG_EVAL,\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" fCE_800(): heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                            \" adjSquaresSet: \" & nextToKing.adjSquaresSet &\n                                                            \" adjSquaresSet BLOCKED: \" & nextToKing.adjBlockedSquares\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" premove no king board: \" & nextToKing.noKingPreMoveBoard\n                                                        });\n                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                            \" postmove no king board: \" & nextToKing.noKingPostMoveBoard\n                                                        });\n                                                    );\n\n                                                    With(\n                                                        {\n                                                            adjSquaresAttackedPreMove:\n                                                                UDF_createSqNamesSet(\n                                                                    Concat(\n                                                                        ForAll(\n                                                                            Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                            If(gblPF_DEBUG_EVAL,\n                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                    \" fCE_800(): DEBUG heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                    \" premove AttackerSet: \" &\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPreMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                })\n                                                                            );\n\n                                                                            If(\n                                                                                UDF_getSetSize(\n                                                                                    UDF_getAttackerSqNamesSet(\n                                                                                        nextToKing.noKingPreMoveBoard,\n                                                                                        UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                    )\n                                                                                )>0,\n                                                                                adjSqName.Value, \"\"\n                                                                            )\n                                                                        ), Value, \" \"\n                                                                    )\n                                                                ),\n                                                            adjSquaresAttackedPostMove:\n                                                                UDF_createSqNamesSet(\n                                                                    Concat(\n                                                                        ForAll(\n                                                                            Split(nextToKing.adjSquaresSet, \" \") As adjSqName,\n\n                                                                            If(gblPF_DEBUG_EVAL,\n                                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                                    \" fCE_800(): heuristic16 adjSqName.Value: \" & adjSqName.Value &\n                                                                                    \" postmove AttackerSet: \" &\n                                                                                        UDF_getAttackerSqNamesSet(\n                                                                                            nextToKing.noKingPostMoveBoard,\n                                                                                            UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                        )\n                                                                                })\n                                                                            );\n\n                                                                            If(\n                                                                                UDF_getSetSize(\n                                                                                    UDF_getAttackerSqNamesSet(\n                                                                                        nextToKing.noKingPostMoveBoard,\n                                                                                        UDF_sqNameToSqNum(adjSqName.Value),\n                                                                                        UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                                    )\n                                                                                )>0,\n                                                                                adjSqName.Value, \"\"\n                                                                            )\n                                                                        ), Value, \" \"\n                                                                    )\n                                                                ),\n                                                            isTargetSquareProtectedByMe:\n                                                                UDF_isSqNumProtected(\n                                                                    nextToKing.noKingNoPiecePostMoveBoard,\n                                                                    theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                    UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                ),\n                                                            numTargetSquareAttackedByThem:\n                                                                If(theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet,\n                                                                    // THEN\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingNoPiecePostMoveBoard,\n                                                                            theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                    ),\n\n                                                                    // ELSE\n                                                                    UDF_getSetSize(\n                                                                        UDF_getAttackerSqNamesSet(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theNodes.current.inactiveColorMoveRecord.targetSquareNum,\n                                                                            UDF_FEN_TO_INACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )\n                                                                    )\n                                                                )\n                                                        } As attackData,\n\n                                                        If(gblPF_DEBUG_EVAL,\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_800(): heuristic16 theKing.sqNum: \" & UDF_sqNumToSqName(theKing.sqNum) & \"(\" & theKing.sqNum & \")\" &\n                                                                \" adjSquaresAttackedPreMove: \" & attackData.adjSquaresAttackedPreMove &\n                                                                \" adjSquaresAttackedPostMove: \" & attackData.adjSquaresAttackedPostMove &\n                                                                \" isTargetSquareProtectedByMe: \" & attackData.isTargetSquareProtectedByMe &\n                                                                \" numTargetSquareAttackedByThem: \" & attackData.numTargetSquareAttackedByThem\n                                                            });\n                                                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                \" fCE_800(): heuristic16\" &\n                                                                \" adj attacked or blocked: \" & UDF_getSetUnion(attackData.adjSquaresAttackedPostMove, nextToKing.adjBlockedSquares)\n                                                            });\n                                                        );\n\n                                                        With(\n                                                            {\n                                                                preMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPreMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                postMove:\n                                                                    If(\n                                                                        UDF_countSqNumAttacks(\n                                                                            nextToKing.noKingPostMoveBoard,\n                                                                            theKing.sqNum,\n                                                                            UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)\n                                                                        )>0,\n                                                                        true,false\n                                                                    ),\n                                                                numAdjAttackedOrBlocked:\n                                                                    UDF_getSetSize(UDF_getSetUnion(attackData.adjSquaresAttackedPostMove, nextToKing.adjBlockedSquares))\n                                                            } As theKingChecked,\n\n                                                            If(gblPF_DEBUG_EVAL,\n                                                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                    \" fCE_800(): heuristic16 preMove\" & \n                                                                    \" # of adj Squares: \" & UDF_getSetSize(nextToKing.adjSquaresSet) &\n                                                                    \" theKingChecked.preMove: \" & theKingChecked.preMove &\n                                                                    \" theKingChecked.postMove: \" & theKingChecked.postMove &\n                                                                    \" adjSquaresAttackedPreMove: \" & attackData.adjSquaresAttackedPreMove &\n                                                                    \" adjSquaresAttackedPostMove: \" & attackData.adjSquaresAttackedPostMove &\n                                                                    \" numAdjAttackedOrBlocked: \" & theKingChecked.numAdjAttackedOrBlocked\n                                                                })\n                                                            );\n                                                            Switch(true,\n                                                                (UDF_getSetSize(nextToKing.adjSquaresSet) - UDF_getSetSize(attackData.adjSquaresAttackedPostMove))=1 &&\n                                                                (!theKingChecked.postMove),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_800(): heuristic16 postmove stalemate detected \"\n                                                                        })\n                                                                    );\n                                                                    -1000,  // discourage the move\n                                                                theNodes.current.inactiveColorMoveRecord.targetSquareName in nextToKing.adjSquaresSet &&\n                                                                (\n                                                                    attackData.numTargetSquareAttackedByThem>0 || // somebody can get me\n                                                                    (attackData.numTargetSquareAttackedByThem=0 && (!attackData.isTargetSquareProtectedByMe)) // king can get me\n                                                                ),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_800(): heuristic16 adjacent target square is not safe\"\n                                                                        })\n                                                                    );\n                                                                    -50,\n                                                                attackData.numTargetSquareAttackedByThem>0,\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" fCE_800(): heuristic16 target square is not safe\"\n                                                                        })\n                                                                    );\n                                                                    0,\n\n                                                                theKingChecked.numAdjAttackedOrBlocked>=UDF_getSetSize(nextToKing.adjSquaresSet) && theKingChecked.postMove,\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" checkmate detected FEN: \" & theNodes.current.preMoveFEN\n                                                                        })\n                                                                    );\n                                                                    10000, // strongly encourage the move\n                                                                        \n                                                                UDF_getSetSize(attackData.adjSquaresAttackedPostMove)>UDF_getSetSize(attackData.adjSquaresAttackedPreMove),\n                                                                    If(gblPF_DEBUG_EVAL,\n                                                                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                                                                            \" detected increase in adj squares attacked BONUS:\" &\n                                                                            (\n                                                                                UDF_getSetSize(attackData.adjSquaresAttackedPostMove) - \n                                                                                UDF_getSetSize(attackData.adjSquaresAttackedPreMove)\n                                                                            ) * 21\n                                                                        })\n                                                                    );\n                                                                    (\n                                                                        UDF_getSetSize(attackData.adjSquaresAttackedPostMove) - \n                                                                        UDF_getSetSize(attackData.adjSquaresAttackedPreMove)\n                                                                    ) * 21,\n                                                                // default\n                                                                0\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            ),\n\n                                            // Sum: TBD...\n                                            0\n                                        )\n                                } As totalBonus,\n\n                                If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,totalBonus.totalBonus,-totalBonus.totalBonus)\n                            )\n                        ),\n\n                    heuristic18:\n                        // add some order\n                        If(UDF_FEN_TO_ACTIVE_COLOR(theNodes.current.preMoveFEN)=WHITE,\n                            // THEN\n                            Switch(theData.evalData.gamePhasePreMove,\n                                GAME_PHASE_OPENING,\n                                    With(\n                                        {\n                                            inBook:    LookUp(Split(OPENING_BOOK_WHITE, \" \"),Value=theNodes.current.inactiveColorMoveRecord.san)\n                                        } As theOpening,\n                                        If(IsBlank(theOpening.inBook),\n                                            // THEN - not a book move\n                                            Switch(true,\n                                                theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\" &&\n                                                Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"128\",\n                                                    RandBetween(0,15),\n                                                // default\n                                                0\n                                            ),\n                                            // ELSE - the move is in the book\n                                            RandBetween(15,35)\n                                        )\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        // encourage a castle\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(30,45),\n                                        // encourage a move out of starting position\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QRBN\" &&\n                                        UDF_isPieceinStartingPosition(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier, theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                            RandBetween(10,25),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\" &&\n                                        (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture\n                                            RandBetween(0,15),\n\n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            ),\n\n                            // ELSE\n                            Switch(theData.evalData.gamePhasePreMove,\n                                GAME_PHASE_OPENING,\n                                    With(\n                                        {\n                                            inBook:    LookUp(Split(OPENING_BOOK_BLACK, \" \"),Value=theNodes.current.inactiveColorMoveRecord.san)\n                                        } As theOpening,\n                                        If(IsBlank(theOpening.inBook),\n                                            // THEN - not a book move\n                                            Switch(true,\n                                                theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"BNP\" &&\n                                                Text(theNodes.current.inactiveColorMoveRecord.moveDirection) in \"456\",\n                                                    RandBetween(-15,0),\n                                                // default\n                                                0\n                                            ),\n                                            // ELSE - the move is in the book\n                                            RandBetween(-35,-15)\n                                        )\n                                    ),\n                                GAME_PHASE_MIDDLE,\n                                    Switch(true,\n                                        // encourage a castle\n                                        IsMatch(theNodes.current.inactiveColorMoveRecord.san, \"O-O\", MatchOptions.BeginsWith),\n                                            RandBetween(-45,-30),\n                                        // encourage a move out of starting position\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QRBN\" &&\n                                        UDF_isPieceinStartingPosition(theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier, theNodes.current.inactiveColorMoveRecord.sourceSquareNum),\n                                            RandBetween(-25,-10),\n                                        theNodes.current.inactiveColorMoveRecord.sourceSquareOccupier in \"QBNP\" &&\n                                        (IsBlank(theNodes.current.inactiveColorMoveRecord.captureSquareOccupier) || theNodes.current.inactiveColorMoveRecord.captureSquareOccupier=EMPTY_FILLER_ABBR), // don't randomly step into a bad capture\n                                            RandBetween(-15,0),\n                                        \n                                        // default\n                                        0\n                                    ),\n\n                                // default\n                                0\n                            )\n                        ),\n                    heuristic19:\n                        RandBetween(-8,8)\n\n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic15: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic15\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fCE_800(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fCE_800(): exiting\"})\n)\n\n",
        "Property": "fCE_800",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_800_preEvaluate(): entering\"\n    })\n);\n\n\nWith(\n    {\n        d0Node:         LookUp(colPF_MOVE_TREE, nodeDepth=0),\n        dynamicData:    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME)\n    } As theData,\n\n    UpdateIf(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME, {\n        evalData:   Patch(LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME).evalData, {\n                        theirHangingSquaresSet: UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_INACTIVE_COLOR(theData.d0Node.postMoveFEN)),\n                        myHangingSquaresSet:    UDF_getHangingSquareNamesSet(theData.d0Node.postMoveBoard, UDF_FEN_TO_ACTIVE_COLOR(theData.d0Node.postMoveFEN)),\n                        gamePhasePreMove:       comChessEngineFunctions.fME_getGamePhase(theData.d0Node.postMoveFEN) // D0 post move is D1 pre move...\n                    })\n    })\n);\n\nIf(gblPF_DEBUG_EVAL,\n    With(\n        LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n            \" comChessEngineFunctions.fCE_800_preEvaluate(): DEBUG\" &\n            \" myHangingSquaresSet: \" & theData.evalData.myHangingSquaresSet &\n            \" theirHangingSquaresSet: \" & theData.evalData.theirHangingSquaresSet\n        })\n    )\n);\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_800_preEvaluate(): exiting\"\n    })\n);\n",
        "Property": "fCE_800_preEvaluate",
        "RuleProviderType": "System"
      },
      {
        "Category": "Behavior",
        "InvariantScript": "If(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_800_postEvaluate(): entered\"\n    })\n);\n\n\n\n\n\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fCE_800_postEvaluate(): exiting\"\n    })\n);\n\n",
        "Property": "fCE_800_postEvaluate",
        "RuleProviderType": "System"
      }
    ]
  },
  "ComponentManifest": {
    "AllowAccessToGlobals": true,
    "AllowCustomization": true,
    "Description": "",
    "Name": "comChessEngineFunctions",
    "TemplateGuid": "8c2bb0b54c6149c580a48882153f6ad1"
  },
  "ComponentType": "CanvasComponent",
  "CustomGroupControlTemplateName": "",
  "CustomProperties": [
    {
      "Category": 2,
      "DisplayName": "fME_EvaluateMove",
      "Hidden": true,
      "Name": "fME_EvaluateMove",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_EvaluateMove_pNodeID",
            "Name": "fME_EvaluateMove_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "Node ID holding the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "Node ID holding the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaluate the move specified in the referenced node ID",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_100",
      "Hidden": true,
      "Name": "fCE_100",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_100_pNodeID",
            "Name": "fCE_100_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "random evaluate moves",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_200",
      "Hidden": true,
      "Name": "fCE_200",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_200_pNodeID",
            "Name": "fCE_200_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "capture whenever possible",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_300",
      "Hidden": true,
      "Name": "fCE_300",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_300_pNodeID",
            "Name": "fCE_300_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "nodeID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "nodeID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "A custom property",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_400",
      "Hidden": true,
      "Name": "fCE_400",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_400_pNodeID",
            "Name": "fCE_400_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "A custom property",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fME_getGamePhase",
      "Hidden": true,
      "Name": "fME_getGamePhase",
      "PropertyDataTypeKey": "Number",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_getGamePhase_pFEN",
            "Name": "fME_getGamePhase_pFEN",
            "PropertyDataTypeKey": "String",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "FEN to evaulate game phase on",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pFEN"
            },
            "Tooltip": "FEN to evaulate game phase on",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"String\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "determine if OPENING, MIDDLE, or END game",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fME_END_GAME",
      "Hidden": true,
      "Name": "fME_END_GAME",
      "PropertyDataTypeKey": "Number",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fME_END_GAME_pVersion",
            "Name": "fME_END_GAME_pVersion",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "API version",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pVersion"
            },
            "Tooltip": "API version",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          },
          {
            "DisplayName": "fME_END_GAME_pNodeID",
            "Name": "fME_END_GAME_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node containg the move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node containg the move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "evaulate move in END GAME",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_500",
      "Hidden": true,
      "Name": "fCE_500",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_500_pNodeID",
            "Name": "fCE_500_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "reference node ID",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "reference node ID",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "chess engine 500 level",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_600",
      "Hidden": true,
      "Name": "fCE_600",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_600_pNodeID",
            "Name": "fCE_600_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node to evalulate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node to evalulate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "chess engine move evalulator level 600",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_600_preEvaluate",
      "Hidden": true,
      "Name": "fCE_600_preEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "board evaluation prior to move evals",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_600_postEvaluate",
      "Hidden": true,
      "Name": "fCE_600_postEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "board evaluation after move evals",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_700",
      "Hidden": true,
      "Name": "fCE_700",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_700_pNodeID",
            "Name": "fCE_700_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node ID of move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node ID of move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "level 700 chess engine",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_700_preEvaluate",
      "Hidden": true,
      "Name": "fCE_700_preEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "level 700 pre evaluation",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_700_postEvaluate",
      "Hidden": true,
      "Name": "fCE_700_postEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "level 700 post evaluation",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_800",
      "Hidden": true,
      "Name": "fCE_800",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": [
          {
            "DisplayName": "fCE_800_pNodeID",
            "Name": "fCE_800_pNodeID",
            "PropertyDataTypeKey": "Number",
            "ScopeVariableInfo": {
              "DependencyType": "New",
              "Description": "node containing move to evaluate",
              "IsRequired": true,
              "ResolveExpands": false,
              "ResolveSelects": false,
              "ScopeVariableName": "pNodeID"
            },
            "Tooltip": "node containing move to evaluate",
            "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Number\",\"EnumString\":\"\",\"Type\":[]}}"
          }
        ]
      },
      "Tooltip": "level 800 of chess engine",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_800_preEvaluate",
      "Hidden": true,
      "Name": "fCE_800_preEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "logic to run before move evaluation",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    },
    {
      "Category": 2,
      "DisplayName": "fCE_800_postEvaluate",
      "Hidden": true,
      "Name": "fCE_800_postEvaluate",
      "PropertyDataTypeKey": "Void",
      "PropertyScopeKey": {
        "PropertyScopeRuleNamespaceKey": "4",
        "PropertyScopeRulesKey": []
      },
      "Tooltip": "logic to run after move evaluations",
      "Type": "{\"Version\":\"1.343\",\"Type\":{\"Name\":\"Root\",\"Kind\":\"Void\",\"EnumString\":\"\",\"Type\":[]}}"
    }
  ],
  "FirstParty": true,
  "Id": "http://microsoft.com/appmagic/Component",
  "IsComponentLocked": false,
  "IsComponentTemplate": true,
  "IsCustomGroupControlTemplate": false,
  "IsPcfControl": false,
  "IsPremiumPcfControl": false,
  "IsWidgetTemplate": false,
  "LastModifiedTimestamp": "638636000944174712",
  "Name": "8c2bb0b54c6149c580a48882153f6ad1",
  "OverridableProperties": {},
  "Version": "1.0"
}
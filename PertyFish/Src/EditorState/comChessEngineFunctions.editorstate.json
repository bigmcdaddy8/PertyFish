{
  "ControlStates": {
    "comChessEngineFunctions": {
      "AllowAccessToGlobals": true,
      "ControlPropertyState": [
        "Fill",
        "Height",
        "Width",
        "X",
        "Y",
        "ZIndex",
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "100",
          "InvariantPropertyName": "fME_EvaluateMove_pNodeID",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "",
          "InvariantPropertyName": "fME_EvaluateMove",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "",
          "InvariantPropertyName": "fME_Random",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "100",
          "InvariantPropertyName": "fME_Random_pNodeID",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "",
          "InvariantPropertyName": "fME_Maniacal",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "100",
          "InvariantPropertyName": "fME_Maniacal_pNodeID",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "100",
          "InvariantPropertyName": "fME_Preschool_pNodeID",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "",
          "InvariantPropertyName": "fME_Preschool",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "\nIf(gblPF_DEBUG_EVAL,\n    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n        \" comChessEngineFunctions.fME_Kindergarten(): entered pNodeID: \" & pNodeID\n    })\n);\n\nWith(\n    LookUp(colPF_DYNAMIC_DATA, dataName=DYNAMIC_DATA_PF_NAME) As theData,\n\n    With(\n        LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n        If(gblPF_DEBUG_EVAL,\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" move color: \" & UDF_FEN_TO_ACTIVE_COLOR(theCurrentNode.preMoveFEN) &\n                \" captureSquareOccupier: \" & theCurrentNode.inactiveColorMoveRecord.captureSquareOccupier\n            })\n        );\n\n        Patch(colPF_MOVE_TREE, First(Filter(colPF_MOVE_TREE, nodeID=pNodeID)), {\n            postMoveEvalRecord: \n                Patch(EVAL_RECORD_PF, {\n                    heuristic01:\n                        0,\n                    heuristic02:\n                        0,\n                    heuristic05:\n                        0,\n                    heuristic11:\n                        0,\n                    heuristic12:\n                        0,\n                    heuristic13:\n                        0,\n                    heuristic14:    \n                        0,\n                    heuristic16:\n                        0,\n                    heuristic17:\n                        0,\n                    heuristic18:\n                        0,\n                    // a pinch of randomness\n                    heuristic19:\n                        RandBetween(-25,25)  // centipawns \n                })\n        });\n\n        UpdateIf(colPF_MOVE_TREE, nodeID=pNodeID, {\n            postMoveEvalRecord: \n                Patch(LookUp(colPF_MOVE_TREE, nodeID=pNodeID).postMoveEvalRecord, {\n                    centipawn:\n                        With(\n                            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNodeUpdated,\n                            \n                            If(gblPF_DEBUG_EVAL,\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic01 (basic positioning) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic01\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic02 ME end game: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic02\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic05 (Hanging Piece Tactic) SUM BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic05\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic11 generic tactics BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic11\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic12 fork tactic BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic12\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic13 move to/from protection BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic13\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic14 castling BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic14\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic16 BNP moves in opening sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic16\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic17 passed PAWN BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic17\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic18 Post Square Table (PST) BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic18\n                                });\n                                Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") &\n                                    \" heuristic19 the God of Randomness BONUS/PENALTY sub-total: \" & theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                                })\n                            );\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic01 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic02 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic03 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic04 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic05 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic06 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic07 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic08 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic09 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic10 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic11 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic12 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic13 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic14 +\n                            // theCurrentNodeUpdated.postMoveEvalRecord.heuristic15 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic16 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic17 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic18 +\n                            theCurrentNodeUpdated.postMoveEvalRecord.heuristic19\n                        )\n                })\n        })\n    );\n\n    If(gblPF_DEBUG_EVAL,\n        With(\n            LookUp(colPF_MOVE_TREE, nodeID=pNodeID) As theCurrentNode,\n\n            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \n                \" fME_Kindergarten(): san: \" & theCurrentNode.inactiveColorMoveRecord.san &\n                \" pacn: \" & theCurrentNode.inactiveColorMoveRecord.pacn &\n                \" centipawn: \" & theCurrentNode.postMoveEvalRecord.centipawn\n            })\n        )\n    )\n);\n\nCollect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), \"mm/dd/yyyy hh:mm:ss.fff\") & \" fME_Kindergarten(): exiting\"});\n",
          "InvariantPropertyName": "fME_Kindergarten",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        "fME_Kindergarten_pNodeID",
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "\"Text\"",
          "InvariantPropertyName": "fME_getGamePhase_pFEN",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        },
        {
          "AFDDataSourceName": "",
          "AutoRuleBindingEnabled": false,
          "AutoRuleBindingString": "100",
          "InvariantPropertyName": "fME_getGamePhase",
          "IsLockable": false,
          "NameMapSourceSchema": "?"
        }
      ],
      "IsAutoGenerated": false,
      "IsComponentDefinition": true,
      "IsDataControl": false,
      "IsFromScreenLayout": false,
      "IsGroupControl": false,
      "IsLocked": false,
      "LayoutName": "",
      "MetaDataIDKey": "",
      "Name": "comChessEngineFunctions",
      "OptimizeForDevices": "Off",
      "ParentIndex": 0,
      "PersistMetaDataIDKey": false,
      "Properties": [
        {
          "Category": "Data",
          "PropertyName": "fME_EvaluateMove_pNodeID",
          "RuleProviderType": "System"
        },
        {
          "Category": "Data",
          "PropertyName": "fME_Random_pNodeID",
          "RuleProviderType": "System"
        },
        {
          "Category": "Data",
          "PropertyName": "fME_Maniacal_pNodeID",
          "RuleProviderType": "System"
        },
        {
          "Category": "Data",
          "PropertyName": "fME_Preschool_pNodeID",
          "RuleProviderType": "System"
        },
        {
          "Category": "Data",
          "PropertyName": "fME_Kindergarten_pNodeID",
          "RuleProviderType": "System"
        },
        {
          "Category": "Data",
          "PropertyName": "fME_getGamePhase_pFEN",
          "RuleProviderType": "System"
        },
        {
          "Category": "Design",
          "PropertyName": "ZIndex",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Y",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "X",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Width",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Height",
          "RuleProviderType": "Unknown"
        },
        {
          "Category": "Design",
          "PropertyName": "Fill",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_Random",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_Maniacal",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_EvaluateMove",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_Preschool",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_Kindergarten",
          "RuleProviderType": "System"
        },
        {
          "Category": "Behavior",
          "PropertyName": "fME_getGamePhase",
          "RuleProviderType": "System"
        }
      ],
      "StyleName": "",
      "Type": "ControlInfo"
    }
  },
  "TopParentName": "comChessEngineFunctions"
}
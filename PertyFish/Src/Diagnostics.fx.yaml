Diagnostics As screen:

    conEntireScreenDiagnostics As groupContainer.manualLayoutContainer:
        Height: =Parent.Height
        Width: =Parent.Width
        ZIndex: =1

        lblUDFDiagnosticsResult As label:
            Font: =Font.'Courier New'
            Height: =40 * 3
            Size: =10
            Text: =lUDF_DIAGNOSTICS_RESULT
            VerticalAlign: =VerticalAlign.Top
            Width: =1000
            X: =btnRunUDFDiagnostics.X + btnRunUDFDiagnostics.Width + 10
            Y: =btnRunUDFDiagnostics.Y
            ZIndex: =1

        btnRunUDFDiagnostics As button:
            OnSelect: |
                =
                
                
                If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " btnRunUDFDiagnostics.OnSelect(): entered"
                        
                    })
                );
                
                UpdateContext({lTEST_FAILURE_DETECTED: false});
                UpdateContext({lUDF_DIAGNOSTICS_RESULT: "RUNNING..."});
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNumFromFileName(file:Text):Number=Find(file,"abcdefgh");
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNumFromFileName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                    UpdateContext({lTEST_FILE_NAME: "c"});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 3});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getFileNumFromFileName(lTEST_FILE_NAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNameFromFileNum(fileNum:Number):Text=Index(["a","b","c","d","e","f","g","h"], fileNum).Value;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNumFromFileName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                    UpdateContext({lTEST_FILE_NUM: 3});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getFileNameFromFileNum(lTEST_FILE_NUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNameFromSqName(sqName:Text):Text=Left(sqName,1);
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNameFromSqName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getFileNameFromSqName(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNumFromSqName(sqName:Text):Number=Find(UDF_getFileNameFromSqName(sqName),"abcdefgh");
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNumFromSqName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 3});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getFileNumFromSqName(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNumFromSqNum(sqNum:Number):Number=UDF_getFileNumFromSqName(UDF_sqNumToSqName(sqNum));
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNumFromSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 3});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getFileNumFromSqNum(lTEST_REFERENCE_SQNUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getFileNameFromSqNum(sqNum:Number):Text=Index(Split("abcdefgh",""),Mod(sqNum,8)+1).Value;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getFileNameFromSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getFileNameFromSqNum(lTEST_REFERENCE_SQNUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getRankFromSqName(sqName:Text):Number=Value(Right(Left(sqName,2),1));
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getRankFromSqName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 6});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getRankFromSqName(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getRankFromSqNum(sqNum:Number):Number=(8 - RoundDown(sqNum/8, 0));
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getRankFromSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 6});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getRankFromSqNum(lTEST_REFERENCE_SQNUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_sqNameToSqNum(sqName:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_sqNameToSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 18});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_sqNumToSqName(sqNum:Number):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_sqNumToSqName"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: 18});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c6"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_sqNumToSqName(lTEST_REFERENCE_SQNUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getSqNumRelativeToSqNum(refSqNum:Number,x:Number,y:Number):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getSqNumRelativeToSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 27});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getSqNumRelativeToSqNum(lTEST_REFERENCE_SQNUM, 1, -1)
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_sqNameNoPromo(sqName:Text):Text=Left(sqName,2);
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_sqNameNoPromo"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c6"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_sqNameNoPromo(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getPromo(sqName:Text):Text=If(Right(sqName,1) exactin "qrbn",Right(sqName,1),"");
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getPromo"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "q"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getPromo(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getSourceSqNamePACN(pacn:Text):Text=Left(pacn,2);
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getSourceSqNamePACN"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "c6"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getSourceSqNamePACN(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getTargetSqNamePACN(pacn:Text):Text=Right(Left(pacn,4),2);
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getTargetSqNamePACN"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "d5"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getTargetSqNamePACN(lTEST_REFERENCE_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_createPACN(sourceSqName:Text,targetSqName:Text):Text=sourceSqName & targetSqName;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_createPACN"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    //UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5q"});
                    UpdateContext({lTEST_PACN: "c6d5q"});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: lTEST_PACN});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_makeMovePACN(board:Text,pacn:Text):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_makeMovePACN"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "#######k#q#################p########################K###########"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_makeMovePACN(lTEST_BOARD, lTEST_PACN)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_PIECE_PLACEMENT(fen:Text):Text=Index(Split(fen, " "),1).Value;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_PIECE_PLACEMENT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "7k/1q1p4/8/8/8/8/4K3/8"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_FEN_TO_PIECE_PLACEMENT(lTEST_FEN)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_BOARD(fen:Text):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_BOARD"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "#######k#q#p########################################K###########"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_FEN_TO_BOARD(lTEST_FEN)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_BOARD_TO_FEN_PIECE_PLACEMENT(board:Text):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_BOARD_TO_FEN_PIECE_PLACEMENT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "7k/1q1p4/8/8/8/8/4K3/8"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_BOARD_TO_FEN_PIECE_PLACEMENT(lTEST_BOARD)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_ACTIVE_COLOR(fen:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_ACTIVE_COLOR"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: BLACK});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_FEN_TO_ACTIVE_COLOR(lTEST_FEN)
                    });
                
                    If(lTEST_ACTUAL_RESULT_NUMBER<>lTEST_EXPECTED_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_ACTUAL_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_EXPECTED_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_INACTIVE_COLOR(fen:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_INACTIVE_COLOR"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: WHITE});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_FEN_TO_INACTIVE_COLOR(lTEST_FEN)
                    });
                
                    If(lTEST_ACTUAL_RESULT_NUMBER<>lTEST_EXPECTED_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_ACTUAL_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_EXPECTED_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_CASTLE_RIGHTS_ALL_TEXT(fen:Text):Text=Index(Split(fen, " "),3).Value;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_CASTLE_RIGHTS_ALL_TEXT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "-"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_FEN_TO_CASTLE_RIGHTS_ALL_TEXT(lTEST_FEN)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_BOOL(fen:Text,color:Number,side:Text):Boolean=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_BOOL"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_BOOLEAN: false});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_BOOLEAN:
                        UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_BOOL(lTEST_FEN, BLACK, "Q")
                    });
                
                    If(lTEST_EXPECTED_RESULT_BOOLEAN<>lTEST_ACTUAL_RESULT_BOOLEAN,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_BOOLEAN &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_BOOLEAN
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_TEXT(fen:Text,color:Number,side:Text):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_TEXT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "-"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_FEN_TO_CASTLE_RIGHTS_SPECIFIC_TEXT(lTEST_FEN, BLACK, "Q")
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_ENPASSANT_SQNAME(fen:Text):Text=Index(Split(fen, " "),4).Value;
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_ENPASSANT_SQNAME"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "-"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_FEN_TO_ENPASSANT_SQNAME(lTEST_FEN)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_HALFMOVE_COUNT(fen:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_HALFMOVE_COUNT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 0});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_FEN_TO_HALFMOVE_COUNT(lTEST_FEN)
                    });
                
                    If(lTEST_ACTUAL_RESULT_NUMBER<>lTEST_EXPECTED_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_ACTUAL_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_EXPECTED_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_FEN_TO_FULLMOVE_COUNT(fen:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_FEN_TO_FULLMOVE_COUNT"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 1});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_FEN_TO_FULLMOVE_COUNT(lTEST_FEN)
                    });
                
                    If(lTEST_ACTUAL_RESULT_NUMBER<>lTEST_EXPECTED_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_ACTUAL_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_EXPECTED_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_CREATE_CASTLE_RIGHTS(wks:Text,wqs:Text,bks:Text,bqs:Text):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_CREATE_CASTLE_RIGHTS"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    //UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "-"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_CREATE_CASTLE_RIGHTS("-", "-", "-", "-")
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_CREATE_FEN(board:Text,activeColor:Number,castleAvail:Text,enpassantSqName:Text,halfmoveClock:Number,fullmoveClock:Number):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_CREATE_FEN"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: lTEST_FEN});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_CREATE_FEN(lTEST_BOARD, BLACK, "-", "-", 0, 1)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_SearchBoardForPiece(board:Text,piece:Text):Number=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_SearchBoardForPiece"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    //UpdateContext({lTEST_REFERENCE_SQNAME: "c6d5q"});
                    //UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: 9});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_SearchBoardForPiece(lTEST_BOARD,"q")
                    });
                
                    If(lTEST_ACTUAL_RESULT_NUMBER<>lTEST_EXPECTED_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_ACTUAL_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_EXPECTED_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    // UDF_getBitAtSqNum(board:Text,sqNum:Number):Text=
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getBitAtSqNum"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "b7"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    //UpdateContext({lTEST_REFERENCE_SOURCE_SQNAME: "d7"});
                    //UpdateContext({lTEST_REFERENCE_TARGET_SQNAME: "d5"});
                    //UpdateContext({lTEST_PACN: UDF_createPACN(lTEST_REFERENCE_SOURCE_SQNAME, lTEST_REFERENCE_TARGET_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "q"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getBitAtSqNum(lTEST_BOARD, lTEST_REFERENCE_SQNUM)
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                /*
                        UDF_getBitAtSqNum(board:Text,sqNum:Number):Text=
                            If(sqNum<0 || sqNum>=EMPTY_SQUARE_NUM,
                                // THEN - handle the empty square number 
                                EMPTY_ABBR,
                        
                                // ELSE - get the value from the board
                                Right(Left(board,sqNum+1),1)
                            );
                        
                        UDF_getBitsAtSqNum(board:Text,startingSqNum:Number,direction:Number,numberOfSquares:Number):Text=
                            If(startingSqNum<0 || startingSqNum>=EMPTY_SQUARE_NUM,
                                "",
                                Concat(
                                    ForAll(
                                        Sequence(numberOfSquares,0) As theStep,
                        
                                        Switch(true,
                                            direction=N,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,0,theStep.Value)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,0,theStep.Value))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,0,theStep.Value))
                                                    )
                                                ),
                                            direction=NE,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,theStep.Value)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,theStep.Value))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,theStep.Value))
                                                    )
                                                ),
                                            direction=E,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,0)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,0))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,0))
                                                    )
                                                ),
                                            direction=SE,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,-theStep.Value)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,-theStep.Value))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,theStep.Value,-theStep.Value))
                                                    )
                                                ),
                                            direction=S,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,0,-theStep.Value)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,0,-theStep.Value))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,0,-theStep.Value))
                                                    )
                                                ),
                                            direction=SW,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,-theStep.Value)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,-theStep.Value))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,-theStep.Value))
                                                    )
                                                ),
                                            direction=W,
                                                If(UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,0)=EMPTY_SQUARE_NUM,
                                                    "",
                                                    If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,0))=EMPTY_ABBR,
                                                        EMPTY_FILLER_ABBR,
                                                        UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,0))
                                                    )
                                                ),
                        
                                            // default - direction=NW
                                            If(UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,theStep.Value)=EMPTY_SQUARE_NUM,
                                                "",
                                                If(UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,theStep.Value))=EMPTY_ABBR,
                                                    EMPTY_FILLER_ABBR,
                                                    UDF_getBitAtSqNum(board,UDF_getSqNumRelativeToSqNum(startingSqNum,-theStep.Value,theStep.Value))
                                                )
                                            )
                                        )
                                    ),
                                    Value,
                                    ""
                                )
                            );
                        UDF_setBitAtSqNum(board:Text,piece:Text,sqNum:Number):Text=
                            If(piece=EMPTY_ABBR,
                                Left(board,Max(0,sqNum)) & EMPTY_FILLER_ABBR & Right(board,Min(63,63-sqNum)),
                                Left(board,Max(0,sqNum)) & piece & Right(board,Min(63,63-sqNum))
                            );
                        
                        UDF_getEPCaptureSqNum(fen:Text):Number=
                            UDF_getSqNumRelativeToSqNum(
                                UDF_sqNameToSqNum(UDF_FEN_TO_ENPASSANT_SQNAME(fen)),
                                0,
                                If(UDF_FEN_TO_ACTIVE_COLOR(fen)=WHITE,-1,1)
                            );
                        
                        UDF_PieceToColor(piece:Text):Number=
                            If(piece=EMPTY_ABBR || piece=EMPTY_FILLER_ABBR,
                                // THEN there is no piece return NO_COLOR
                                NO_COLOR,
                        
                                // ELSE
                                If(piece exactin "KQRBNP", 
                                    // THEN
                                    WHITE,
                        
                                    // ELSE
                                    If(piece exactin "kqrbnp",
                                        // THEN
                                        BLACK,
                        
                                        // ELSE
                                        NO_COLOR
                                    )
                                )
                            );
                        UDF_ColorToStr(color:Number):Text=If(color=WHITE,"White","Black");
                        UDF_getOppositeColor(color:Number):Number=If(color=WHITE,BLACK,WHITE);
                        
                        UDF_getACPieceABBR(fen:Text,piece:Text):Text=
                            If(UDF_FEN_TO_ACTIVE_COLOR(fen)=WHITE,
                                // THEN
                                Upper(piece),
                        
                                // ELSE
                                Lower(piece)
                            );
                        UDF_getICPieceABBR(fen:Text,piece:Text):Text=
                            If(UDF_FEN_TO_ACTIVE_COLOR(fen)=WHITE,
                                // THEN
                                Lower(piece),
                        
                                // ELSE
                                Upper(piece)
                            );
                        
                        UDF_isPieceAC(fen:Text,piece:Text):Boolean=
                            If(UDF_PieceToColor(piece)=UDF_FEN_TO_ACTIVE_COLOR(fen),true,false);
                        
                        UDF_PieceToIcon(piece:Text):Text=
                            Switch(true,
                                piece="K",  WHITE_KING_ICON,
                                piece="Q",  WHITE_QUEEN_ICON,
                                piece="R",  WHITE_ROOK_ICON,
                                piece="B",  WHITE_BISHOP_ICON,
                                piece="N",  WHITE_KNIGHT_ICON,
                                piece="P",  WHITE_PAWN_ICON,
                                piece="k",  BLACK_KING_ICON,
                                piece="q",  BLACK_QUEEN_ICON,
                                piece="r",  BLACK_ROOK_ICON,
                                piece="b",  BLACK_BISHOP_ICON,
                                piece="n",  BLACK_KNIGHT_ICON,
                                piece="p",  BLACK_PAWN_ICON,
                                EMPTY_ICON
                            );
                        
                        UDF_getPieceMaterialValue(piece:Text):Number=
                            Switch(true,
                                piece="K",  100,
                                piece="Q",  9,
                                piece="R",  5,
                                piece="B",  3,
                                piece="N",  3,
                                piece="P",  1,
                                piece="k",  -100,
                                piece="q",  -9,
                                piece="r",  -5,
                                piece="b",  -3,
                                piece="n",  -3,
                                piece="p",  -1,
                                0
                            );
                        
                        UDF_getPieceCentipawnMaterialValue(piece:Text, filter:Text):Number=
                            Switch(true,
                                piece="K" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="Q" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="R" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="B" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="N" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="P" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="k" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="q" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="r" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="b" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="n" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                piece="p" && piece exactin filter,  UDF_getPieceMaterialValue(piece) * 100,
                                0
                            );
                        
                        UDF_calcCentipawnMaterialValue(fen:Text,filter:Text):Number=
                            Sum(
                                ForAll(
                                    Split(UDF_FEN_TO_PIECE_PLACEMENT(fen), "") As thePiece,
                        
                                    UDF_getPieceCentipawnMaterialValue(thePiece.Value, filter)
                                ),
                                Value
                            );
                        
                        UDF_isPathClear(fen:Text, sqNum:Number, distance:Number, slideOvers:Text):Boolean=
                            With(
                                {
                                    board: UDF_FEN_TO_BOARD(fen)
                                } As theBoard,
                            
                                Switch(true,
                                    IsBlank(UDF_getBitAtSqNum(theBoard.board,sqNum)),  false,
                                    UDF_getBitAtSqNum(theBoard.board,sqNum) exactin UDF_getACPieceABBR(fen,"KN"), true,
                                    distance=1, true,
                                    !IsMatch(
                                        Concat(
                                            ForAll (
                                                Split(slideOvers, " ") As aSliderOver,
                            
                                                If(UDF_getBitAtSqNum(theBoard.board, UDF_sqNameToSqNum(aSliderOver.Value))<>EMPTY_FILLER_ABBR,
                                                    "BLOCKED",
                                                    ""
                                                )
                                            ),Value,""
                                        ), "BLOCKED", MatchOptions.Contains
                                    ), true,
                            
                                    // default
                                    false
                                )
                            );
                        
                        UDF_isSqNumAttackedBySqNum(attackingPiece:Text, attackingSqNum:Number, attackedSqNum:Number):Boolean=
                            With(
                                LookUp(colPF_LEGAL_MOVES,
                                    sqNum=attackingSqNum && 
                                    eligibleSqNum=attackedSqNum && 
                                    pieceUpper=attackingPiece
                                ) As theEligibleMove,
                        
                                If(IsBlank(theEligibleMove),false,true)
                            );
                        
                        UDF_countPiecesOnBoard(board:Text, piecesToCount:Text):Number=
                            Sum(
                                ForAll(
                                    Sequence(64,0) As theSqNum,
                        
                                    If(UDF_getBitAtSqNum(board, theSqNum.Value) exactin piecesToCount,1,0)
                                ), Value
                            );
                        
                        // User defined formulas
                        UDF_getOppositeDirection(dir:Number):Number=
                            Switch(true,
                                dir=N,  S,
                                dir=NE, SW,
                                dir=E,  W,
                                dir=SE, NW,
                                dir=S,  N,
                                dir=SW, NE,
                                dir=W,  E,
                                dir=NW, SE,
                                NO_DIRECTION
                            );
                        UDF_getDirX(dir:Number):Number=
                            Switch(true,
                                dir=N,  0,
                                dir=NE, 1,
                                dir=E,  1,
                                dir=SE, 1,
                                dir=S,  0,
                                dir=SW, -1,
                                dir=W,  -1,
                                dir=NW, -1,
                                0
                            );
                        UDF_getDirY(dir:Number):Number=
                            Switch(true,
                                dir=N,  1,
                                dir=NE, 1,
                                dir=E,  0,
                                dir=SE, -1,
                                dir=S,  -1,
                                dir=SW, -1,
                                dir=W,  0,
                                dir=NW, 1,
                                0
                            );
                        UDF_getDirX_KNIGHT(dir:Number):Number=
                            Switch(true,
                                dir=N,  1,
                                dir=NE, 2,
                                dir=E,  2,
                                dir=SE, 1,
                                dir=S,  -1,
                                dir=SW, -2,
                                dir=W,  -2,
                                dir=NW, -1,
                                0
                            );
                        UDF_getDirY_KNIGHT(dir:Number):Number=
                            Switch(true,
                                dir=N,  2,
                                dir=NE, 1,
                                dir=E,  -1,
                                dir=SE, -2,
                                dir=S,  -2,
                                dir=SW, -1,
                                dir=W,  1,
                                dir=NW, 2,
                                0
                            );
                        
                        UDF_sqNumToAdjacentSqNames(refSqNum:Number):Text=
                            Trim(
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(N),UDF_getDirY(N))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(NE),UDF_getDirY(NE))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(E),UDF_getDirY(E))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(SE),UDF_getDirY(SE))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(S),UDF_getDirY(S))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(SW),UDF_getDirY(SW))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(W),UDF_getDirY(W))) & " " &
                                UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,UDF_getDirX(NW),UDF_getDirY(NW)))
                            );
                        
                        // UDF Set --------
                        UDF_getSetSize(setA:Text):Number=
                            If(Trim(setA)="",
                                0,
                                CountRows(Distinct(Sort(Split(Trim(setA), " "), Value), Value))
                            );
                        UDF_createSetOfSqNames(sqNameList:Text):Text=
                            Trim(Concat(Distinct(Sort(Split(Trim(sqNameList), " "), Value), Value), Value, " "));
                        UDF_getElementFromSet(setA:Text, index:Number):Text=
                            If(index>=1 && index<=UDF_getSetSize(setA),
                                Index(Split(setA, " "), index).Value,
                                ""
                            );
                        UDF_getSetOfAdjacentSqNames(refSqName:Text):Text=
                            UDF_createSetOfSqNames(UDF_sqNumToAdjacentSqNames(UDF_sqNameToSqNum(refSqName)));
                        UDF_getSetDifference(setA:Text, setB:Text):Text=
                            Trim(
                                Concat(
                                    Distinct(
                                        Sort(
                                            ForAll(
                                                Split(setA, " ") As setA,
                        
                                                If(setA.Value in setB, "", setA.Value)
                                            ), Value
                                        ), Value
                                    ), Value, " "
                                )
                            );
                        UDF_getSetIntersection(setA:Text, setB:Text):Text=
                            Trim(
                                Concat(
                                    Distinct(
                                        Sort(
                                            ForAll(
                                                Split(setA, " ") As setA,
                        
                                                If(setA.Value in setB, setA.Value, "")
                                            ), Value
                                        ), Value
                                    ), Value, " "
                                )
                            );
                        UDF_getSetUnion(setA:Text, setB:Text):Text=
                            Trim(
                                Concat(
                                    Distinct(
                                        Sort(
                                            Split(Trim(setA & " " & setB), " "), Value
                                        ), Value
                                    ), Value, " "
                                )
                            );
                        
                        UDF_getSetComplement(setA:Text):Text=
                            UDF_getSetDifference(UNIVERSAL_SQNAMES_SET, setA);
                        
                        UDF_getSetofSqNamesInBox(refSqName1:Text, refSqName2:Text):Text=
                            Trim(
                                Concat(
                                    Distinct(
                                        Sort(
                                            ForAll(
                                                Sequence(64, 0) As theSqNum,
                        
                                                With(
                                                    {
                                                        fileNumMin:     Min(UDF_getFileNumFromSqName(refSqName1), UDF_getFileNumFromSqName(refSqName2)),
                                                        fileNumMax:     Max(UDF_getFileNumFromSqName(refSqName1), UDF_getFileNumFromSqName(refSqName2)),
                                                        rankMin:        Min(UDF_getRankFromSqName(refSqName1), UDF_getRankFromSqName(refSqName2)),
                                                        rankMax:        Max(UDF_getRankFromSqName(refSqName1), UDF_getRankFromSqName(refSqName2)),
                                                        currentFileNum: UDF_getFileNumFromSqNum(theSqNum.Value),
                                                        currentRank:    UDF_getRankFromSqNum(theSqNum.Value)
                                                    } As localVars,
                        
                                                    If(
                                                        (localVars.currentFileNum>=localVars.fileNumMin && localVars.currentFileNum<=localVars.fileNumMax) &&
                                                        (localVars.currentRank>=localVars.rankMin && localVars.currentRank<=localVars.rankMax),
                                                        UDF_sqNumToSqName(theSqNum.Value),
                                                        ""
                                                    )
                                                )
                                            ), Value
                                        ), Value
                                    ), Value, " "
                                )
                            );
                        
                        UDF_sqNumToFileSet(refSqNum:Number):Text=
                        	With(
                        		{
                        			fileName:	UDF_getFileNameFromSqNum(refSqNum)
                        		} As theData,
                        	
                                UDF_createSetOfSqNames(
                                    Concat(
                                        ForAll(
                                            Sequence(8,1) As theRank,
                        
                                            theData.fileName & theRank.Value
                                        ), Value, " "
                                    )
                                )
                            );
                        
                        UDF_sqNumToRankSet(refSqNum:Number):Text=
                        	With(
                        		{
                        			rank:	UDF_getRankFromSqNum(refSqNum)
                        		} As theData,
                        	
                                UDF_createSetOfSqNames(
                                    Concat(
                                        ForAll(
                                            Sequence(8,1) As theFileNum,
                        
                                            UDF_getFileNameFromFileNum(theFileNum.Value) & theData.rank
                                        ), Value, " "
                                    )
                                )
                            );
                        
                        UDF_sqNumToRookSet(refSqNum:Number):Text=
                            UDF_getSetUnion(UDF_sqNumToFileSet(refSqNum), UDF_sqNumToRankSet(refSqNum));
                        
                        UDF_sqNumToKingSet(refSqNum:Number):Text=
                            UDF_createSetOfSqNames(UDF_sqNumToAdjacentSqNames(refSqNum) & " " & UDF_sqNumToSqName(refSqNum));
                        
                        // UDF isProtected code TODO this needs to be completed...
                        UDF_isSqNumProtected(board:Text, refSqNum:Number, protectingColor:Number):Boolean=false;
                        
                        // UDF getSetOfOccupiedSqNames
                        UDF_getSetOfOccupiedSqNames(board:Text, filter:Text):Text=
                            Trim(
                                Concat(
                                    Distinct(
                                        Sort(
                                            ForAll(
                                                Sequence(64, 0) As theSqNum,
                        
                                                With(
                                                    {
                                                        thePiece: UDF_getBitAtSqNum(board, theSqNum.Value)
                                                    } As localVars,
                        
                                                    If(localVars.thePiece exactin filter, UDF_sqNumToSqName(theSqNum.Value), "")
                                                )
                                            ), Value
                                        ), Value
                                    ), Value, " "
                                )
                            );
                        
                        // UDF isAttacked code
                        // is a square occupied by KQRBNP attacked by an opposite colored PAWN
                        UDF_isSqNumPAWNAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                attackingColor=BLACK &&
                                (
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))="p" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))="p"
                                ),
                                    true,
                                    
                                attackingColor=WHITE &&
                                (
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))="P" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))="P"
                                ),
                                    true,
                        
                                // default
                                false
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored KNIGHT
                        UDF_isSqNumKNIGHTAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                attackingColor=BLACK,
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,2))="n" ||
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,1))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,-1))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-2))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-2))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,-1))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,1))="n" || 
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,2))="n",
                                    
                                attackingColor=WHITE,
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,2))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,1))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,-1))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-2))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-2))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,-1))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,1))="N" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,2))="N",
                        
                                // default
                                false
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored ROOK
                        UDF_isSqNumROOKAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                attackingColor=BLACK,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}r", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}r", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}r", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}r", MatchOptions.BeginsWith),
                        
                                attackingColor=WHITE,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}R", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}R", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}R", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}R", MatchOptions.BeginsWith),
                        
                                // default
                                false
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored BISHOP  
                        UDF_isSqNumBISHOPAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                attackingColor=BLACK,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}b", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}b", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}b", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}b", MatchOptions.BeginsWith),
                        
                                attackingColor=WHITE,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}B", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}B", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}B", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}B", MatchOptions.BeginsWith),
                        
                                // default
                                false
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored QUEEN
                        UDF_isSqNumQUEENAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                attackingColor=BLACK,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}q", MatchOptions.BeginsWith),
                        
                                attackingColor=WHITE,
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}Q", MatchOptions.BeginsWith) ||
                                    IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                        
                                // default
                                false
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored KING
                        UDF_isSqNumKINGAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            If(UDF_isSqNumProtected(board, refSqNum, UDF_getOppositeColor(attackingColor)),
                                // THEN - king cannot attack a protected square
                                false,
                        
                                Switch(true,
                                    attackingColor=BLACK,
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0))="k" || 
                                        UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))="k",
                                        
                                    attackingColor=WHITE,
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0))="K" || 
                                            UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))="K",
                        
                                    // default
                                    false
                                )
                            );
                        UDF_isSqNumAttacked(board:Text, refSqNum:Number, attackingColor:Number):Boolean=
                            Switch(true,
                                UDF_isSqNumPAWNAttacked(board, refSqNum, attackingColor), true,
                                UDF_isSqNumKNIGHTAttacked(board, refSqNum, attackingColor), true,
                                UDF_isSqNumKINGAttacked(board, refSqNum, attackingColor), true,
                                UDF_isSqNumROOKAttacked(board, refSqNum, attackingColor), true,
                                UDF_isSqNumBISHOPAttacked(board, refSqNum, attackingColor), true,
                                UDF_isSqNumQUEENAttacked(board, refSqNum, attackingColor), true,
                        
                                // default
                                false
                            );
                        // UDF countAttacks code
                        // is a square occupied by KQRBNP attacked by an opposite colored PAWN
                        UDF_countSqNumPAWNAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            Sum(
                                If(
                                    attackingColor=BLACK &&
                                    UDF_getBitAtSqNum(board, refSqNum) exactin "KQRBNP" &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))="p",
                                    1, 0
                                ),
                                If(
                                    attackingColor=BLACK &&
                                    UDF_getBitAtSqNum(board, refSqNum) exactin "KQRBNP" &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))="p",
                                    1, 0
                                ),
                                If(
                                    attackingColor=WHITE &&
                                    UDF_getBitAtSqNum(board, refSqNum) exactin "kqrbnp" &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))="P",
                                    1, 0
                                ),
                                If(
                                    attackingColor=WHITE &&
                                    UDF_getBitAtSqNum(board, refSqNum) exactin "kqrbnp" &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))="P",
                                    1, 0
                                )
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored KNIGHT
                        UDF_countSqNumKNIGHTAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            With(
                                {
                                    re: If(attackingColor=WHITE,"N","n")
                                } As v,
                                Sum(
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,2))=v.re,1,0),
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,1))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,-1))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-2))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-2))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,-1))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,1))=v.re,1,0), 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,2))=v.re,1,0)
                                )
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored ROOK
                        UDF_countSqNumROOKAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}R", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}R", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}R", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}R", MatchOptions.BeginsWith),1,0)
                                ),
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}r", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}r", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}r", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}r", MatchOptions.BeginsWith),1,0)
                                )
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored BISHOP  
                        UDF_countSqNumBISHOPAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}B", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}B", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}B", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}B", MatchOptions.BeginsWith),1,0)
                                ),
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}b", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}b", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}b", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}b", MatchOptions.BeginsWith),1,0)
                                )
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored QUEEN
                        UDF_countSqNumQUEENAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}Q", MatchOptions.BeginsWith),1,0)
                                ),
                                Sum(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0),
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}q", MatchOptions.BeginsWith),1,0)
                                )
                            );
                        // is a square occupied by KQRBNP attacked by an opposite colored KING
                        UDF_countSqNumKINGAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            If(UDF_isSqNumProtected(board, refSqNum, UDF_getOppositeColor(attackingColor)),
                                // THEN - king cannot attack a protected square
                                0,
                                // ELSE
                                With(
                                    {
                                        re: If(attackingColor=WHITE,"K","k")
                                    } As v,
                                    Sum(
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0))=v.re,1,0), 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))=v.re,1,0)
                                    )
                                )
                            );
                        UDF_countSqNumAttacks(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            Sum(
                                UDF_countSqNumPAWNAttacks(board, refSqNum, attackingColor),
                                UDF_countSqNumKNIGHTAttacks(board, refSqNum, attackingColor),
                                UDF_countSqNumKINGAttacks(board, refSqNum, attackingColor),
                                UDF_countSqNumROOKAttacks(board, refSqNum, attackingColor),
                                UDF_countSqNumBISHOPAttacks(board, refSqNum, attackingColor),
                                UDF_countSqNumQUEENAttacks(board, refSqNum, attackingColor)
                            );
                        // UDF getAttackerSqNames code
                        // get squares of attacking PAWNs
                        UDF_getPAWNAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            Trim(
                                If(
                                    attackingColor=BLACK &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))="p",
                                    UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,1)) & " ", ""
                                ) &
                                If(
                                    attackingColor=BLACK &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))="p",
                                    UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,1)) & " ", ""
                                ) &
                                If(
                                    attackingColor=WHITE &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))="P",
                                    UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1)) & " ", ""
                                ) &
                                If(
                                    attackingColor=WHITE &&
                                    UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))="P",
                                    UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,-1)) & " ", ""
                                )
                            );
                        // get squares of attacking KNIGHTs
                        UDF_getKNIGHTAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            With(
                                {
                                    re: If(attackingColor=WHITE,"N","n")
                                } As v,
                                Trim(
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,2))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,2)) & " ", ""
                                    ) &
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,1))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,2,1)) & " ", ""
                                    ) &
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,2,-1))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,2,-1)) & " ", ""
                                    ) & 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-2))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,-2)) & " ", ""
                                    ) & 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-2))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,-2)) & " ", ""
                                    ) & 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,-1))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-2,-1)) & " ", ""
                                    ) & 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-2,1))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-2,1)) & " ", ""
                                    ) & 
                                    If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,2))=v.re,
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,2)) & " ", ""
                                    )
                                )
                            );
                        // get squares of attacking ROOKs
                        UDF_getROOKAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}R", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,Find("R",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,0,1),1,7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}R", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,Find("R",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}R", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,-Find("R",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}R", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-Find("R",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7)),0)) & " ",
                                        ""
                                    )
                                ),
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}r", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,Find("r",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,0,1),1,7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}r", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,Find("r",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}r", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,-Find("r",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}r", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-Find("r",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7)),0)) & " ",
                                        ""
                                    )
                                )
                            );
                        // get squares of attacking BISHOPs
                        UDF_getBISHOPAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}B", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7)),
                                            Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}B", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,-1),4,7)),
                                            -Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,-1),4,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}B", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1),6,7)),
                                            -Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1),6,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}B", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,1),8,7)),
                                            Find("B",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,1),8,7))
                                        )) & " ",
                                        ""
                                    )
                                ),
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}b", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7)),
                                            Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}b", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),4,7)),
                                            -Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),4,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}b", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),6,7)),
                                            -Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),6,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}b", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),8,7)),
                                            Find("b",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),8,7))
                                        )) & " ",
                                        ""
                                    )
                                )
                            );
                        // get squares of attacking QUEENs
                        UDF_getQUEENAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            // IsMatch() requires a constant value for the pattern
                            If(attackingColor=WHITE,
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,0,1),1,7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,Find("Q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,-Find("Q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-Find("Q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7)),
                                            Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),4,7)),
                                            -Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),4,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),6,7)),
                                            -Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),6,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}Q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),8,7)),
                                            Find("Q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),8,7))
                                        )) & " ",
                                        ""
                                    )
                                ),
                                Trim(
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1), 1, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,0,1),1,7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,Find("q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0), 3, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,-Find("q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1), 5, 7)))) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-Find("q",UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0), 7, 7)),0)) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1), 2, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7)),
                                            Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,1),2,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1), 4, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,-1),4,7)),
                                            -Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,1,-1),4,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1), 6, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1),6,7)),
                                            -Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1),6,7))
                                        )) & " ",
                                        ""
                                    ) &
                                    If(IsMatch(UDF_getBitsAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1), 8, 7), "#{0,6}q", MatchOptions.BeginsWith),
                                        UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,
                                            -Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,1),8,7)),
                                            Find("q",UDF_getBitsAtSqNum(board,UDF_getSqNumRelativeToSqNum(refSqNum,-1,1),8,7))
                                        )) & " ",
                                        ""
                                    )
                                )
                            );
                        // get squares of attacking KINGs
                        UDF_getKINGAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            If(UDF_isSqNumProtected(board, refSqNum, UDF_getOppositeColor(attackingColor)),
                                // THEN - king cannot attack a protected square
                                0,
                                // ELSE
                                With(
                                    {
                                        re: If(attackingColor=WHITE,"K","k")
                                    } As v,
                                    Trim(
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,1)) & " ", ""
                                        ) &
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,1)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,0))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,0)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,1,-1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,1,-1)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,0,-1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,0,-1)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,-1)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,0))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,0)) & " ", ""
                                        ) & 
                                        If(UDF_getBitAtSqNum(board, UDF_getSqNumRelativeToSqNum(refSqNum,-1,1))=v.re,
                                            UDF_sqNumToSqName(UDF_getSqNumRelativeToSqNum(refSqNum,-1,1)) & " ", ""
                                        )
                                    )
                                )
                            );
                        UDF_getAttackerSqNames(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            Trim(
                                UDF_getPAWNAttackerSqNames(board, refSqNum, attackingColor) & " " &
                                UDF_getKNIGHTAttackerSqNames(board, refSqNum, attackingColor) & " " &
                                UDF_getKINGAttackerSqNames(board, refSqNum, attackingColor) & " " &
                                UDF_getROOKAttackerSqNames(board, refSqNum, attackingColor) & " " &
                                UDF_getBISHOPAttackerSqNames(board, refSqNum, attackingColor) & " " &
                                UDF_getQUEENAttackerSqNames(board, refSqNum, attackingColor)
                            );
                        UDF_getAttackerSqNamesSet(board:Text, refSqNum:Number, attackingColor:Number):Text=
                            UDF_createSetOfSqNames(UDF_getAttackerSqNames(board, refSqNum, attackingColor));
                        // get the material value of the weakest piece attacking a square
                        UDF_getSqNumAttackersMaterialCentipawn(board:Text, refSqNum:Number, attackingColor:Number):Number=
                            With(
                                {
                                    attackerSet: UDF_getAttackerSqNamesSet(board, refSqNum, attackingColor)
                                } As v,
                                With(
                                    {
                                        minMaterialValue:
                                            Min(
                                                ForAll(
                                                    Sequence(UDF_getSetSize(v.attackerSet), 1) As i,
                                                    Switch(
                                                        UDF_getBitAtSqNum(board, UDF_sqNameToSqNum(UDF_getElementFromSet(v.attackerSet, i.Value))),
                                                        "P", 100,
                                                        "p", 100,
                                                        "N", 300,
                                                        "n", 300,
                                                        "B", 300,
                                                        "b", 300,
                                                        "R", 500,
                                                        "r", 500,
                                                        "Q", 900,
                                                        "q", 900,
                                                        "K", 10000,
                                                        "k", 10000,
                                                        0
                                                    )
                                                ), Value
                                            )
                                    } As v2,
                                    If(attackingColor=WHITE,
                                        v2.minMaterialValue,
                                        -v2.minMaterialValue
                                    )
                                )
                            );
                 */
                
                If(!lTEST_FAILURE_DETECTED,
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getQUEENAttackerSqNames"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "b7"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getQUEENAttackerSqNames(lTEST_BOARD, lTEST_REFERENCE_SQNUM, UDF_FEN_TO_ACTIVE_COLOR(lTEST_FEN))
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getAttackerSqNamesSet"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_TEXT: "b7 d7"});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_TEXT:
                        UDF_getAttackerSqNamesSet(lTEST_BOARD, lTEST_REFERENCE_SQNUM, UDF_FEN_TO_ACTIVE_COLOR(lTEST_FEN))
                    });
                
                    If(lTEST_EXPECTED_RESULT_TEXT<>lTEST_ACTUAL_RESULT_TEXT,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_TEXT &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_TEXT
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(!lTEST_FAILURE_DETECTED,
                    UpdateContext({lTEST_TEST_CATEGORY: "UDF_getSqNumAttackersMaterialCentipawn"});
                    UpdateContext({lTEST_TEST_NUMBER: 0});
                    UpdateContext({lTEST_TEST_NUMBER: lTEST_TEST_NUMBER + 1});
                
                    UpdateContext({lTEST_FEN: "7k/1q1p4/8/8/8/8/4K3/8 b - - 0 1"});
                    UpdateContext({lTEST_BOARD: UDF_FEN_TO_BOARD(lTEST_FEN)});
                    UpdateContext({lTEST_REFERENCE_SQNAME: "c6"});
                    UpdateContext({lTEST_REFERENCE_SQNUM: UDF_sqNameToSqNum(lTEST_REFERENCE_SQNAME)});
                
                    UpdateContext({lTEST_EXPECTED_RESULT_NUMBER: -100});
                
                    UpdateContext({lTEST_ACTUAL_RESULT_NUMBER:
                        UDF_getSqNumAttackersMaterialCentipawn(lTEST_BOARD, lTEST_REFERENCE_SQNUM, UDF_FEN_TO_ACTIVE_COLOR(lTEST_FEN))
                    });
                
                    If(lTEST_EXPECTED_RESULT_NUMBER<>lTEST_ACTUAL_RESULT_NUMBER,
                        // THEN 
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " FAILED" &
                                " RESULTS EXPECTED: " & lTEST_EXPECTED_RESULT_NUMBER &
                                " ACTUAL: " & lTEST_ACTUAL_RESULT_NUMBER
                            })
                        );
                        UpdateContext({lTEST_FAILURE_DETECTED: true}),
                
                        // ELSE
                        If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                            Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                                " btnRunUDFDiagnostics.OnSelect(): " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER & " PASSED"
                            })
                        )
                    )
                );
                
                If(lTEST_FAILURE_DETECTED,
                    // THEN
                    If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                        Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                            " btnRunUDFDiagnostics.OnSelect(): FAILURE " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER
                        })
                    );
                    UpdateContext({lUDF_DIAGNOSTICS_RESULT: "FAILURE " & lTEST_TEST_CATEGORY & " test #: " & lTEST_TEST_NUMBER}),
                
                    // ELSE
                    UpdateContext({lUDF_DIAGNOSTICS_RESULT: "PASSED"})
                );
                
                If(gblPF_DEBUG_UDF_DIAGNOSTICS,
                    Collect(colPF_logs, {logOffset: GET_LOG_INDEX, logEntry: Text(Now(), "mm/dd/yyyy hh:mm:ss.fff") &
                        " btnRunUDFDiagnostics.OnSelect(): exiting"
                        
                    })
                );
            Size: =10
            Text: ="Run UDF Diagnostics"
            X: =40
            Y: =40
            ZIndex: =2

        btnGotoChessBoard As button:
            OnSelect: =Navigate(Chess_Board)
            Size: =12
            Text: ="Goto Chess Board"
            X: =1200
            Y: =664
            ZIndex: =3

        btnGotoLogsFromDiagnostics As button:
            OnSelect: =Navigate(Logging_Screen)
            Size: =12
            Text: ="Goto Logs"
            X: =1200
            Y: =715
            ZIndex: =4

        lblBoardResult As label:
            BorderThickness: =1
            Font: =Font.'Courier New'
            Height: =30
            Size: =10
            Text: |
                =If(CountRows(Split(txtFenToConvert.Text, " "))<>6,
                    // THEN
                    "",
                
                    // ELSE
                    UDF_FEN_TO_BOARD(txtFenToConvert.Text)
                )
            Width: =1000
            X: =lblFenToBoardHeader.X + lblFenToBoardHeader.Width + 5
            Y: =txtFenToConvert.Y + txtFenToConvert.Height
            ZIndex: =7

        txtFenToConvert As text:
            Default: ="FEN to convert"
            Font: =Font.'Courier New'
            Height: =25
            PaddingLeft: =5
            Size: =10
            Width: =1000
            X: =lblFenToBoardHeader.X + lblFenToBoardHeader.Width + 5
            Y: =lblFenToBoardHeader.Y - 5
            ZIndex: =8

        lblFenToBoardHeader As label:
            Align: =Align.Center
            Size: =12
            Text: ="FEN to Board"
            Width: =btnRunUDFDiagnostics.Width
            X: =btnRunUDFDiagnostics.X
            Y: =btnRunUDFDiagnostics.Y + btnRunUDFDiagnostics.Height + 10
            ZIndex: =9

        lblBoardToPPD As label:
            Align: =Align.Center
            Size: =12
            Text: ="Board to PPD"
            Width: =btnRunUDFDiagnostics.Width
            X: =45
            Y: =160
            ZIndex: =10

        txtBoardToConvert As text:
            Default: ="Board to convert"
            Font: =Font.'Courier New'
            Height: =25
            PaddingLeft: =5
            Size: =10
            Width: =1000
            X: =205
            Y: =160
            ZIndex: =11

        lblPPDResult As label:
            BorderThickness: =1
            Font: =Font.'Courier New'
            Height: =30
            Size: =10
            Text: |
                =If(CountRows(Split(txtBoardToConvert.Text, " "))<>1 || Len(txtBoardToConvert.Text)<>64,
                    // THEN
                    "",
                
                    // ELSE
                    UDF_BOARD_TO_FEN_PIECE_PLACEMENT(txtBoardToConvert.Text)
                )
            Width: =1000
            X: =205
            Y: =185
            ZIndex: =12

